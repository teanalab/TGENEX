2018-02-09T22:37:16.564Z - info: node/index:: { action: 'started',
  argv: 
   { _: {},
     dev: false,
     startup: true,
     h: false,
     help: false,
     version: false,
     p: 'sn_0_8501275',
     '$0': 'Applications/Rodeo.app/Contents/MacOS/Rodeo -psn_0_8501275' },
  'process.argv': 
   { '0': '/Applications/Rodeo.app/Contents/MacOS/Rodeo',
     '1': '-psn_0_8501275' },
  cwd: '/',
  versions: 
   { http_parser: '2.7.0',
     node: '6.5.0',
     v8: '5.3.332.47',
     uv: '1.9.1',
     zlib: '1.2.8',
     ares: '1.10.1-DEV',
     modules: '50',
     openssl: '1.0.2h',
     electron: '1.4.13',
     chrome: '53.0.2785.143',
     'atom-shell': '1.4.13' },
  resourcesPath: '/Applications/Rodeo.app/Contents/Resources',
  isActiveSquirrelCommand: false }
2018-02-09T22:37:16.634Z - info: node/index:: serving plots from port 8144
2018-02-09T22:37:16.638Z - info: node/index:: will-finish-launching
2018-02-09T22:37:16.676Z - info: node/index:: startMainWindow
2018-02-09T22:37:17.158Z - info: node/index:: attachIpcMainEvents
2018-02-09T22:37:18.209Z - info: node/services/updater:: checking for updates for 2.5.2
2018-02-09T22:37:18.211Z - info: node/services/updater:: check for update at http://bareback2.s.yhat.com/update/osx/2.5.2
2018-02-09T22:37:18.229Z - info: node/index:: Getting Environment Variables
2018-02-09T22:37:18.246Z - info: node/services/processes:: added child process { pid: 22409,
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 1 children running
2018-02-09T22:37:18.298Z - info: node/services/processes:: removed child process { pid: 22409,
  code: 0,
  signal: null,
  errors: {},
  cmd: '/bin/bash',
  args: { '0': '--login', '1': '-c', '2': 'env' },
  options: undefined } ; 0 children running
2018-02-09T22:37:18.301Z - info: node/services/env:: Got Environment Variables { __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  HOME: '/Users/diamac',
  SHELL: '/bin/bash',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  LOGNAME: 'diamac',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  COMMAND_MODE: 'unix2003',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  PWD: '/',
  SHLVL: '1',
  _: '/usr/bin/env' }
2018-02-09T22:37:18.303Z - info: node/index:: { __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  HOME: '/Users/diamac',
  SHELL: '/bin/bash',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  LOGNAME: 'diamac',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  COMMAND_MODE: 'unix2003',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  PYTHONUNBUFFERED: '1',
  PYTHONIOENCODING: 'utf-8',
  PWD: '/',
  SHLVL: '1',
  _: '/usr/bin/env' }
2018-02-09T22:37:18.448Z - info: node/services/files:: startWatching file-viewer /Users/diamac/*
2018-02-09T22:37:18.475Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T22:37:18.477Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:37:18.478Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:37:18.480Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:37:18.481Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:37:18.483Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T22:37:18.492Z - info: node/services/processes:: added child process { pid: 22412,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T22:37:18.497Z - info: node/index:: created new python kernel process cjdgiiebu0000adu515ceap1q process 22412 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:37:18.502Z - info: node/services/browser-windows:: did-finish-load mainWindow
2018-02-09T22:37:28.251Z - info: node/index:: new python kernel process is ready cjdgiiebu0000adu515ceap1q process 22412 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:38:01.318Z - info: node/services/browser-windows:: ipc cjdgijbdf0005adu5joiuevub: jupyter completed 18ms
2018-02-09T22:38:01.329Z - info: node/services/browser-windows:: ipc cjdgijbdh0006adu5gm22pdn1: jupyter completed 28ms
2018-02-09T22:38:01.336Z - info: node/services/browser-windows:: ipc cjdgijbdl0007adu56isahhv9: jupyter completed 31ms
2018-02-09T22:38:01.345Z - info: node/services/browser-windows:: ipc cjdgijbdm0008adu58o3nz4eo: jupyter completed 39ms
2018-02-09T22:38:07.500Z - info: node/services/browser-windows:: ipc cjdgijg5m000aadu5mo9fu9if: getTabs completed 1ms
2018-02-09T22:38:07.575Z - info: node/services/browser-windows:: ipc cjdgijg7f000cadu5spxgkrz0: jupyter completed 11ms
2018-02-09T22:38:07.582Z - info: node/services/browser-windows:: ipc cjdgijg7i000dadu58jgl3m52: jupyter completed 16ms
2018-02-09T22:38:07.641Z - info: node/services/browser-windows:: ipc cjdgijg9a000eadu5wnipjazw: jupyter completed 11ms
2018-02-09T22:38:08.009Z - info: node/services/browser-windows:: ipc cjdgijgjh000fadu5vbzc13eg: jupyter completed 11ms
2018-02-09T22:38:08.064Z - info: node/services/browser-windows:: ipc cjdgijgl0000gadu5dm2ej5rx: jupyter completed 12ms
2018-02-09T22:38:08.659Z - info: node/services/browser-windows:: ipc cjdgijh1f000hadu5g49qvcq1: jupyter completed 15ms
2018-02-09T22:38:12.063Z - info: node/index:: new plot served from http://localhost:8144/11819-22405-mynyd2.rod2t9.png
2018-02-09T22:38:12.085Z - info: node/services/browser-windows:: ipc cjdgijjof000iadu5ocezgpkw: jupyter completed 21ms
2018-02-09T22:38:12.093Z - info: node/services/plot-server:: sending file { filename: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/11819-22405-mynyd2.rod2t9.png',
  route: '/11819-22405-mynyd2.rod2t9.png',
  port: 8144 }
2018-02-09T22:38:12.099Z - info: node/services/browser-windows:: ipc cjdgijjog000jadu52ldm0g6e: jupyter completed 35ms
2018-02-09T22:38:12.104Z - info: node/services/plot-server:: sending file
2018-02-09T22:38:12.106Z - info: node/services/browser-windows:: ipc cjdgijjog000kadu5a03o31sw: jupyter completed 42ms
2018-02-09T22:38:19.547Z - info: node/services/updater:: dispatch { type: 'AUTO_UPDATE_ERROR', data: 'The request timed out.' }
2018-02-09T22:38:19.605Z - info: node/services/browser-windows:: ipc cjdgijpgb000madu5775u4vmm: dispatch completed 57ms
2018-02-09T22:38:28.652Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgijwh7000nadu5s4lpi7uq',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:38:41.245Z - info: node/services/browser-windows:: ipc cjdgik66u000padu52u3zkvi3: getTabs completed 7ms
2018-02-09T22:38:41.281Z - info: node/services/browser-windows:: ipc cjdgik67n000radu5ppwd817q: jupyter completed 14ms
2018-02-09T22:38:41.287Z - info: node/services/browser-windows:: ipc cjdgik67o000sadu57i9ckosm: jupyter completed 19ms
2018-02-09T22:38:41.301Z - info: node/services/browser-windows:: ipc cjdgik67s000tadu5ursi3pno: jupyter completed 29ms
2018-02-09T22:38:41.305Z - info: node/services/browser-windows:: ipc cjdgik67t000uadu543o2xw6q: jupyter completed 32ms
2018-02-09T22:38:42.168Z - info: node/services/browser-windows:: ipc cjdgik6wl000wadu5yjqedjkg: getTabs completed 3ms
2018-02-09T22:38:42.204Z - info: node/services/browser-windows:: ipc cjdgik6x4000yadu5r07gcqcb: jupyter completed 19ms
2018-02-09T22:38:42.211Z - info: node/services/browser-windows:: ipc cjdgik6x8000zadu51qwzu9ak: jupyter completed 23ms
2018-02-09T22:38:42.223Z - info: node/services/browser-windows:: ipc cjdgik6xg0010adu5resyxyab: jupyter completed 27ms
2018-02-09T22:38:42.229Z - info: node/services/browser-windows:: ipc cjdgik6xh0011adu5a9nf1m7f: jupyter completed 32ms
2018-02-09T22:38:43.277Z - info: node/services/browser-windows:: ipc cjdgik7rd0015adu5dhxza7r6: getTabs completed 4ms
2018-02-09T22:38:43.311Z - info: node/services/browser-windows:: ipc cjdgik7s30017adu5fh9ibzli: jupyter completed 12ms
2018-02-09T22:38:43.316Z - info: node/services/browser-windows:: ipc cjdgik7s60018adu5j3dqq6ng: jupyter completed 14ms
2018-02-09T22:38:43.323Z - info: node/services/browser-windows:: ipc cjdgik7sd0019adu5ym7dedwm: jupyter completed 14ms
2018-02-09T22:38:43.333Z - info: node/services/browser-windows:: ipc cjdgik7se001aadu5hyqed944: jupyter completed 23ms
2018-02-09T22:38:44.075Z - info: node/services/browser-windows:: ipc cjdgik8dk001cadu5v5rnri1t: getTabs completed 3ms
2018-02-09T22:38:44.102Z - info: node/services/browser-windows:: ipc cjdgik8e0001eadu505iposwp: jupyter completed 14ms
2018-02-09T22:38:44.109Z - info: node/services/browser-windows:: ipc cjdgik8e2001fadu50jle960h: jupyter completed 18ms
2018-02-09T22:38:44.119Z - info: node/services/browser-windows:: ipc cjdgik8ea001gadu5exybwhnw: jupyter completed 20ms
2018-02-09T22:38:44.123Z - info: node/services/browser-windows:: ipc cjdgik8ec001hadu5b2wy5f5x: jupyter completed 23ms
2018-02-09T22:38:44.641Z - info: node/services/browser-windows:: ipc cjdgik8t9001kadu5lz4ivxkx: getTabs completed 4ms
2018-02-09T22:38:45.042Z - info: node/services/browser-windows:: ipc cjdgik94b001madu5vdmyo6kv: jupyter completed 7ms
2018-02-09T22:38:45.351Z - info: node/services/browser-windows:: ipc cjdgik9cx001oadu56hah7i2d: jupyter completed 6ms
2018-02-09T22:38:45.381Z - info: node/services/browser-windows:: ipc cjdgik9dj001padu5qs94kt9q: jupyter completed 13ms
2018-02-09T22:38:45.410Z - info: node/services/browser-windows:: ipc cjdgik9dy001qadu5pxhhv4x4: jupyter completed 28ms
2018-02-09T22:38:59.368Z - info: node/services/browser-windows:: ipc cjdgikk6d001sadu5pjssoiw4: getTabs completed 3ms
2018-02-09T22:38:59.504Z - info: node/services/browser-windows:: ipc cjdgikka0001uadu5dgz1j3f5: jupyter completed 8ms
2018-02-09T22:38:59.589Z - info: node/services/browser-windows:: ipc cjdgikkcg001vadu5uyr1nrtt: jupyter completed 5ms
2018-02-09T22:39:01.332Z - info: node/services/browser-windows:: ipc cjdgiklot001wadu51932bah1: jupyter completed 7ms
2018-02-09T22:39:01.338Z - info: node/services/browser-windows:: ipc cjdgiklou001xadu55aznnr1u: jupyter completed 11ms
2018-02-09T22:39:08.324Z - info: node/index:: deleted python kernel process reference cjdgiiebu0000adu515ceap1q
2018-02-09T22:39:08.434Z - info: node/index:: python kernel process event cjdgiiebu0000adu515ceap1q process 22412 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-09T22:39:08.446Z - info: node/services/processes:: removed child process { pid: 22412,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T22:39:08.446Z - info: node/index:: python kernel process closed cjdgiiebu0000adu515ceap1q process 22412 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-09T22:39:08.447Z - info: node/index:: successfully killed python kernel process reference cjdgiiebu0000adu515ceap1q
2018-02-09T22:39:08.450Z - info: node/services/browser-windows:: ipc cjdgikr6n001zadu5b3a7fqtt: close completed 3ms
2018-02-09T22:39:08.453Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T22:39:08.454Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:08.455Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:08.456Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:08.457Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:08.458Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T22:39:08.466Z - info: node/services/processes:: added child process { pid: 22473,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T22:39:08.471Z - info: node/index:: created new python kernel process cjdgikr6t0020adu5bsnzfle2 process 22473 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:39:10.593Z - info: node/services/browser-windows:: ipc cjdgiksu50021adu5azgbu38n: getTabs completed 4ms
2018-02-09T22:39:10.821Z - info: node/index:: new python kernel process is ready cjdgikr6t0020adu5bsnzfle2 process 22473 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:39:11.363Z - info: node/services/browser-windows:: ipc cjdgiktfj0024adu57qlwltes: jupyter completed 4ms
2018-02-09T22:39:12.666Z - info: node/services/browser-windows:: ipc cjdgikufm0025adu5vo7k0v7y: jupyter completed 7ms
2018-02-09T22:39:14.562Z - info: node/services/browser-windows:: ipc cjdgikvvy0026adu5c4to2683: jupyter completed 20ms
2018-02-09T22:39:14.569Z - info: node/services/browser-windows:: ipc cjdgikvvz0027adu5l8hvs2nu: jupyter completed 26ms
2018-02-09T22:39:14.571Z - info: node/services/browser-windows:: ipc cjdgikvw00028adu59po7wtjr: jupyter completed 27ms
2018-02-09T22:39:18.483Z - info: node/index:: deleted python kernel process reference cjdgikr6t0020adu5bsnzfle2
2018-02-09T22:39:18.695Z - info: node/index:: python kernel process event cjdgikr6t0020adu5bsnzfle2 process 22473 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-09T22:39:18.708Z - info: node/services/processes:: removed child process { pid: 22473,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T22:39:18.709Z - info: node/index:: python kernel process closed cjdgikr6t0020adu5bsnzfle2 process 22473 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-09T22:39:18.709Z - info: node/index:: successfully killed python kernel process reference cjdgikr6t0020adu5bsnzfle2
2018-02-09T22:39:18.712Z - info: node/services/browser-windows:: ipc cjdgikz3p0029adu5a3c5ka6y: close completed 3ms
2018-02-09T22:39:18.713Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T22:39:18.713Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:18.714Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:18.716Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:18.717Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:39:18.717Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T22:39:18.723Z - info: node/services/processes:: added child process { pid: 22515,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T22:39:18.724Z - info: node/index:: created new python kernel process cjdgikz3t002aadu5p3v93cd5 process 22515 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:39:21.011Z - info: node/index:: new python kernel process is ready cjdgikz3t002aadu5p3v93cd5 process 22515 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:39:44.650Z - info: node/services/browser-windows:: ipc cjdgilj42002dadu5ju2ai421: getTabs completed 8ms
2018-02-09T22:39:44.751Z - info: node/services/browser-windows:: ipc cjdgilj6u002fadu5qh5bikt3: jupyter completed 9ms
2018-02-09T22:39:44.797Z - info: node/services/browser-windows:: ipc cjdgilj87002gadu54cfawvfc: jupyter completed 6ms
2018-02-09T22:39:46.815Z - info: node/services/browser-windows:: ipc cjdgilks7002hadu58gawzudr: jupyter completed 7ms
2018-02-09T22:39:46.819Z - info: node/services/browser-windows:: ipc cjdgilks8002iadu53ife6s9y: jupyter completed 11ms
2018-02-09T22:40:11.509Z - info: node/services/browser-windows:: ipc cjdgim3u6002jadu51gg5v22s: getTabs completed 6ms
2018-02-09T22:40:11.545Z - info: node/services/browser-windows:: ipc cjdgim3v7002ladu5iy9iy45i: jupyter completed 6ms
2018-02-09T22:40:11.559Z - info: node/services/browser-windows:: ipc cjdgim3v8002madu5vd16o8nd: jupyter completed 19ms
2018-02-09T22:40:11.569Z - info: node/services/browser-windows:: ipc cjdgim3vl002nadu5zqvwhqjc: jupyter completed 15ms
2018-02-09T22:40:11.578Z - info: node/services/browser-windows:: ipc cjdgim3vm002oadu5ew17blnr: jupyter completed 24ms
2018-02-09T22:40:35.114Z - info: node/services/browser-windows:: ipc cjdgimm1o002sadu5h84qufdb: jupyter completed 10ms
2018-02-09T22:40:35.118Z - info: node/services/browser-windows:: ipc cjdgimm1s002tadu5xkfqfjrq: jupyter completed 14ms
2018-02-09T22:40:35.192Z - info: node/services/browser-windows:: ipc cjdgimm3w002uadu5kdfvzsvn: jupyter completed 12ms
2018-02-09T22:40:35.298Z - info: node/services/browser-windows:: ipc cjdgimm70002vadu5yuge1x7r: jupyter completed 6ms
2018-02-09T22:40:35.307Z - info: node/services/browser-windows:: ipc cjdgimm72002wadu5bbs2lfa6: jupyter completed 13ms
2018-02-09T22:40:37.583Z - info: node/services/browser-windows:: ipc cjdgimnyg0030adu562jc18ka: jupyter completed 7ms
2018-02-09T22:40:37.590Z - info: node/services/browser-windows:: ipc cjdgimnyi0031adu5j8asddrf: jupyter completed 12ms
2018-02-09T22:40:37.605Z - info: node/services/browser-windows:: ipc cjdgimnyz0032adu5et9t0596: jupyter completed 10ms
2018-02-09T22:40:37.715Z - info: node/services/browser-windows:: ipc cjdgimo270033adu52agp3n56: jupyter completed 4ms
2018-02-09T22:40:37.725Z - info: node/services/browser-windows:: ipc cjdgimo270034adu5588qw89d: jupyter completed 14ms
2018-02-09T22:40:41.383Z - info: node/services/browser-windows:: ipc cjdgimqvx0038adu502rrs7tw: jupyter completed 7ms
2018-02-09T22:40:41.390Z - info: node/services/browser-windows:: ipc cjdgimqvy0039adu5muyxh9ca: jupyter completed 16ms
2018-02-09T22:40:41.557Z - info: node/services/browser-windows:: ipc cjdgimr0o003aadu5d8u9ff7k: jupyter completed 13ms
2018-02-09T22:40:41.569Z - info: node/services/browser-windows:: ipc cjdgimr0w003badu5rav538he: jupyter completed 16ms
2018-02-09T22:40:41.572Z - info: node/services/browser-windows:: ipc cjdgimr0x003cadu5jhygg72i: jupyter completed 19ms
2018-02-09T22:41:12.803Z - info: node/index:: deleted python kernel process reference cjdgikz3t002aadu5p3v93cd5
2018-02-09T22:41:13.495Z - info: node/index:: python kernel process event cjdgikz3t002aadu5p3v93cd5 process 22515 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-09T22:41:13.504Z - info: node/services/processes:: removed child process { pid: 22515,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T22:41:13.504Z - info: node/index:: python kernel process closed cjdgikz3t002aadu5p3v93cd5 process 22515 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-09T22:41:13.505Z - info: node/index:: successfully killed python kernel process reference cjdgikz3t002aadu5p3v93cd5
2018-02-09T22:41:13.508Z - info: node/services/browser-windows:: ipc cjdginfoh003eadu5fgb42ryf: close completed 2ms
2018-02-09T22:41:13.510Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T22:41:13.510Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:41:13.511Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:41:13.512Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:41:13.513Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T22:41:13.513Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T22:41:13.521Z - info: node/services/processes:: added child process { pid: 22560,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T22:41:13.524Z - info: node/index:: created new python kernel process cjdginfol003fadu5wlx5vxjz process 22560 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:41:15.808Z - info: node/index:: new python kernel process is ready cjdginfol003fadu5wlx5vxjz process 22560 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T22:42:25.215Z - info: node/services/browser-windows:: ipc cjdgioz00003jadu5tt80cdyv: jupyter completed 12ms
2018-02-09T22:42:25.216Z - info: node/services/browser-windows:: ipc cjdgioz03003kadu582fn0pej: jupyter completed 13ms
2018-02-09T22:42:25.229Z - info: node/services/browser-windows:: ipc cjdgioz04003ladu56n4k6qoo: jupyter completed 25ms
2018-02-09T22:42:27.964Z - info: node/services/browser-windows:: ipc cjdgip14o003nadu5e28uu26p: jupyter completed 4ms
2018-02-09T22:42:27.973Z - info: node/services/browser-windows:: ipc cjdgip14o003oadu5dy4vffxz: jupyter completed 12ms
2018-02-09T22:42:47.879Z - info: node/services/browser-windows:: ipc cjdgipghr003qadu5bgi9vr1u: getTabs completed 8ms
2018-02-09T22:42:48.000Z - info: node/services/browser-windows:: ipc cjdgipgl7003sadu5n1fdvxn8: jupyter completed 5ms
2018-02-09T22:42:48.052Z - info: node/services/browser-windows:: ipc cjdgipgmm003tadu55h2jt9js: jupyter completed 6ms
2018-02-09T22:42:49.387Z - info: node/services/browser-windows:: ipc cjdgiphnq003uadu5joy8yco8: jupyter completed 5ms
2018-02-09T22:42:49.392Z - info: node/services/browser-windows:: ipc cjdgiphnr003vadu53echkqwj: jupyter completed 9ms
2018-02-09T22:43:03.989Z - info: node/services/browser-windows:: ipc cjdgipsx9003wadu5uw648dvf: getTabs completed 8ms
2018-02-09T22:43:04.049Z - info: node/services/browser-windows:: ipc cjdgipsyt003yadu5wyiwmc4g: jupyter completed 11ms
2018-02-09T22:43:04.130Z - info: node/services/browser-windows:: ipc cjdgipt0b003zadu5x38pikag: jupyter completed 39ms
2018-02-09T22:43:05.080Z - info: node/services/browser-windows:: ipc cjdgiptrn0040adu50aqbyl73: jupyter completed 5ms
2018-02-09T22:43:05.088Z - info: node/services/browser-windows:: ipc cjdgiptro0041adu5p38miynv: jupyter completed 12ms
2018-02-09T22:43:07.323Z - info: node/services/browser-windows:: ipc cjdgipvgs0045adu5619g90hj: jupyter completed 47ms
2018-02-09T22:43:07.333Z - info: node/services/browser-windows:: ipc cjdgipvgt0046adu5quowqqix: jupyter completed 55ms
2018-02-09T22:43:07.339Z - info: node/services/browser-windows:: ipc cjdgipvh00047adu52593vo9s: jupyter completed 55ms
2018-02-09T22:43:07.348Z - info: node/services/browser-windows:: ipc cjdgipvh20048adu5kd66bi7g: jupyter completed 62ms
2018-02-09T22:43:07.662Z - info: node/services/browser-windows:: ipc cjdgipvr6004badu54z4a42t3: jupyter completed 12ms
2018-02-09T22:43:07.669Z - info: node/services/browser-windows:: ipc cjdgipvr6004cadu5909u3o6a: jupyter completed 19ms
2018-02-09T22:43:07.683Z - info: node/services/browser-windows:: ipc cjdgipvrd004dadu5y0e5rdmi: jupyter completed 25ms
2018-02-09T22:43:07.688Z - info: node/services/browser-windows:: ipc cjdgipvrf004eadu5jbofj5oy: jupyter completed 29ms
2018-02-09T22:43:07.993Z - info: node/services/browser-windows:: ipc cjdgipw0e004hadu5a8koszls: jupyter completed 11ms
2018-02-09T22:43:08.005Z - info: node/services/browser-windows:: ipc cjdgipw0f004iadu5bpovl69z: jupyter completed 22ms
2018-02-09T22:43:08.026Z - info: node/services/browser-windows:: ipc cjdgipw0o004jadu5esy4o8dp: jupyter completed 34ms
2018-02-09T22:43:08.032Z - info: node/services/browser-windows:: ipc cjdgipw0q004kadu5s77hoh0r: jupyter completed 38ms
2018-02-09T22:43:08.240Z - info: node/services/browser-windows:: ipc cjdgipw7a004nadu5mylxudxh: jupyter completed 10ms
2018-02-09T22:43:08.246Z - info: node/services/browser-windows:: ipc cjdgipw7b004oadu5pfwk2vl5: jupyter completed 15ms
2018-02-09T22:43:08.256Z - info: node/services/browser-windows:: ipc cjdgipw7i004padu5dsvph2o1: jupyter completed 18ms
2018-02-09T22:43:08.265Z - info: node/services/browser-windows:: ipc cjdgipw7j004qadu510t2zxos: jupyter completed 26ms
2018-02-09T22:43:08.490Z - info: node/services/browser-windows:: ipc cjdgipwe8004tadu5730ih03h: jupyter completed 10ms
2018-02-09T22:43:08.499Z - info: node/services/browser-windows:: ipc cjdgipwea004uadu5xhy1twag: jupyter completed 16ms
2018-02-09T22:43:08.510Z - info: node/services/browser-windows:: ipc cjdgipweg004vadu5fru8tgaz: jupyter completed 22ms
2018-02-09T22:43:08.519Z - info: node/services/browser-windows:: ipc cjdgipweh004wadu57nzl8cw0: jupyter completed 30ms
2018-02-09T22:43:10.867Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgipy8f004yadu5afvqn4gd',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:43:20.419Z - info: node/services/browser-windows:: ipc cjdgiq5lk004zadu5bcqdhthr: getTabs completed 11ms
2018-02-09T22:43:20.495Z - info: node/services/browser-windows:: ipc cjdgiq5ns0051adu5lgeaoju6: jupyter completed 7ms
2018-02-09T22:43:20.502Z - info: node/services/browser-windows:: ipc cjdgiq5nt0052adu536n8kmv6: jupyter completed 13ms
2018-02-09T22:43:20.510Z - info: node/services/browser-windows:: ipc cjdgiq5nz0053adu541oepco5: jupyter completed 14ms
2018-02-09T22:43:20.518Z - info: node/services/browser-windows:: ipc cjdgiq5o10054adu59tgti0ti: jupyter completed 21ms
2018-02-09T22:43:23.014Z - info: node/services/browser-windows:: ipc cjdgiq7lo0058adu5e759llhw: jupyter completed 10ms
2018-02-09T22:43:23.020Z - info: node/services/browser-windows:: ipc cjdgiq7lp0059adu5xywbvwr9: jupyter completed 15ms
2018-02-09T22:43:23.030Z - info: node/services/browser-windows:: ipc cjdgiq7lv005aadu52x6pwq0p: jupyter completed 19ms
2018-02-09T22:43:23.040Z - info: node/services/browser-windows:: ipc cjdgiq7lw005badu5qqafrmn7: jupyter completed 27ms
2018-02-09T22:43:23.253Z - info: node/services/browser-windows:: ipc cjdgiq7sd005eadu5rsemfiaf: jupyter completed 7ms
2018-02-09T22:43:23.261Z - info: node/services/browser-windows:: ipc cjdgiq7se005fadu5e7s0iwl8: jupyter completed 15ms
2018-02-09T22:43:23.272Z - info: node/services/browser-windows:: ipc cjdgiq7sk005gadu5s9pojwc3: jupyter completed 20ms
2018-02-09T22:43:23.280Z - info: node/services/browser-windows:: ipc cjdgiq7sl005hadu5jzjfdr5k: jupyter completed 27ms
2018-02-09T22:43:23.715Z - info: node/services/browser-windows:: ipc cjdgiq855005kadu51gi751o9: jupyter completed 10ms
2018-02-09T22:43:23.723Z - info: node/services/browser-windows:: ipc cjdgiq856005ladu5gqvg6tv6: jupyter completed 16ms
2018-02-09T22:43:23.733Z - info: node/services/browser-windows:: ipc cjdgiq85d005madu5yegxp723: jupyter completed 20ms
2018-02-09T22:43:23.742Z - info: node/services/browser-windows:: ipc cjdgiq85e005nadu5qrmclylv: jupyter completed 28ms
2018-02-09T22:43:26.225Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiqa34005padu5lelue85f',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:43:48.718Z - info: node/services/browser-windows:: ipc cjdgiqrfp005qadu5xzunb202: getTabs completed 8ms
2018-02-09T22:43:48.782Z - info: node/services/browser-windows:: ipc cjdgiqrhh005sadu5jyj2tlhj: jupyter completed 9ms
2018-02-09T22:43:48.809Z - info: node/services/browser-windows:: ipc cjdgiqri7005tadu5h6hzvz7h: jupyter completed 10ms
2018-02-09T22:43:48.903Z - info: node/services/browser-windows:: ipc cjdgiqrku005uadu5j9a9o8tx: jupyter completed 9ms
2018-02-09T22:43:48.913Z - info: node/services/browser-windows:: ipc cjdgiqrkw005vadu5ku5dfqzw: jupyter completed 17ms
2018-02-09T22:43:50.884Z - info: node/services/browser-windows:: ipc cjdgiqt3v005zadu5y485htbj: jupyter completed 9ms
2018-02-09T22:43:50.893Z - info: node/services/browser-windows:: ipc cjdgiqt3w0060adu5inizom2f: jupyter completed 17ms
2018-02-09T22:43:50.907Z - info: node/services/browser-windows:: ipc cjdgiqt430061adu5kjqqndq6: jupyter completed 23ms
2018-02-09T22:43:50.914Z - info: node/services/browser-windows:: ipc cjdgiqt440062adu54zm74qnh: jupyter completed 30ms
2018-02-09T22:43:51.080Z - info: node/services/browser-windows:: ipc cjdgiqt9b0065adu535smu83b: jupyter completed 7ms
2018-02-09T22:43:51.087Z - info: node/services/browser-windows:: ipc cjdgiqt9d0066adu55fu046gk: jupyter completed 14ms
2018-02-09T22:43:51.099Z - info: node/services/browser-windows:: ipc cjdgiqt9j0067adu5qj2dbmc0: jupyter completed 20ms
2018-02-09T22:43:51.104Z - info: node/services/browser-windows:: ipc cjdgiqt9k0068adu54pbnx24s: jupyter completed 24ms
2018-02-09T22:43:51.298Z - info: node/services/browser-windows:: ipc cjdgiqtfe006badu58v9zhhox: jupyter completed 8ms
2018-02-09T22:43:51.304Z - info: node/services/browser-windows:: ipc cjdgiqtff006cadu50smvtcna: jupyter completed 13ms
2018-02-09T22:43:51.315Z - info: node/services/browser-windows:: ipc cjdgiqtfl006dadu59cqdgs7l: jupyter completed 18ms
2018-02-09T22:43:51.322Z - info: node/services/browser-windows:: ipc cjdgiqtfn006eadu5dhxpqre5: jupyter completed 23ms
2018-02-09T22:43:51.520Z - info: node/services/browser-windows:: ipc cjdgiqtlk006hadu5zvt2lb9g: jupyter completed 8ms
2018-02-09T22:43:51.532Z - info: node/services/browser-windows:: ipc cjdgiqtll006iadu53qi49yuv: jupyter completed 19ms
2018-02-09T22:43:51.542Z - info: node/services/browser-windows:: ipc cjdgiqtlr006jadu56sjvc37w: jupyter completed 23ms
2018-02-09T22:43:51.551Z - info: node/services/browser-windows:: ipc cjdgiqtlt006kadu55st87gzv: jupyter completed 30ms
2018-02-09T22:43:53.246Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiquxp006madu5xko56wql',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:44:32.984Z - info: node/services/browser-windows:: ipc cjdgirplf006oadu58xf1irks: getTabs completed 5ms
2018-02-09T22:44:33.024Z - info: node/services/browser-windows:: ipc cjdgirpmc006qadu55kt1s16n: jupyter completed 11ms
2018-02-09T22:44:33.034Z - info: node/services/browser-windows:: ipc cjdgirpmd006radu50joox5l2: jupyter completed 21ms
2018-02-09T22:44:33.046Z - info: node/services/browser-windows:: ipc cjdgirpmg006sadu502hocfem: jupyter completed 30ms
2018-02-09T22:44:33.052Z - info: node/services/browser-windows:: ipc cjdgirpmh006tadu54zkq5aqc: jupyter completed 35ms
2018-02-09T22:44:38.333Z - info: node/services/browser-windows:: ipc cjdgirtq1006wadu5sxuskvcl: getTabs completed 4ms
2018-02-09T22:44:38.365Z - info: node/services/browser-windows:: ipc cjdgirtqq006yadu5y2ayid0k: jupyter completed 11ms
2018-02-09T22:44:38.373Z - info: node/services/browser-windows:: ipc cjdgirtqr006zadu564bh4c2x: jupyter completed 18ms
2018-02-09T22:44:38.383Z - info: node/services/browser-windows:: ipc cjdgirtqv0070adu5yv6q0nwq: jupyter completed 24ms
2018-02-09T22:44:38.389Z - info: node/services/browser-windows:: ipc cjdgirtqx0071adu5g83kbn72: jupyter completed 27ms
2018-02-09T22:44:42.080Z - info: node/services/browser-windows:: ipc cjdgirwm00074adu5u0rkdzy9: getTabs completed 8ms
2018-02-09T22:44:42.114Z - info: node/services/browser-windows:: ipc cjdgirwmv0076adu51ysne63i: jupyter completed 11ms
2018-02-09T22:44:42.121Z - info: node/services/browser-windows:: ipc cjdgirwmy0077adu5jsnbckwn: jupyter completed 15ms
2018-02-09T22:44:42.125Z - info: node/services/browser-windows:: ipc cjdgirwmz0078adu5btlh423d: jupyter completed 18ms
2018-02-09T22:44:42.134Z - info: node/services/browser-windows:: ipc cjdgirwn10079adu5jurzb6y6: jupyter completed 25ms
2018-02-09T22:44:51.268Z - info: node/services/browser-windows:: ipc cjdgis3pc007dadu5wlxsnp1f: getTabs completed 4ms
2018-02-09T22:44:51.302Z - info: node/services/browser-windows:: ipc cjdgis3pz007fadu5k0cvy0j8: jupyter completed 15ms
2018-02-09T22:44:51.310Z - info: node/services/browser-windows:: ipc cjdgis3q4007gadu5yrztgtxm: jupyter completed 18ms
2018-02-09T22:44:51.322Z - info: node/services/browser-windows:: ipc cjdgis3q9007hadu5nvwp16dw: jupyter completed 25ms
2018-02-09T22:44:51.330Z - info: node/services/browser-windows:: ipc cjdgis3qa007iadu5nafmqdne: jupyter completed 32ms
2018-02-09T22:44:54.297Z - info: node/services/browser-windows:: ipc cjdgis61d007ladu5bi9ecp8y: getTabs completed 8ms
2018-02-09T22:44:54.327Z - info: node/services/browser-windows:: ipc cjdgis624007nadu5n1wr7rwk: jupyter completed 10ms
2018-02-09T22:44:54.332Z - info: node/services/browser-windows:: ipc cjdgis626007oadu59jjrnm96: jupyter completed 14ms
2018-02-09T22:44:54.342Z - info: node/services/browser-windows:: ipc cjdgis62c007padu58lvutzvi: jupyter completed 18ms
2018-02-09T22:44:54.352Z - info: node/services/browser-windows:: ipc cjdgis62d007qadu5oq6c9c88: jupyter completed 27ms
2018-02-09T22:44:55.967Z - info: node/services/browser-windows:: ipc cjdgis7br007tadu5ebicvxxu: getTabs completed 8ms
2018-02-09T22:44:55.997Z - info: node/services/browser-windows:: ipc cjdgis7ck007vadu568mre621: jupyter completed 9ms
2018-02-09T22:44:56.006Z - info: node/services/browser-windows:: ipc cjdgis7cl007wadu5qgofaavb: jupyter completed 17ms
2018-02-09T22:44:56.015Z - info: node/services/browser-windows:: ipc cjdgis7cr007xadu5uwe82fkv: jupyter completed 19ms
2018-02-09T22:44:56.024Z - info: node/services/browser-windows:: ipc cjdgis7cs007yadu5lfe8qu16: jupyter completed 28ms
2018-02-09T22:44:57.625Z - info: node/services/browser-windows:: ipc cjdgis8lu0081adu5cva4b7e1: getTabs completed 7ms
2018-02-09T22:44:57.655Z - info: node/services/browser-windows:: ipc cjdgis8mm0083adu5nux11mpq: jupyter completed 9ms
2018-02-09T22:44:57.659Z - info: node/services/browser-windows:: ipc cjdgis8mn0084adu5nufv9hnr: jupyter completed 12ms
2018-02-09T22:44:57.668Z - info: node/services/browser-windows:: ipc cjdgis8ms0085adu5omxl7x9s: jupyter completed 15ms
2018-02-09T22:44:57.678Z - info: node/services/browser-windows:: ipc cjdgis8mt0086adu5gri3x2a7: jupyter completed 24ms
2018-02-09T22:44:59.316Z - info: node/services/browser-windows:: ipc cjdgis9wt0089adu5rxb6l48q: getTabs completed 7ms
2018-02-09T22:44:59.346Z - info: node/services/browser-windows:: ipc cjdgis9xl008badu5aeliiihw: jupyter completed 9ms
2018-02-09T22:44:59.354Z - info: node/services/browser-windows:: ipc cjdgis9xm008cadu5i4ky3h8d: jupyter completed 15ms
2018-02-09T22:44:59.357Z - info: node/services/browser-windows:: ipc cjdgis9xq008dadu5qmfx3ks1: jupyter completed 15ms
2018-02-09T22:44:59.369Z - info: node/services/browser-windows:: ipc cjdgis9xr008eadu5afi42gyh: jupyter completed 26ms
2018-02-09T22:44:59.852Z - info: node/services/browser-windows:: ipc cjdgisabo008gadu5k9a1t97y: getTabs completed 8ms
2018-02-09T22:44:59.881Z - info: node/services/browser-windows:: ipc cjdgisaci008iadu51ia4ghix: jupyter completed 7ms
2018-02-09T22:44:59.885Z - info: node/services/browser-windows:: ipc cjdgisaci008jadu5vdof81cj: jupyter completed 11ms
2018-02-09T22:44:59.891Z - info: node/services/browser-windows:: ipc cjdgisack008kadu5yzcfcj4i: jupyter completed 15ms
2018-02-09T22:44:59.899Z - info: node/services/browser-windows:: ipc cjdgisacl008ladu5i1ved54g: jupyter completed 22ms
2018-02-09T22:45:01.507Z - info: node/services/browser-windows:: ipc cjdgisbll008padu5xtmqv6s2: getTabs completed 8ms
2018-02-09T22:45:01.536Z - info: node/services/browser-windows:: ipc cjdgisbmd008radu5xewa2ago: jupyter completed 11ms
2018-02-09T22:45:01.543Z - info: node/services/browser-windows:: ipc cjdgisbme008sadu5ro8bjlzv: jupyter completed 16ms
2018-02-09T22:45:01.549Z - info: node/services/browser-windows:: ipc cjdgisbmn008tadu5v26f7u3e: jupyter completed 14ms
2018-02-09T22:45:01.557Z - info: node/services/browser-windows:: ipc cjdgisbmn008uadu5irkdjcv3: jupyter completed 22ms
2018-02-09T22:45:02.367Z - info: node/services/browser-windows:: ipc cjdgisc9j008wadu587k1l4zm: getTabs completed 8ms
2018-02-09T22:45:02.398Z - info: node/services/browser-windows:: ipc cjdgiscad008yadu5c7rep48n: jupyter completed 9ms
2018-02-09T22:45:02.402Z - info: node/services/browser-windows:: ipc cjdgiscad008zadu544hfg0o7: jupyter completed 13ms
2018-02-09T22:45:02.408Z - info: node/services/browser-windows:: ipc cjdgiscag0090adu5o0ecm091: jupyter completed 16ms
2018-02-09T22:45:02.417Z - info: node/services/browser-windows:: ipc cjdgiscah0091adu592v23fkk: jupyter completed 24ms
2018-02-09T22:45:03.414Z - info: node/services/browser-windows:: ipc cjdgisd2o0094adu50xi9ulz0: getTabs completed 4ms
2018-02-09T22:45:03.451Z - info: node/services/browser-windows:: ipc cjdgisd3h0097adu5c662ku94: jupyter completed 14ms
2018-02-09T22:45:03.453Z - info: node/services/browser-windows:: ipc cjdgisd3i0098adu5854z3gtr: jupyter completed 14ms
2018-02-09T22:45:03.469Z - info: node/services/browser-windows:: ipc cjdgisd3q0099adu5al8ihvyy: jupyter completed 23ms
2018-02-09T22:45:03.484Z - info: node/services/browser-windows:: ipc cjdgisd4m009aadu5jrf46mg8: jupyter completed 6ms
2018-02-09T22:45:04.002Z - info: node/services/browser-windows:: ipc cjdgisdj0009cadu5j1ivs3cj: getTabs completed 5ms
2018-02-09T22:45:04.033Z - info: node/services/browser-windows:: ipc cjdgisdjq009eadu5r6rs9f4q: jupyter completed 11ms
2018-02-09T22:45:04.039Z - info: node/services/browser-windows:: ipc cjdgisdjs009fadu5lhpu1on6: jupyter completed 15ms
2018-02-09T22:45:04.046Z - info: node/services/browser-windows:: ipc cjdgisdjy009gadu51rmzp9p0: jupyter completed 15ms
2018-02-09T22:45:04.057Z - info: node/services/browser-windows:: ipc cjdgisdk0009hadu5vgwig2q2: jupyter completed 25ms
2018-02-09T22:45:09.852Z - info: node/services/browser-windows:: ipc cjdgisi1h009madu5340v0vhr: jupyter completed 6ms
2018-02-09T22:45:09.858Z - info: node/services/browser-windows:: ipc cjdgisi1i009nadu5cwbctsq5: jupyter completed 12ms
2018-02-09T22:45:09.867Z - info: node/services/browser-windows:: ipc cjdgisi1o009oadu5pvvtk4zg: jupyter completed 14ms
2018-02-09T22:45:09.875Z - info: node/services/browser-windows:: ipc cjdgisi1q009padu5tcuc779d: jupyter completed 21ms
2018-02-09T22:45:10.274Z - info: node/services/browser-windows:: ipc cjdgisid4009sadu5z9gxzyty: jupyter completed 10ms
2018-02-09T22:45:10.281Z - info: node/services/browser-windows:: ipc cjdgisid6009tadu5t0cc7x70: jupyter completed 15ms
2018-02-09T22:45:10.290Z - info: node/services/browser-windows:: ipc cjdgisidd009uadu5bl7l76dn: jupyter completed 17ms
2018-02-09T22:45:10.297Z - info: node/services/browser-windows:: ipc cjdgiside009vadu51kqky2r5: jupyter completed 22ms
2018-02-09T22:45:10.479Z - info: node/services/browser-windows:: ipc cjdgisiiu009yadu5u4crmxci: jupyter completed 9ms
2018-02-09T22:45:10.486Z - info: node/services/browser-windows:: ipc cjdgisiiv009zadu58bjsdwp3: jupyter completed 15ms
2018-02-09T22:45:10.500Z - info: node/services/browser-windows:: ipc cjdgisij200a0adu5j7ojluuh: jupyter completed 22ms
2018-02-09T22:45:10.502Z - info: node/services/browser-windows:: ipc cjdgisij400a1adu5crauk7ot: jupyter completed 22ms
2018-02-09T22:45:13.985Z - info: node/services/browser-windows:: ipc cjdgisl8700a4adu5yuuwkk54: getTabs completed 9ms
2018-02-09T22:45:14.017Z - info: node/services/browser-windows:: ipc cjdgisl9400a6adu5sqki56nv: jupyter completed 8ms
2018-02-09T22:45:14.024Z - info: node/services/browser-windows:: ipc cjdgisl9500a7adu522ajsejx: jupyter completed 14ms
2018-02-09T22:45:14.028Z - info: node/services/browser-windows:: ipc cjdgisl9900a8adu5xkmbwmvg: jupyter completed 15ms
2018-02-09T22:45:14.035Z - info: node/services/browser-windows:: ipc cjdgisl9a00a9adu5xokx9u3x: jupyter completed 21ms
2018-02-09T22:45:14.677Z - info: node/services/browser-windows:: ipc cjdgislrh00abadu5eh08kdqv: getTabs completed 8ms
2018-02-09T22:45:14.705Z - info: node/services/browser-windows:: ipc cjdgisls900adadu5ywiehjxr: jupyter completed 8ms
2018-02-09T22:45:14.710Z - info: node/services/browser-windows:: ipc cjdgisls900aeadu5cz0n33a4: jupyter completed 13ms
2018-02-09T22:45:14.716Z - info: node/services/browser-windows:: ipc cjdgislsd00afadu53rasr955: jupyter completed 15ms
2018-02-09T22:45:14.725Z - info: node/services/browser-windows:: ipc cjdgislse00agadu5rxdrj6fl: jupyter completed 23ms
2018-02-09T22:45:18.023Z - info: node/services/browser-windows:: ipc cjdgisocj00akadu554ireokh: getTabs completed 4ms
2018-02-09T22:45:18.051Z - info: node/services/browser-windows:: ipc cjdgisod500amadu5x2w7lych: jupyter completed 10ms
2018-02-09T22:45:18.055Z - info: node/services/browser-windows:: ipc cjdgisod700anadu5kqufiwrb: jupyter completed 12ms
2018-02-09T22:45:18.061Z - info: node/services/browser-windows:: ipc cjdgisodd00aoadu5mstvdt6r: jupyter completed 11ms
2018-02-09T22:45:18.073Z - info: node/services/browser-windows:: ipc cjdgisode00apadu5xz2dxgeu: jupyter completed 23ms
2018-02-09T22:45:19.120Z - info: node/services/browser-windows:: ipc cjdgisp6z00asadu5lzt04tgf: getTabs completed 5ms
2018-02-09T22:45:19.153Z - info: node/services/browser-windows:: ipc cjdgisp7o00auadu57ymku3jo: jupyter completed 13ms
2018-02-09T22:45:19.161Z - info: node/services/browser-windows:: ipc cjdgisp7s00avadu5s0hsreq0: jupyter completed 17ms
2018-02-09T22:45:19.323Z - info: node/services/browser-windows:: ipc cjdgispck00awadu5jd3ik1lz: jupyter completed 6ms
2018-02-09T22:45:19.327Z - info: node/services/browser-windows:: ipc cjdgispck00axadu5kdfbgxpk: jupyter completed 11ms
2018-02-09T22:45:23.165Z - info: node/services/browser-windows:: ipc cjdgissb800b0adu5lc1izrf5: getTabs completed 9ms
2018-02-09T22:45:23.196Z - info: node/services/browser-windows:: ipc cjdgissc400b2adu5fqtpzlc4: jupyter completed 8ms
2018-02-09T22:45:23.205Z - info: node/services/browser-windows:: ipc cjdgissc400b3adu5o1vn37cf: jupyter completed 17ms
2018-02-09T22:45:23.216Z - info: node/services/browser-windows:: ipc cjdgissc800b4adu5wrxi8ap0: jupyter completed 24ms
2018-02-09T22:45:23.221Z - info: node/services/browser-windows:: ipc cjdgissc900b5adu5tqjcdg0z: jupyter completed 28ms
2018-02-09T22:45:24.822Z - info: node/services/browser-windows:: ipc cjdgistle00b8adu5q3ntnzvo: getTabs completed 4ms
2018-02-09T22:45:24.864Z - info: node/services/browser-windows:: ipc cjdgistm600baadu5rrda3qnf: jupyter completed 17ms
2018-02-09T22:45:24.868Z - info: node/services/browser-windows:: ipc cjdgistm700bbadu5uegler9o: jupyter completed 21ms
2018-02-09T22:45:24.874Z - info: node/services/browser-windows:: ipc cjdgistmg00bcadu5ax5wfcs0: jupyter completed 18ms
2018-02-09T22:45:24.883Z - info: node/services/browser-windows:: ipc cjdgistmh00bdadu5z0s42w20: jupyter completed 25ms
2018-02-09T22:45:26.109Z - info: node/services/browser-windows:: ipc cjdgisul500bgadu5oi1up5zc: getTabs completed 4ms
2018-02-09T22:45:26.143Z - info: node/services/browser-windows:: ipc cjdgisulu00biadu5tpqfzj5k: jupyter completed 13ms
2018-02-09T22:45:26.150Z - info: node/services/browser-windows:: ipc cjdgisulx00bjadu5zymwzht9: jupyter completed 16ms
2018-02-09T22:45:26.154Z - info: node/services/browser-windows:: ipc cjdgisum300bkadu5xul7gusv: jupyter completed 15ms
2018-02-09T22:45:26.161Z - info: node/services/browser-windows:: ipc cjdgisum500bladu5pw15zaqk: jupyter completed 20ms
2018-02-09T22:45:28.714Z - info: node/services/browser-windows:: ipc cjdgiswle00boadu5d8xbnq5m: getTabs completed 8ms
2018-02-09T22:45:28.747Z - info: node/services/browser-windows:: ipc cjdgiswm600bqadu5x89f6s6c: jupyter completed 13ms
2018-02-09T22:45:28.752Z - info: node/services/browser-windows:: ipc cjdgiswm900bradu5yah9ti2n: jupyter completed 15ms
2018-02-09T22:45:28.756Z - info: node/services/browser-windows:: ipc cjdgiswmf00bsadu50s3wy577: jupyter completed 13ms
2018-02-09T22:45:28.768Z - info: node/services/browser-windows:: ipc cjdgiswmg00btadu5cyot6oh3: jupyter completed 24ms
2018-02-09T22:45:32.080Z - info: node/services/browser-windows:: ipc cjdgisz6w00bwadu5b4vo3o9d: getTabs completed 8ms
2018-02-09T22:45:32.113Z - info: node/services/browser-windows:: ipc cjdgisz7q00byadu570o0f4m2: jupyter completed 11ms
2018-02-09T22:45:32.120Z - info: node/services/browser-windows:: ipc cjdgisz7r00bzadu5ychwiqi3: jupyter completed 16ms
2018-02-09T22:45:32.126Z - info: node/services/browser-windows:: ipc cjdgisz7x00c0adu5dx9ye3a9: jupyter completed 15ms
2018-02-09T22:45:32.136Z - info: node/services/browser-windows:: ipc cjdgisz8000c1adu57be16mg7: jupyter completed 24ms
2018-02-09T22:45:35.810Z - info: node/services/browser-windows:: ipc cjdgit22h00c4adu5kafirg3q: getTabs completed 9ms
2018-02-09T22:45:35.844Z - info: node/services/browser-windows:: ipc cjdgit23d00c6adu57s8u0ddi: jupyter completed 11ms
2018-02-09T22:45:35.851Z - info: node/services/browser-windows:: ipc cjdgit23e00c7adu5utz2c8iz: jupyter completed 17ms
2018-02-09T22:45:35.998Z - info: node/services/browser-windows:: ipc cjdgit27g00c8adu57cjanfd6: jupyter completed 17ms
2018-02-09T22:45:36.014Z - info: node/services/browser-windows:: ipc cjdgit27h00c9adu5lfpru5j0: jupyter completed 33ms
2018-02-09T22:45:36.023Z - info: node/services/browser-windows:: ipc cjdgit27i00caadu50y5zblvu: jupyter completed 41ms
2018-02-09T22:46:20.167Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiu0as00ccadu5vzfa5ptg',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:46:32.301Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiu9nv00cdadu5801svit5',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:47:11.705Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiv42g00ceadu5l75j1w24',
  '2': { type: 'ADD_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:47:41.818Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgivraw00cfadu5rwpnnoob',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:48:15.330Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiwh5p00cgadu50ptvmvbm',
  '2': { type: 'ADD_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:48:22.938Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiwn1500chadu52tgjhln3',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:48:28.074Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgiwqzt00ciadu55sd0usff',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:49:04.692Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgixj8z00cmadu57l6y7uri',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:49:06.527Z - info: node/services/browser-windows:: ipc cjdgixkns00cnadu599q94anz: getTabs completed 7ms
2018-02-09T22:49:06.595Z - info: node/services/browser-windows:: ipc cjdgixkpj00cpadu5a9hf39xz: jupyter completed 11ms
2018-02-09T22:49:06.612Z - info: node/services/browser-windows:: ipc cjdgixkq200cqadu5y27gizx5: jupyter completed 10ms
2018-02-09T22:49:06.623Z - info: node/services/browser-windows:: ipc cjdgixkq900cradu58v8bc77i: jupyter completed 14ms
2018-02-09T22:49:06.629Z - info: node/services/browser-windows:: ipc cjdgixkqa00csadu5r6mm8pdd: jupyter completed 19ms
2018-02-09T22:49:09.692Z - info: node/services/browser-windows:: ipc cjdgixn3j00cwadu5g0lt0tq5: jupyter completed 13ms
2018-02-09T22:49:09.703Z - info: node/services/browser-windows:: ipc cjdgixn3k00cxadu5un9r6cwv: jupyter completed 23ms
2018-02-09T22:49:09.715Z - info: node/services/browser-windows:: ipc cjdgixn3q00cyadu5lsjoeh38: jupyter completed 28ms
2018-02-09T22:49:09.725Z - info: node/services/browser-windows:: ipc cjdgixn3r00czadu5sa9rqsam: jupyter completed 38ms
2018-02-09T22:49:10.099Z - info: node/services/browser-windows:: ipc cjdgixnex00d2adu50zzgyetr: jupyter completed 10ms
2018-02-09T22:49:10.107Z - info: node/services/browser-windows:: ipc cjdgixney00d3adu5kgbae1wr: jupyter completed 17ms
2018-02-09T22:49:10.115Z - info: node/services/browser-windows:: ipc cjdgixnf500d4adu5j1by6hpj: jupyter completed 17ms
2018-02-09T22:49:10.126Z - info: node/services/browser-windows:: ipc cjdgixnf600d5adu5hclqpjxr: jupyter completed 28ms
2018-02-09T22:49:15.428Z - info: node/services/browser-windows:: ipc cjdgixrix00d8adu5tblt5d6x: getTabs completed 11ms
2018-02-09T22:49:15.465Z - info: node/services/browser-windows:: ipc cjdgixrjx00daadu5atfmpz1z: jupyter completed 12ms
2018-02-09T22:49:15.474Z - info: node/services/browser-windows:: ipc cjdgixrjy00dbadu5i86hoe5x: jupyter completed 20ms
2018-02-09T22:49:15.630Z - info: node/services/browser-windows:: ipc cjdgixro400dcadu5lhzl1zsb: jupyter completed 26ms
2018-02-09T22:49:15.638Z - info: node/services/browser-windows:: ipc cjdgixrob00ddadu598vseth8: jupyter completed 27ms
2018-02-09T22:49:15.641Z - info: node/services/browser-windows:: ipc cjdgixroc00deadu5hbq9yii6: jupyter completed 28ms
2018-02-09T22:50:29.803Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgizcx100dgadu5ydaczowv',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:50:40.642Z - info: node/services/browser-windows:: ipc cjdgizla100dhadu5bsolknig: getTabs completed 9ms
2018-02-09T22:50:40.735Z - info: node/services/browser-windows:: ipc cjdgizlcf00djadu50eswueov: jupyter completed 16ms
2018-02-09T22:50:40.740Z - info: node/services/browser-windows:: ipc cjdgizlcg00dkadu579so89y8: jupyter completed 20ms
2018-02-09T22:50:40.750Z - info: node/services/browser-windows:: ipc cjdgizlcj00dladu56b0kv90e: jupyter completed 26ms
2018-02-09T22:50:40.756Z - info: node/services/browser-windows:: ipc cjdgizlcn00dmadu5uwi077q6: jupyter completed 29ms
2018-02-09T22:50:43.083Z - info: node/services/browser-windows:: ipc cjdgizn5s00dqadu53m8qyrjo: jupyter completed 11ms
2018-02-09T22:50:43.092Z - info: node/services/browser-windows:: ipc cjdgizn5t00dradu5psnxiknf: jupyter completed 19ms
2018-02-09T22:50:43.107Z - info: node/services/browser-windows:: ipc cjdgizn5z00dsadu5qpwc27r9: jupyter completed 27ms
2018-02-09T22:50:43.116Z - info: node/services/browser-windows:: ipc cjdgizn6000dtadu5ydumpv17: jupyter completed 35ms
2018-02-09T22:50:43.449Z - info: node/services/browser-windows:: ipc cjdgiznfv00dwadu5rad4gxpb: jupyter completed 14ms
2018-02-09T22:50:43.459Z - info: node/services/browser-windows:: ipc cjdgiznfw00dxadu5rjm4egjm: jupyter completed 23ms
2018-02-09T22:50:43.467Z - info: node/services/browser-windows:: ipc cjdgizng200dyadu5gf62q65x: jupyter completed 25ms
2018-02-09T22:50:43.476Z - info: node/services/browser-windows:: ipc cjdgizng300dzadu5xokir02l: jupyter completed 32ms
2018-02-09T22:50:47.854Z - info: node/services/browser-windows:: ipc cjdgizquf00e2adu5l3mn3kwy: getTabs completed 7ms
2018-02-09T22:50:47.890Z - info: node/services/browser-windows:: ipc cjdgizqva00e4adu53posjfgo: jupyter completed 12ms
2018-02-09T22:50:47.896Z - info: node/services/browser-windows:: ipc cjdgizqvb00e5adu5xsk3exrh: jupyter completed 17ms
2018-02-09T22:50:48.048Z - info: node/services/browser-windows:: ipc cjdgizqze00e6adu5ca80znny: jupyter completed 21ms
2018-02-09T22:50:48.049Z - info: node/services/browser-windows:: ipc cjdgizqzk00e7adu52nctlbb1: jupyter completed 17ms
2018-02-09T22:50:48.056Z - info: node/services/browser-windows:: ipc cjdgizqzk00e8adu5uejuu4hn: jupyter completed 23ms
2018-02-09T22:52:10.380Z - info: node/services/browser-windows:: ipc cjdgj1iio00ecadu562u9z2n7: jupyter completed 10ms
2018-02-09T22:52:10.384Z - info: node/services/browser-windows:: ipc cjdgj1iiq00edadu536zj71ef: jupyter completed 13ms
2018-02-09T22:52:10.396Z - info: node/services/browser-windows:: ipc cjdgj1iir00eeadu5jai0queo: jupyter completed 24ms
2018-02-09T22:52:10.400Z - info: node/services/browser-windows:: ipc cjdgj1iis00efadu54nh91wc2: jupyter completed 27ms
2018-02-09T22:52:17.253Z - info: node/services/browser-windows:: ipc cjdgj1nti00ejadu53kb76uwh: jupyter completed 13ms
2018-02-09T22:52:17.257Z - info: node/services/browser-windows:: ipc cjdgj1ntj00ekadu57ku1poxu: jupyter completed 18ms
2018-02-09T22:52:17.269Z - info: node/services/browser-windows:: ipc cjdgj1ntn00eladu5pbdsjgf2: jupyter completed 26ms
2018-02-09T22:52:17.281Z - info: node/services/browser-windows:: ipc cjdgj1ntt00emadu5sj5a5lem: jupyter completed 32ms
2018-02-09T22:52:17.290Z - info: node/services/browser-windows:: ipc cjdgj1ntu00enadu5i6g31e02: jupyter completed 40ms
2018-02-09T22:52:25.917Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj1uih00epadu5lt2r327v',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:52:36.138Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj22eh00eqadu5bo257lk9',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:52:37.699Z - info: node/services/browser-windows:: ipc cjdgj23lk00eradu5hmkqgcp6: getTabs completed 11ms
2018-02-09T22:52:37.765Z - info: node/services/browser-windows:: ipc cjdgj23nf00etadu5dka25fqb: jupyter completed 9ms
2018-02-09T22:52:37.779Z - info: node/services/browser-windows:: ipc cjdgj23nw00euadu5xa2czltz: jupyter completed 7ms
2018-02-09T22:52:37.794Z - info: node/services/browser-windows:: ipc cjdgj23o700evadu5tegwf5mr: jupyter completed 11ms
2018-02-09T22:52:37.807Z - info: node/services/browser-windows:: ipc cjdgj23o800ewadu5y5ym58wq: jupyter completed 22ms
2018-02-09T22:52:41.658Z - info: node/services/browser-windows:: ipc cjdgj26nm00ezadu5lnkeokqi: getTabs completed 8ms
2018-02-09T22:52:41.696Z - info: node/services/browser-windows:: ipc cjdgj26of00f1adu5jlrexqkq: jupyter completed 17ms
2018-02-09T22:52:41.703Z - info: node/services/browser-windows:: ipc cjdgj26oh00f2adu5chrdw9fd: jupyter completed 22ms
2018-02-09T22:52:41.849Z - info: node/services/browser-windows:: ipc cjdgj26sj00f3adu576ax80qc: jupyter completed 22ms
2018-02-09T22:52:41.858Z - info: node/services/browser-windows:: ipc cjdgj26sp00f4adu5a74pubp3: jupyter completed 24ms
2018-02-09T22:52:41.859Z - info: node/services/browser-windows:: ipc cjdgj26sr00f5adu5acd8uvhe: jupyter completed 24ms
2018-02-09T22:53:22.887Z - info: node/services/browser-windows:: ipc cjdgj32gr00fcadu5k9qww4c9: jupyter completed 12ms
2018-02-09T22:53:22.893Z - info: node/services/browser-windows:: ipc cjdgj32gs00fdadu5cgy1cqam: jupyter completed 17ms
2018-02-09T22:53:22.914Z - info: node/services/browser-windows:: ipc cjdgj32h700feadu5j8szrczi: jupyter completed 23ms
2018-02-09T22:53:22.916Z - info: node/services/browser-windows:: ipc cjdgj32hf00ffadu5oh8zyc3u: jupyter completed 17ms
2018-02-09T22:53:22.927Z - info: node/services/browser-windows:: ipc cjdgj32hg00fgadu5vb7kqrd4: jupyter completed 27ms
2018-02-09T22:53:43.563Z - info: node/services/browser-windows:: ipc cjdgj3if700fiadu5vmr3fynz: getTabs completed 8ms
2018-02-09T22:53:43.630Z - info: node/services/browser-windows:: ipc cjdgj3igy00fkadu5jh8utou9: jupyter completed 12ms
2018-02-09T22:53:43.653Z - info: node/services/browser-windows:: ipc cjdgj3ihq00fladu5lkmyipx9: jupyter completed 7ms
2018-02-09T22:53:43.662Z - info: node/services/browser-windows:: ipc cjdgj3ihv00fmadu501q1c7hk: jupyter completed 10ms
2018-02-09T22:53:43.673Z - info: node/services/browser-windows:: ipc cjdgj3ihw00fnadu5hu77889d: jupyter completed 21ms
2018-02-09T22:53:46.398Z - info: node/services/browser-windows:: ipc cjdgj3klw00fqadu5q5hf1bu5: getTabs completed 9ms
2018-02-09T22:53:46.441Z - info: node/services/browser-windows:: ipc cjdgj3kmv00fsadu5hshycl8k: jupyter completed 17ms
2018-02-09T22:53:46.449Z - info: node/services/browser-windows:: ipc cjdgj3kmz00ftadu5queoa1yk: jupyter completed 21ms
2018-02-09T22:53:46.607Z - info: node/services/browser-windows:: ipc cjdgj3krk00fuadu5c3cfyhbj: jupyter completed 15ms
2018-02-09T22:53:46.625Z - info: node/services/browser-windows:: ipc cjdgj3krl00fvadu52mcqk5pi: jupyter completed 32ms
2018-02-09T22:53:46.633Z - info: node/services/browser-windows:: ipc cjdgj3krm00fwadu5fijxpbi1: jupyter completed 39ms
2018-02-09T22:55:01.051Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj567q00fyadu58gxpczgb',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:55:06.190Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj5a6m00fzadu5t90cnkdv',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:55:10.142Z - info: node/services/browser-windows:: ipc cjdgj5d8400g0adu5y7jkvbye: getTabs completed 10ms
2018-02-09T22:55:10.227Z - info: node/services/browser-windows:: ipc cjdgj5dah00g2adu5we5vetg8: jupyter completed 10ms
2018-02-09T22:55:10.234Z - info: node/services/browser-windows:: ipc cjdgj5daj00g3adu5o8taloao: jupyter completed 15ms
2018-02-09T22:55:10.242Z - info: node/services/browser-windows:: ipc cjdgj5dao00g4adu5o6lhjxk7: jupyter completed 18ms
2018-02-09T22:55:10.253Z - info: node/services/browser-windows:: ipc cjdgj5dap00g5adu55fyhmjt7: jupyter completed 28ms
2018-02-09T22:55:16.583Z - info: node/services/browser-windows:: ipc cjdgj5i7200g8adu58r8cyl9l: getTabs completed 9ms
2018-02-09T22:55:16.626Z - info: node/services/browser-windows:: ipc cjdgj5i8100gaadu53aj6vofx: jupyter completed 17ms
2018-02-09T22:55:16.629Z - info: node/services/browser-windows:: ipc cjdgj5i8200gbadu5aq0tbwds: jupyter completed 19ms
2018-02-09T22:55:16.804Z - info: node/services/browser-windows:: ipc cjdgj5icm00gcadu53by6j71m: jupyter completed 30ms
2018-02-09T22:55:16.806Z - info: node/services/browser-windows:: ipc cjdgj5icv00gdadu5kcnlnrsa: jupyter completed 23ms
2018-02-09T22:55:16.813Z - info: node/services/browser-windows:: ipc cjdgj5icw00geadu56i7qqdwk: jupyter completed 29ms
2018-02-09T22:55:25.207Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj5ouu00ggadu58d44elnw',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:56:25.737Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj6zk400ghadu5pdxm03ol',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:57:09.890Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj7xmp00giadu5cocrwp96',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:57:12.183Z - info: node/services/browser-windows:: ipc cjdgj7ze400gjadu5tv548h1z: getTabs completed 11ms
2018-02-09T22:57:12.254Z - info: node/services/browser-windows:: ipc cjdgj7zg300gladu5aa8fp7st: jupyter completed 11ms
2018-02-09T22:57:12.262Z - info: node/services/browser-windows:: ipc cjdgj7zg900gmadu58cez46q4: jupyter completed 13ms
2018-02-09T22:57:12.357Z - info: node/services/browser-windows:: ipc cjdgj7zj000gnadu5ei97f29o: jupyter completed 9ms
2018-02-09T22:57:12.362Z - info: node/services/browser-windows:: ipc cjdgj7zj000goadu5z7c1l2f6: jupyter completed 14ms
2018-02-09T22:57:29.816Z - info: node/services/browser-windows:: ipc cjdgj8czy00gqadu545s3fkgm: getTabs completed 9ms
2018-02-09T22:57:29.862Z - info: node/services/browser-windows:: ipc cjdgj8d0y00gsadu56q323e0i: jupyter completed 20ms
2018-02-09T22:57:29.868Z - info: node/services/browser-windows:: ipc cjdgj8d0z00gtadu502x9rzg3: jupyter completed 25ms
2018-02-09T22:57:30.043Z - info: node/services/browser-windows:: ipc cjdgj8d5m00guadu5r2z46hwi: jupyter completed 33ms
2018-02-09T22:57:30.052Z - info: node/services/browser-windows:: ipc cjdgj8d5o00gvadu5xgo3t6yu: jupyter completed 40ms
2018-02-09T22:57:30.054Z - info: node/services/browser-windows:: ipc cjdgj8d5q00gwadu5hg452qrh: jupyter completed 40ms
2018-02-09T22:57:50.502Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj8syq00gyadu5w9kxzwz3',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:58:02.796Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj92gb00gzadu53td1gkia',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:58:26.839Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj9l0700h0adu5alvt2lle',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:58:44.438Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgj9yl100h1adu5n6ax8ukn',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:59:08.917Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjahh100h2adu5qradwoe7',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T22:59:32.910Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjazzh00h3adu5ey6amea4',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T22:59:44.474Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjb8wp00h4adu5rh63m47y',
  '2': { type: 'ADD_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:00:04.924Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjboor00h5adu5zsvirek7',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:01:00.832Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjcvtm00h6adu5sge26s3e',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:01:09.032Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjd25j00h7adu5h2k6b1tn',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:01:40.939Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjdqru00h8adu5kjkc9i1p',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:01:42.688Z - info: node/services/browser-windows:: ipc cjdgjds4100h9adu5rauh87ej: getTabs completed 14ms
2018-02-09T23:01:42.755Z - info: node/services/browser-windows:: ipc cjdgjds5x00hbadu5py1qwemb: jupyter completed 14ms
2018-02-09T23:01:42.768Z - info: node/services/browser-windows:: ipc cjdgjds6800hcadu5h930h18z: jupyter completed 16ms
2018-02-09T23:01:42.772Z - info: node/services/browser-windows:: ipc cjdgjds6e00hdadu5mwbsv80k: jupyter completed 14ms
2018-02-09T23:01:42.783Z - info: node/services/browser-windows:: ipc cjdgjds6e00headu5r2ngh0g4: jupyter completed 24ms
2018-02-09T23:01:47.496Z - info: node/services/browser-windows:: ipc cjdgjdvtp00hhadu5ixg9g6pd: getTabs completed 10ms
2018-02-09T23:01:47.545Z - info: node/services/browser-windows:: ipc cjdgjdvuy00hjadu5q4intj99: jupyter completed 15ms
2018-02-09T23:01:47.552Z - info: node/services/browser-windows:: ipc cjdgjdvuz00hkadu5wpnbth9h: jupyter completed 21ms
2018-02-09T23:01:47.703Z - info: node/services/browser-windows:: ipc cjdgjdvz100hladu53iwy4ar2: jupyter completed 26ms
2018-02-09T23:01:47.705Z - info: node/services/browser-windows:: ipc cjdgjdvzb00hmadu5u8kae1a6: jupyter completed 18ms
2018-02-09T23:01:47.718Z - info: node/services/browser-windows:: ipc cjdgjdvzb00hnadu50gqz6hl3: jupyter completed 31ms
2018-02-09T23:02:55.044Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:04:54.568Z - info: node/services/browser-windows:: ipc cjdgjhw6100i3adu5zif4ab5q: jupyter completed 12ms
2018-02-09T23:04:54.577Z - info: node/services/browser-windows:: ipc cjdgjhw6300i4adu5xo6iptzl: jupyter completed 21ms
2018-02-09T23:04:54.582Z - info: node/services/browser-windows:: ipc cjdgjhw6600i5adu5vyqlkkm5: jupyter completed 24ms
2018-02-09T23:04:54.594Z - info: node/services/browser-windows:: ipc cjdgjhw6700i6adu5pqao6yt5: jupyter completed 35ms
2018-02-09T23:04:54.714Z - info: node/services/browser-windows:: ipc cjdgjhwa600i9adu5ybjea7dt: jupyter completed 12ms
2018-02-09T23:04:54.724Z - info: node/services/browser-windows:: ipc cjdgjhwa700iaadu5w47lw6e4: jupyter completed 20ms
2018-02-09T23:04:54.735Z - info: node/services/browser-windows:: ipc cjdgjhwad00ibadu5ovvaf39x: jupyter completed 26ms
2018-02-09T23:04:54.747Z - info: node/services/browser-windows:: ipc cjdgjhwae00icadu5tcaxic4v: jupyter completed 37ms
2018-02-09T23:04:57.617Z - info: node/services/browser-windows:: ipc cjdgjhyiv00igadu5bn1j4wea: jupyter completed 10ms
2018-02-09T23:04:57.624Z - info: node/services/browser-windows:: ipc cjdgjhyiw00ihadu50jbo5jlh: jupyter completed 16ms
2018-02-09T23:04:57.640Z - info: node/services/browser-windows:: ipc cjdgjhyjb00iiadu5yfg42rg4: jupyter completed 17ms
2018-02-09T23:04:57.642Z - info: node/services/browser-windows:: ipc cjdgjhyjh00ijadu5o89bxb3g: jupyter completed 13ms
2018-02-09T23:04:57.653Z - info: node/services/browser-windows:: ipc cjdgjhyji00ikadu57s1hn6wy: jupyter completed 23ms
2018-02-09T23:05:00.479Z - info: node/services/browser-windows:: ipc cjdgji0qa00ioadu5z7dssaxl: jupyter completed 13ms
2018-02-09T23:05:00.484Z - info: node/services/browser-windows:: ipc cjdgji0qc00ipadu5fyban6ed: jupyter completed 16ms
2018-02-09T23:05:00.492Z - info: node/services/browser-windows:: ipc cjdgji0qd00iqadu52ie06sox: jupyter completed 23ms
2018-02-09T23:05:00.504Z - info: node/services/browser-windows:: ipc cjdgji0qk00iradu5ll0g7kis: jupyter completed 28ms
2018-02-09T23:05:00.514Z - info: node/services/browser-windows:: ipc cjdgji0ql00isadu5xroex3pc: jupyter completed 37ms
2018-02-09T23:05:10.718Z - info: node/services/browser-windows:: ipc cjdgji8mo00iwadu58xpuml63: jupyter completed 14ms
2018-02-09T23:05:10.724Z - info: node/services/browser-windows:: ipc cjdgji8mp00ixadu587nsdfvf: jupyter completed 19ms
2018-02-09T23:05:10.734Z - info: node/services/browser-windows:: ipc cjdgji8mr00iyadu5299h944l: jupyter completed 27ms
2018-02-09T23:05:10.740Z - info: node/services/browser-windows:: ipc cjdgji8my00izadu54vcrr9k4: jupyter completed 26ms
2018-02-09T23:05:10.752Z - info: node/services/browser-windows:: ipc cjdgji8mz00j0adu52nwib0jj: jupyter completed 37ms
2018-02-09T23:05:39.285Z - info: node/services/browser-windows:: ipc cjdgjiuo200j4adu5b8yu2hvm: jupyter completed 16ms
2018-02-09T23:05:39.289Z - info: node/services/browser-windows:: ipc cjdgjiuo500j5adu5boxkd2rh: jupyter completed 19ms
2018-02-09T23:05:39.293Z - info: node/services/browser-windows:: ipc cjdgjiuoa00j6adu5o129r07o: jupyter completed 19ms
2018-02-09T23:05:39.304Z - info: node/services/browser-windows:: ipc cjdgjiuob00j7adu50izzfa0f: jupyter completed 28ms
2018-02-09T23:05:44.843Z - info: node/services/browser-windows:: ipc cjdgjiyyp00jbadu55r04liwh: jupyter completed 10ms
2018-02-09T23:05:44.848Z - info: node/services/browser-windows:: ipc cjdgjiyyp00jcadu5gnlk2h1o: jupyter completed 15ms
2018-02-09T23:05:44.859Z - info: node/services/browser-windows:: ipc cjdgjiyyu00jdadu5125kskee: jupyter completed 21ms
2018-02-09T23:05:44.871Z - info: node/services/browser-windows:: ipc cjdgjiyyv00jeadu5ee1qh9uu: jupyter completed 32ms
2018-02-09T23:05:51.186Z - info: node/services/browser-windows:: ipc cjdgjj3ut00jiadu5qeia8i94: jupyter completed 13ms
2018-02-09T23:05:51.191Z - info: node/services/browser-windows:: ipc cjdgjj3uu00jjadu5tdwpaokc: jupyter completed 17ms
2018-02-09T23:05:51.203Z - info: node/services/browser-windows:: ipc cjdgjj3uz00jkadu5yz4ht0za: jupyter completed 24ms
2018-02-09T23:05:51.211Z - info: node/services/browser-windows:: ipc cjdgjj3v300jladu5q0m23hyf: jupyter completed 27ms
2018-02-09T23:05:51.221Z - info: node/services/browser-windows:: ipc cjdgjj3v400jmadu5nlyyy42o: jupyter completed 37ms
2018-02-09T23:06:10.649Z - info: node/services/browser-windows:: ipc cjdgjjivg00jqadu5j56qodqf: jupyter completed 13ms
2018-02-09T23:06:10.656Z - info: node/services/browser-windows:: ipc cjdgjjivh00jradu57owo877w: jupyter completed 18ms
2018-02-09T23:06:10.677Z - info: node/services/browser-windows:: ipc cjdgjjivw00jsadu5a4lfc6rz: jupyter completed 25ms
2018-02-09T23:06:10.679Z - info: node/services/browser-windows:: ipc cjdgjjiw600jtadu5tjjm0lok: jupyter completed 15ms
2018-02-09T23:06:10.688Z - info: node/services/browser-windows:: ipc cjdgjjiw800juadu5ddhklxqo: jupyter completed 24ms
2018-02-09T23:06:23.344Z - info: node/services/browser-windows:: ipc cjdgjjso400jyadu5q9rsqinj: jupyter completed 12ms
2018-02-09T23:06:23.350Z - info: node/services/browser-windows:: ipc cjdgjjso500jzadu5cz5dcqgf: jupyter completed 17ms
2018-02-09T23:06:23.361Z - info: node/services/browser-windows:: ipc cjdgjjso800k0adu5pf44lcll: jupyter completed 25ms
2018-02-09T23:06:23.374Z - info: node/services/browser-windows:: ipc cjdgjjsof00k1adu5lst0t350: jupyter completed 31ms
2018-02-09T23:06:23.389Z - info: node/services/browser-windows:: ipc cjdgjjsog00k2adu5xdx85r74: jupyter completed 44ms
2018-02-09T23:07:23.556Z - info: node/services/browser-windows:: ipc cjdgjl34i00khadu5bltrqj2c: jupyter completed 16ms
2018-02-09T23:07:23.558Z - info: node/services/browser-windows:: ipc cjdgjl34k00kiadu5sxduuc8u: jupyter completed 18ms
2018-02-09T23:07:23.571Z - info: node/services/browser-windows:: ipc cjdgjl34l00kjadu50opxume0: jupyter completed 30ms
2018-02-09T23:07:23.574Z - info: node/services/browser-windows:: ipc cjdgjl34p00kkadu508qj0hxj: jupyter completed 28ms
2018-02-09T23:07:23.585Z - info: node/services/browser-windows:: ipc cjdgjl34q00kladu58zmhsn6k: jupyter completed 38ms
2018-02-09T23:07:25.982Z - info: node/services/browser-windows:: ipc cjdgjl50400kpadu5g6jnxzzm: jupyter completed 10ms
2018-02-09T23:07:25.986Z - info: node/services/browser-windows:: ipc cjdgjl50500kqadu56z7u4gmu: jupyter completed 13ms
2018-02-09T23:07:25.996Z - info: node/services/browser-windows:: ipc cjdgjl50900kradu5guhm4yo7: jupyter completed 19ms
2018-02-09T23:07:26.007Z - info: node/services/browser-windows:: ipc cjdgjl50a00ksadu5003kgryk: jupyter completed 28ms
2018-02-09T23:07:29.383Z - info: node/services/browser-windows:: ipc cjdgjl7ml00kwadu54aluj6yw: jupyter completed 10ms
2018-02-09T23:07:29.389Z - info: node/services/browser-windows:: ipc cjdgjl7mm00kxadu5p5k8yr36: jupyter completed 15ms
2018-02-09T23:07:29.398Z - info: node/services/browser-windows:: ipc cjdgjl7mn00kyadu5a23qmamo: jupyter completed 23ms
2018-02-09T23:07:29.405Z - info: node/services/browser-windows:: ipc cjdgjl7mt00kzadu508jt91c5: jupyter completed 24ms
2018-02-09T23:07:29.415Z - info: node/services/browser-windows:: ipc cjdgjl7mu00l0adu59bfjekpv: jupyter completed 33ms
2018-02-09T23:07:39.196Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjlf7c00l2adu5f57lxmhd',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:07:41.104Z - info: node/services/browser-windows:: ipc cjdgjlgo500l3adu5tggqys46: getTabs completed 11ms
2018-02-09T23:07:41.176Z - info: node/services/browser-windows:: ipc cjdgjlgq700l5adu5dpyb6xh9: jupyter completed 9ms
2018-02-09T23:07:41.208Z - info: node/services/browser-windows:: ipc cjdgjlgr200l6adu52p3t5m13: jupyter completed 10ms
2018-02-09T23:07:41.215Z - info: node/services/browser-windows:: ipc cjdgjlgr800l7adu5588s2803: jupyter completed 10ms
2018-02-09T23:07:41.224Z - info: node/services/browser-windows:: ipc cjdgjlgr900l8adu5ttr7yl3f: jupyter completed 19ms
2018-02-09T23:07:45.498Z - info: node/services/browser-windows:: ipc cjdgjlk2800lbadu5zi74vkfu: getTabs completed 10ms
2018-02-09T23:07:45.551Z - info: node/services/browser-windows:: ipc cjdgjlk3i00ldadu5l1yj9ha4: jupyter completed 16ms
2018-02-09T23:07:45.557Z - info: node/services/browser-windows:: ipc cjdgjlk3j00leadu585hbgchm: jupyter completed 22ms
2018-02-09T23:07:45.728Z - info: node/services/browser-windows:: ipc cjdgjlk8200lfadu51ffwt3xn: jupyter completed 29ms
2018-02-09T23:07:45.739Z - info: node/services/browser-windows:: ipc cjdgjlk8900lgadu5o42ue41x: jupyter completed 34ms
2018-02-09T23:07:45.740Z - info: node/services/browser-windows:: ipc cjdgjlk8b00lhadu5jl3n7hpy: jupyter completed 33ms
2018-02-09T23:08:30.681Z - info: node/services/browser-windows:: ipc cjdgjmix900lmadu5jnpqu58u: getTabs completed 12ms
2018-02-09T23:08:30.780Z - info: node/services/browser-windows:: ipc cjdgjmizy00loadu52ytd6i5x: jupyter completed 13ms
2018-02-09T23:08:30.790Z - info: node/services/browser-windows:: ipc cjdgjmj0600lpadu520c7anqf: jupyter completed 15ms
2018-02-09T23:08:30.796Z - info: node/services/browser-windows:: ipc cjdgjmj0b00lqadu56y5w65me: jupyter completed 17ms
2018-02-09T23:08:30.808Z - info: node/services/browser-windows:: ipc cjdgjmj0c00lradu508fwiq7k: jupyter completed 27ms
2018-02-09T23:08:58.190Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjn45n00lxadu5yzqzh1ap',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:09:10.617Z - info: node/services/browser-windows:: ipc cjdgjndqm00lyadu55te2lvue: getTabs completed 11ms
2018-02-09T23:09:10.668Z - info: node/services/browser-windows:: ipc cjdgjndrv00m0adu5ovg7xofv: jupyter completed 16ms
2018-02-09T23:09:10.689Z - info: node/services/browser-windows:: ipc cjdgjndsr00m1adu5u5j1bm1n: jupyter completed 6ms
2018-02-09T23:09:10.714Z - info: node/services/browser-windows:: ipc cjdgjndt400m2adu55iohdilz: jupyter completed 18ms
2018-02-09T23:09:10.718Z - info: node/services/browser-windows:: ipc cjdgjndt700m3adu5tgmy1073: jupyter completed 19ms
2018-02-09T23:09:21.497Z - info: node/services/browser-windows:: ipc cjdgjnm4v00m6adu5281j9a6x: getTabs completed 10ms
2018-02-09T23:09:21.547Z - info: node/services/browser-windows:: ipc cjdgjnm6300m8adu58th2z1bt: jupyter completed 15ms
2018-02-09T23:09:21.555Z - info: node/services/browser-windows:: ipc cjdgjnm6500m9adu5h9u5md01: jupyter completed 21ms
2018-02-09T23:09:21.706Z - info: node/services/browser-windows:: ipc cjdgjnma900maadu53oerh4uu: jupyter completed 24ms
2018-02-09T23:09:21.715Z - info: node/services/browser-windows:: ipc cjdgjnmac00mbadu5nc1ki8ac: jupyter completed 31ms
2018-02-09T23:09:21.719Z - info: node/services/browser-windows:: ipc cjdgjnmae00mcadu5xnm6w3l4: jupyter completed 33ms
2018-02-09T23:11:25.917Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjqa5300naadu5me3atu0o',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:11:40.474Z - info: node/services/browser-windows:: ipc cjdgjqld900nbadu5l8xs0svl: getTabs completed 13ms
2018-02-09T23:11:40.566Z - info: node/services/browser-windows:: ipc cjdgjqlfs00ndadu5hrn7dbvn: jupyter completed 14ms
2018-02-09T23:11:40.574Z - info: node/services/browser-windows:: ipc cjdgjqlft00neadu52i8w0yg5: jupyter completed 20ms
2018-02-09T23:11:40.584Z - info: node/services/browser-windows:: ipc cjdgjqlg000nfadu5cep1z12c: jupyter completed 23ms
2018-02-09T23:11:40.597Z - info: node/services/browser-windows:: ipc cjdgjqlg100ngadu5a06r6xg9: jupyter completed 36ms
2018-02-09T23:11:45.280Z - info: node/services/browser-windows:: ipc cjdgjqp2p00njadu5tmjpx04i: getTabs completed 11ms
2018-02-09T23:11:45.327Z - info: node/services/browser-windows:: ipc cjdgjqp3y00nladu5q2mxjx73: jupyter completed 17ms
2018-02-09T23:11:45.336Z - info: node/services/browser-windows:: ipc cjdgjqp4000nmadu5m6jhoya3: jupyter completed 23ms
2018-02-09T23:11:45.471Z - info: node/services/browser-windows:: ipc cjdgjqp8400nnadu5e8xev3zm: jupyter completed 11ms
2018-02-09T23:11:45.497Z - info: node/services/browser-windows:: ipc cjdgjqp8500noadu5ojj7xw6b: jupyter completed 36ms
2018-02-09T23:11:45.506Z - info: node/services/browser-windows:: ipc cjdgjqp8600npadu5167yn1mc: jupyter completed 44ms
2018-02-09T23:11:45.508Z - info: node/services/browser-windows:: ipc cjdgjqp8800nqadu5hi5e2ua6: jupyter completed 44ms
2018-02-09T23:11:45.671Z - info: node/services/processes:: removed child process { pid: 22560,
  code: 0,
  signal: null,
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T23:11:45.672Z - info: node/index:: python kernel process closed cjdginfol003fadu5wlx5vxjz process 22560 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: 0, signal: null }
2018-02-09T23:11:45.676Z - info: node/services/browser-windows:: ipc cjdgjqpe000nradu5fweoyor3: close completed 4ms
2018-02-09T23:12:29.002Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjrmtl00nsadu5b8rucmsx',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:12:30.981Z - info: node/services/browser-windows:: ipc cjdgjroc800ntadu5u7eiljdi: getTabs completed 13ms
2018-02-09T23:12:42.280Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T23:12:42.282Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:42.283Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:42.283Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:42.284Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:42.285Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T23:12:42.297Z - info: node/services/processes:: added child process { pid: 22806,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T23:12:42.300Z - info: node/index:: created new python kernel process cjdgjrx2g00nuadu5obdevthl process 22806 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:12:43.510Z - info: node/index:: deleted python kernel process reference cjdgjrx2g00nuadu5obdevthl
2018-02-09T23:12:44.576Z - info: node/index:: new python kernel process is ready cjdgjrx2g00nuadu5obdevthl process 22806 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:12:45.359Z - info: node/index:: python kernel process event cjdgjrx2g00nuadu5obdevthl process 22806 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-09T23:12:45.367Z - info: node/services/processes:: removed child process { pid: 22806,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T23:12:45.368Z - info: node/index:: python kernel process closed cjdgjrx2g00nuadu5obdevthl process 22806 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-09T23:12:45.369Z - info: node/index:: successfully killed python kernel process reference cjdgjrx2g00nuadu5obdevthl
2018-02-09T23:12:45.371Z - info: node/services/browser-windows:: ipc cjdgjrzg800nwadu5dowzv4x1: close completed 3ms
2018-02-09T23:12:45.372Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T23:12:45.372Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:45.373Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:45.373Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:45.374Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:12:45.375Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T23:12:45.381Z - info: node/services/processes:: added child process { pid: 22824,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T23:12:45.384Z - info: node/index:: created new python kernel process cjdgjrzgc00nxadu5mzkd2r8f process 22824 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:12:47.741Z - info: node/index:: new python kernel process is ready cjdgjrzgc00nxadu5mzkd2r8f process 22824 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:12:49.890Z - info: node/services/browser-windows:: ipc cjdgjs2xn00nzadu5h6j90wei: getTabs completed 7ms
2018-02-09T23:12:49.950Z - info: node/services/browser-windows:: ipc cjdgjs2za00o1adu51ergsmgq: jupyter completed 7ms
2018-02-09T23:12:49.958Z - info: node/services/browser-windows:: ipc cjdgjs2zb00o2adu51as0hgc7: jupyter completed 14ms
2018-02-09T23:12:49.978Z - info: node/services/browser-windows:: ipc cjdgjs30400o3adu53tvze35m: jupyter completed 6ms
2018-02-09T23:12:49.986Z - info: node/services/browser-windows:: ipc cjdgjs30600o4adu5to5wiitg: jupyter completed 12ms
2018-02-09T23:12:53.133Z - info: node/services/browser-windows:: ipc cjdgjs5fn00o8adu5pztxii3c: jupyter completed 10ms
2018-02-09T23:12:53.140Z - info: node/services/browser-windows:: ipc cjdgjs5fo00o9adu5ymyyn1nv: jupyter completed 16ms
2018-02-09T23:12:53.147Z - info: node/services/browser-windows:: ipc cjdgjs5fv00oaadu536j95xdx: jupyter completed 16ms
2018-02-09T23:12:53.156Z - info: node/services/browser-windows:: ipc cjdgjs5fw00obadu51x6u1v59: jupyter completed 24ms
2018-02-09T23:12:53.276Z - info: node/services/browser-windows:: ipc cjdgjs5jo00oeadu565me8mbw: jupyter completed 8ms
2018-02-09T23:12:53.285Z - info: node/services/browser-windows:: ipc cjdgjs5jp00ofadu5vxxa84cw: jupyter completed 16ms
2018-02-09T23:12:53.293Z - info: node/services/browser-windows:: ipc cjdgjs5jw00ogadu5g5pighkg: jupyter completed 17ms
2018-02-09T23:12:53.301Z - info: node/services/browser-windows:: ipc cjdgjs5jx00ohadu5k2i9a9w8: jupyter completed 23ms
2018-02-09T23:12:53.390Z - info: node/services/browser-windows:: ipc cjdgjs5mu00okadu5szmsnsup: jupyter completed 8ms
2018-02-09T23:12:53.396Z - info: node/services/browser-windows:: ipc cjdgjs5mv00oladu5z5t58fyi: jupyter completed 13ms
2018-02-09T23:12:53.404Z - info: node/services/browser-windows:: ipc cjdgjs5n100omadu5qpli5dol: jupyter completed 14ms
2018-02-09T23:12:53.410Z - info: node/services/browser-windows:: ipc cjdgjs5n200onadu52pmp1b9c: jupyter completed 20ms
2018-02-09T23:12:53.539Z - info: node/services/browser-windows:: ipc cjdgjs5qz00oqadu5fwp5wyhf: jupyter completed 8ms
2018-02-09T23:12:53.546Z - info: node/services/browser-windows:: ipc cjdgjs5r000oradu5g3gnqyvl: jupyter completed 14ms
2018-02-09T23:12:53.556Z - info: node/services/browser-windows:: ipc cjdgjs5r600osadu5mvktuceb: jupyter completed 18ms
2018-02-09T23:12:53.561Z - info: node/services/browser-windows:: ipc cjdgjs5r700otadu5p9ggn462: jupyter completed 22ms
2018-02-09T23:13:00.128Z - info: node/services/browser-windows:: ipc cjdgjsau100owadu5uso873j5: getTabs completed 7ms
2018-02-09T23:13:00.159Z - info: node/services/browser-windows:: ipc cjdgjsauv00oyadu5rmxh8z2q: jupyter completed 8ms
2018-02-09T23:13:00.164Z - info: node/services/browser-windows:: ipc cjdgjsauw00ozadu592rixdmm: jupyter completed 12ms
2018-02-09T23:13:00.320Z - info: node/services/browser-windows:: ipc cjdgjsazc00p0adu5h5q4ancw: jupyter completed 8ms
2018-02-09T23:13:00.326Z - info: node/services/browser-windows:: ipc cjdgjsazd00p1adu59wmk93n9: jupyter completed 13ms
2018-02-09T23:13:00.328Z - info: node/services/browser-windows:: ipc cjdgjsaze00p2adu5545diq7h: jupyter completed 14ms
2018-02-09T23:13:13.017Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjsks900p4adu5uuxxfxhw',
  '2': { type: 'SHOW_SAVE_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:13:38.740Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjt4mr00p5adu5l3dzibly',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:13:50.810Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjtdy100p6adu5ywle07i0',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:13:54.808Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjth1400p7adu551i89rm2',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:14:06.623Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjtq5a00p8adu5o9c26rjg',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:14:13.321Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjtvbc00p9adu580mebl1c',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:14:26.419Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgju5f500paadu5ewzn4if7',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:14:32.345Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgju9zt00pbadu5fhisugf1',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-09T23:14:50.927Z - info: node/services/browser-windows:: ipc cjdgjuobr00pcadu5kq43sq84: getTabs completed 8ms
2018-02-09T23:14:50.964Z - info: node/services/browser-windows:: ipc cjdgjuocr00peadu5ak6gsdzg: jupyter completed 9ms
2018-02-09T23:14:50.973Z - info: node/services/browser-windows:: ipc cjdgjuoct00pfadu5tmowniwv: jupyter completed 16ms
2018-02-09T23:14:51.166Z - info: node/services/browser-windows:: ipc cjdgjuoie00pgadu544j5oypn: jupyter completed 8ms
2018-02-09T23:14:51.172Z - info: node/services/browser-windows:: ipc cjdgjuoif00phadu5dw0f9pae: jupyter completed 13ms
2018-02-09T23:14:57.392Z - info: node/services/browser-windows:: ipc cjdgjutb900pladu5mk0i3ta7: jupyter completed 10ms
2018-02-09T23:14:57.400Z - info: node/services/browser-windows:: ipc cjdgjutba00pmadu55j299sl3: jupyter completed 18ms
2018-02-09T23:14:57.411Z - info: node/services/browser-windows:: ipc cjdgjutbh00pnadu5gn8btdak: jupyter completed 22ms
2018-02-09T23:14:57.421Z - info: node/services/browser-windows:: ipc cjdgjutbi00poadu5kp8t6t3t: jupyter completed 30ms
2018-02-09T23:14:57.889Z - info: node/services/browser-windows:: ipc cjdgjutp000pradu5b4a6ng90: jupyter completed 13ms
2018-02-09T23:14:57.899Z - info: node/services/browser-windows:: ipc cjdgjutp100psadu52oefofu0: jupyter completed 21ms
2018-02-09T23:14:57.908Z - info: node/services/browser-windows:: ipc cjdgjutp900ptadu53nruik8x: jupyter completed 23ms
2018-02-09T23:14:57.918Z - info: node/services/browser-windows:: ipc cjdgjutpa00puadu5sho9j8dh: jupyter completed 32ms
2018-02-09T23:14:58.609Z - info: node/services/browser-windows:: ipc cjdgjuu9400pxadu525oxoe5v: jupyter completed 9ms
2018-02-09T23:14:58.617Z - info: node/services/browser-windows:: ipc cjdgjuu9500pyadu5vf8cd7h2: jupyter completed 16ms
2018-02-09T23:14:58.621Z - info: node/services/browser-windows:: ipc cjdgjuu9c00pzadu5491bejsh: jupyter completed 13ms
2018-02-09T23:14:58.631Z - info: node/services/browser-windows:: ipc cjdgjuu9c00q0adu5ik2cnuu3: jupyter completed 23ms
2018-02-09T23:16:19.276Z - info: node/services/browser-windows:: ipc cjdgjwkhu00q3adu5if1ge5b9: getTabs completed 7ms
2018-02-09T23:16:19.390Z - info: node/services/browser-windows:: ipc cjdgjwkjp00q5adu5dhzmg47b: jupyter completed 57ms
2018-02-09T23:16:19.396Z - info: node/services/browser-windows:: ipc cjdgjwkjr00q6adu5lya2j1a3: jupyter completed 60ms
2018-02-09T23:16:19.407Z - info: node/services/browser-windows:: ipc cjdgjwkki00q7adu5sjino4dt: jupyter completed 45ms
2018-02-09T23:16:19.417Z - info: node/services/browser-windows:: ipc cjdgjwkkj00q8adu553ngoe9b: jupyter completed 54ms
2018-02-09T23:16:22.158Z - info: node/services/browser-windows:: ipc cjdgjwmpx00qaadu5o4lacwoj: getTabs completed 9ms
2018-02-09T23:16:22.246Z - info: node/services/browser-windows:: ipc cjdgjwmsb00qcadu5mc7lvjq7: jupyter completed 11ms
2018-02-09T23:16:22.269Z - info: node/services/browser-windows:: ipc cjdgjwmt300qdadu5gvkf1hp6: jupyter completed 6ms
2018-02-09T23:16:23.050Z - info: node/services/browser-windows:: ipc cjdgjwneu00qeadu5tdj2byml: jupyter completed 4ms
2018-02-09T23:16:23.057Z - info: node/services/browser-windows:: ipc cjdgjwneu00qfadu5yyk6kktc: jupyter completed 11ms
2018-02-09T23:16:25.948Z - info: node/services/browser-windows:: ipc cjdgjwpn600qjadu5jtp503my: jupyter completed 10ms
2018-02-09T23:16:25.954Z - info: node/services/browser-windows:: ipc cjdgjwpn700qkadu5za8et5x2: jupyter completed 15ms
2018-02-09T23:16:25.966Z - info: node/services/browser-windows:: ipc cjdgjwpnd00qladu5chwkk9ys: jupyter completed 21ms
2018-02-09T23:16:25.975Z - info: node/services/browser-windows:: ipc cjdgjwpne00qmadu5dy1951sl: jupyter completed 29ms
2018-02-09T23:16:26.219Z - info: node/services/browser-windows:: ipc cjdgjwput00qpadu5lv7qapeu: jupyter completed 6ms
2018-02-09T23:16:26.229Z - info: node/services/browser-windows:: ipc cjdgjwpuu00qqadu54o8tris1: jupyter completed 15ms
2018-02-09T23:16:26.238Z - info: node/services/browser-windows:: ipc cjdgjwpv000qradu5nnjuzch6: jupyter completed 17ms
2018-02-09T23:16:26.244Z - info: node/services/browser-windows:: ipc cjdgjwpv100qsadu5g9xm197t: jupyter completed 23ms
2018-02-09T23:16:31.684Z - info: node/services/browser-windows:: ipc cjdgjwu2j00quadu5kvoxa34x: getTabs completed 8ms
2018-02-09T23:16:31.719Z - info: node/services/browser-windows:: ipc cjdgjwu3g00qwadu50se2hj5o: jupyter completed 11ms
2018-02-09T23:16:31.750Z - info: node/services/browser-windows:: ipc cjdgjwu4f00qxadu5d87bodmi: jupyter completed 7ms
2018-02-09T23:16:31.757Z - info: node/services/browser-windows:: ipc cjdgjwu4l00qyadu5t0unz0xq: jupyter completed 8ms
2018-02-09T23:16:31.764Z - info: node/services/browser-windows:: ipc cjdgjwu4n00qzadu5jh2335b3: jupyter completed 13ms
2018-02-09T23:17:11.525Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjxotd00r1adu5u06dwjqe',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:17:24.266Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjxynd00r2adu59cfuv03e',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:17:29.162Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgjy2fd00r3adu5k7r0asl8',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:17:32.520Z - info: node/services/browser-windows:: ipc cjdgjy50d00r4adu5f8onhbkh: getTabs completed 11ms
2018-02-09T23:17:32.616Z - info: node/services/browser-windows:: ipc cjdgjy53100r6adu5jzx6wj9g: jupyter completed 11ms
2018-02-09T23:17:32.623Z - info: node/services/browser-windows:: ipc cjdgjy53200r7adu51xh6hwuh: jupyter completed 17ms
2018-02-09T23:17:32.630Z - info: node/services/browser-windows:: ipc cjdgjy53800r8adu5bvivahun: jupyter completed 18ms
2018-02-09T23:17:32.639Z - info: node/services/browser-windows:: ipc cjdgjy53900r9adu51kyetxyb: jupyter completed 26ms
2018-02-09T23:17:34.363Z - info: node/services/browser-windows:: ipc cjdgjy6fk00rdadu5yfios1q8: jupyter completed 11ms
2018-02-09T23:17:34.372Z - info: node/services/browser-windows:: ipc cjdgjy6fm00readu5cn4t8cy4: jupyter completed 18ms
2018-02-09T23:17:34.386Z - info: node/services/browser-windows:: ipc cjdgjy6fs00rfadu5vewzjmf3: jupyter completed 25ms
2018-02-09T23:17:34.393Z - info: node/services/browser-windows:: ipc cjdgjy6ft00rgadu5uw71gy8o: jupyter completed 30ms
2018-02-09T23:17:34.539Z - info: node/services/browser-windows:: ipc cjdgjy6kj00rjadu5wbu0qbkt: jupyter completed 8ms
2018-02-09T23:17:34.547Z - info: node/services/browser-windows:: ipc cjdgjy6kk00rkadu5o4s7i8zb: jupyter completed 15ms
2018-02-09T23:17:34.558Z - info: node/services/browser-windows:: ipc cjdgjy6kr00rladu5lsmk2l0u: jupyter completed 19ms
2018-02-09T23:17:34.565Z - info: node/services/browser-windows:: ipc cjdgjy6ks00rmadu544we2616: jupyter completed 25ms
2018-02-09T23:17:37.348Z - info: node/services/browser-windows:: ipc cjdgjy8qk00roadu5r7v3qcjz: getTabs completed 8ms
2018-02-09T23:17:37.496Z - info: node/services/browser-windows:: ipc cjdgjy8uo00rqadu5papi1obd: jupyter completed 8ms
2018-02-09T23:17:37.501Z - info: node/services/browser-windows:: ipc cjdgjy8uq00rradu55qjtqlfw: jupyter completed 11ms
2018-02-09T23:17:37.508Z - info: node/services/browser-windows:: ipc cjdgjy8ur00rsadu5vlq47qgk: jupyter completed 17ms
2018-02-09T23:17:37.512Z - info: node/services/browser-windows:: ipc cjdgjy8ur00rtadu5nkm40gu8: jupyter completed 20ms
2018-02-09T23:17:38.652Z - info: node/services/browser-windows:: ipc cjdgjy9qs00rxadu54il84slz: jupyter completed 7ms
2018-02-09T23:17:38.659Z - info: node/services/browser-windows:: ipc cjdgjy9qt00ryadu5gg18fdls: jupyter completed 14ms
2018-02-09T23:17:38.665Z - info: node/services/browser-windows:: ipc cjdgjy9r000rzadu5plwq2nyh: jupyter completed 13ms
2018-02-09T23:17:38.673Z - info: node/services/browser-windows:: ipc cjdgjy9r100s0adu5csmc40qn: jupyter completed 20ms
2018-02-09T23:17:38.884Z - info: node/services/browser-windows:: ipc cjdgjy9x500s3adu5jxgkarum: jupyter completed 11ms
2018-02-09T23:17:38.891Z - info: node/services/browser-windows:: ipc cjdgjy9x600s4adu54skso1ej: jupyter completed 17ms
2018-02-09T23:17:38.899Z - info: node/services/browser-windows:: ipc cjdgjy9xc00s5adu5huylvd0u: jupyter completed 19ms
2018-02-09T23:17:38.907Z - info: node/services/browser-windows:: ipc cjdgjy9xc00s6adu5pe8x1yi1: jupyter completed 27ms
2018-02-09T23:17:39.080Z - info: node/services/browser-windows:: ipc cjdgjya2m00s9adu5ax2u38qz: jupyter completed 10ms
2018-02-09T23:17:39.089Z - info: node/services/browser-windows:: ipc cjdgjya2o00saadu5n9af1h1w: jupyter completed 17ms
2018-02-09T23:17:39.097Z - info: node/services/browser-windows:: ipc cjdgjya2u00sbadu5kxekc25t: jupyter completed 19ms
2018-02-09T23:17:39.104Z - info: node/services/browser-windows:: ipc cjdgjya2v00scadu50lm1fxff: jupyter completed 25ms
2018-02-09T23:17:39.384Z - info: node/services/browser-windows:: ipc cjdgjyab300sfadu5rwqtl7a1: jupyter completed 9ms
2018-02-09T23:17:39.391Z - info: node/services/browser-windows:: ipc cjdgjyab400sgadu5gyt3k8v8: jupyter completed 15ms
2018-02-09T23:17:39.403Z - info: node/services/browser-windows:: ipc cjdgjyaba00shadu5ldoba5wd: jupyter completed 21ms
2018-02-09T23:17:39.410Z - info: node/services/browser-windows:: ipc cjdgjyabb00siadu5hm9gjziz: jupyter completed 27ms
2018-02-09T23:17:45.231Z - info: node/services/browser-windows:: ipc cjdgjyete00sladu5s4a9y9y7: getTabs completed 12ms
2018-02-09T23:17:45.262Z - info: node/services/browser-windows:: ipc cjdgjyeud00snadu51qynesfw: jupyter completed 9ms
2018-02-09T23:17:45.267Z - info: node/services/browser-windows:: ipc cjdgjyeue00soadu530e7439d: jupyter completed 13ms
2018-02-09T23:17:45.274Z - info: node/services/browser-windows:: ipc cjdgjyeul00spadu5gzlrv5sx: jupyter completed 13ms
2018-02-09T23:17:45.283Z - info: node/services/browser-windows:: ipc cjdgjyeul00sqadu5odsq4pwp: jupyter completed 22ms
2018-02-09T23:17:47.937Z - info: node/services/browser-windows:: ipc cjdgjygwm00stadu5o1y4n9ad: getTabs completed 11ms
2018-02-09T23:17:47.968Z - info: node/services/browser-windows:: ipc cjdgjygxi00svadu5v17ef209: jupyter completed 9ms
2018-02-09T23:17:47.972Z - info: node/services/browser-windows:: ipc cjdgjygxk00swadu5kg4rm46n: jupyter completed 11ms
2018-02-09T23:17:47.979Z - info: node/services/browser-windows:: ipc cjdgjygxq00sxadu5d132urzb: jupyter completed 13ms
2018-02-09T23:17:47.986Z - info: node/services/browser-windows:: ipc cjdgjygxr00syadu5pmd7d1td: jupyter completed 19ms
2018-02-09T23:17:48.305Z - info: node/services/browser-windows:: ipc cjdgjyh6u00t0adu5bfp14yfv: getTabs completed 11ms
2018-02-09T23:17:48.337Z - info: node/services/browser-windows:: ipc cjdgjyh7t00t2adu5o4s0twiq: jupyter completed 8ms
2018-02-09T23:17:48.341Z - info: node/services/browser-windows:: ipc cjdgjyh7t00t3adu5q0fyrfx4: jupyter completed 12ms
2018-02-09T23:17:48.351Z - info: node/services/browser-windows:: ipc cjdgjyh7w00t4adu5hvpx4pwo: jupyter completed 19ms
2018-02-09T23:17:48.361Z - info: node/services/browser-windows:: ipc cjdgjyh7x00t5adu5y5qqj54n: jupyter completed 28ms
2018-02-09T23:17:48.581Z - info: node/services/browser-windows:: ipc cjdgjyheh00t7adu5q7s8lee3: getTabs completed 12ms
2018-02-09T23:17:48.614Z - info: node/services/browser-windows:: ipc cjdgjyhfh00t9adu5kzdpvixm: jupyter completed 9ms
2018-02-09T23:17:48.619Z - info: node/services/browser-windows:: ipc cjdgjyhfh00taadu5no0jy3o4: jupyter completed 14ms
2018-02-09T23:17:48.625Z - info: node/services/browser-windows:: ipc cjdgjyhfk00tbadu598fiq2on: jupyter completed 17ms
2018-02-09T23:17:48.629Z - info: node/services/browser-windows:: ipc cjdgjyhfl00tcadu5et9hukj1: jupyter completed 20ms
2018-02-09T23:17:48.984Z - info: node/services/browser-windows:: ipc cjdgjyhpo00teadu5e6kuhjc3: getTabs completed 12ms
2018-02-09T23:17:49.013Z - info: node/services/browser-windows:: ipc cjdgjyhqm00tgadu546avfnh1: jupyter completed 7ms
2018-02-09T23:17:49.019Z - info: node/services/browser-windows:: ipc cjdgjyhqn00thadu58v2riozz: jupyter completed 12ms
2018-02-09T23:17:49.026Z - info: node/services/browser-windows:: ipc cjdgjyhqt00tiadu5zntektns: jupyter completed 13ms
2018-02-09T23:17:49.034Z - info: node/services/browser-windows:: ipc cjdgjyhqu00tjadu5ehnx4uvq: jupyter completed 20ms
2018-02-09T23:17:50.314Z - info: node/services/browser-windows:: ipc cjdgjyiqn00tmadu5h7xqpu3a: getTabs completed 11ms
2018-02-09T23:17:50.346Z - info: node/services/browser-windows:: ipc cjdgjyirm00toadu5lz4eef3g: jupyter completed 8ms
2018-02-09T23:17:50.356Z - info: node/services/browser-windows:: ipc cjdgjyirn00tpadu5gwlmyilf: jupyter completed 16ms
2018-02-09T23:17:50.364Z - info: node/services/browser-windows:: ipc cjdgjyirr00tqadu5h8hwjqfa: jupyter completed 20ms
2018-02-09T23:17:50.369Z - info: node/services/browser-windows:: ipc cjdgjyirr00tradu5s4imj6dy: jupyter completed 26ms
2018-02-09T23:17:52.362Z - info: node/services/browser-windows:: ipc cjdgjykbi00tuadu542bs5c5k: getTabs completed 12ms
2018-02-09T23:17:52.395Z - info: node/services/browser-windows:: ipc cjdgjykch00twadu5d3wm41nv: jupyter completed 10ms
2018-02-09T23:17:52.400Z - info: node/services/browser-windows:: ipc cjdgjykck00txadu5p4auhe2h: jupyter completed 12ms
2018-02-09T23:17:52.411Z - info: node/services/browser-windows:: ipc cjdgjykcn00tyadu5l5neyn2t: jupyter completed 20ms
2018-02-09T23:17:52.416Z - info: node/services/browser-windows:: ipc cjdgjykcq00tzadu5xm3z3nup: jupyter completed 22ms
2018-02-09T23:17:53.340Z - info: node/services/browser-windows:: ipc cjdgjyl2p00u1adu5fb17bvol: getTabs completed 11ms
2018-02-09T23:17:53.369Z - info: node/services/browser-windows:: ipc cjdgjyl3k00u3adu5ek7pv1ck: jupyter completed 9ms
2018-02-09T23:17:53.374Z - info: node/services/browser-windows:: ipc cjdgjyl3o00u4adu57eycq77b: jupyter completed 10ms
2018-02-09T23:17:53.383Z - info: node/services/browser-windows:: ipc cjdgjyl3u00u5adu5rglwkyln: jupyter completed 12ms
2018-02-09T23:17:53.389Z - info: node/services/browser-windows:: ipc cjdgjyl3w00u6adu5xw5i82ff: jupyter completed 17ms
2018-02-09T23:17:53.783Z - info: node/services/browser-windows:: ipc cjdgjylf000u9adu5unpmqo5p: getTabs completed 11ms
2018-02-09T23:17:53.816Z - info: node/services/browser-windows:: ipc cjdgjylfz00ubadu563hc1rw8: jupyter completed 9ms
2018-02-09T23:17:53.821Z - info: node/services/browser-windows:: ipc cjdgjylfz00ucadu5yqyb9w5t: jupyter completed 13ms
2018-02-09T23:17:53.829Z - info: node/services/browser-windows:: ipc cjdgjylg400udadu56x8ln78y: jupyter completed 16ms
2018-02-09T23:17:53.838Z - info: node/services/browser-windows:: ipc cjdgjylg500ueadu5dhecfue2: jupyter completed 24ms
2018-02-09T23:17:56.292Z - info: node/services/browser-windows:: ipc cjdgjyncs00uhadu5hhsrrcoa: getTabs completed 8ms
2018-02-09T23:17:56.330Z - info: node/services/browser-windows:: ipc cjdgjynds00ujadu55t8ic2w4: jupyter completed 10ms
2018-02-09T23:17:56.335Z - info: node/services/browser-windows:: ipc cjdgjyndt00ukadu5wfy8sh93: jupyter completed 13ms
2018-02-09T23:17:56.343Z - info: node/services/browser-windows:: ipc cjdgjyndw00uladu5g30fja2x: jupyter completed 19ms
2018-02-09T23:17:56.351Z - info: node/services/browser-windows:: ipc cjdgjyndy00umadu5bccjkbld: jupyter completed 25ms
2018-02-09T23:17:56.774Z - info: node/services/browser-windows:: ipc cjdgjynq100uoadu5pd4e77fi: getTabs completed 12ms
2018-02-09T23:17:56.809Z - info: node/services/browser-windows:: ipc cjdgjynr200uqadu511pc83yv: jupyter completed 10ms
2018-02-09T23:17:56.813Z - info: node/services/browser-windows:: ipc cjdgjynr600uradu5k3gc0wxw: jupyter completed 11ms
2018-02-09T23:17:56.822Z - info: node/services/browser-windows:: ipc cjdgjynrc00usadu5u5aydx2u: jupyter completed 14ms
2018-02-09T23:17:56.830Z - info: node/services/browser-windows:: ipc cjdgjynre00utadu5237cs5ic: jupyter completed 20ms
2018-02-09T23:17:57.291Z - info: node/services/browser-windows:: ipc cjdgjyo4h00uvadu5mobiu3e7: getTabs completed 10ms
2018-02-09T23:17:57.321Z - info: node/services/browser-windows:: ipc cjdgjyo5d00uxadu5wopgi5y5: jupyter completed 8ms
2018-02-09T23:17:57.326Z - info: node/services/browser-windows:: ipc cjdgjyo5e00uyadu58l38pyca: jupyter completed 12ms
2018-02-09T23:17:57.338Z - info: node/services/browser-windows:: ipc cjdgjyo5i00uzadu5rg8q1f1i: jupyter completed 20ms
2018-02-09T23:17:57.344Z - info: node/services/browser-windows:: ipc cjdgjyo5j00v0adu52q59kcho: jupyter completed 25ms
2018-02-09T23:17:57.460Z - info: node/services/browser-windows:: ipc cjdgjyo9800v2adu54b3ef55x: getTabs completed 8ms
2018-02-09T23:17:57.497Z - info: node/services/browser-windows:: ipc cjdgjyoa500v4adu5xm3po6og: jupyter completed 12ms
2018-02-09T23:17:57.502Z - info: node/services/browser-windows:: ipc cjdgjyoa600v5adu5h5764it8: jupyter completed 15ms
2018-02-09T23:17:57.510Z - info: node/services/browser-windows:: ipc cjdgjyoac00v6adu53jdh35ca: jupyter completed 18ms
2018-02-09T23:17:57.518Z - info: node/services/browser-windows:: ipc cjdgjyoad00v7adu5y52o3vxl: jupyter completed 25ms
2018-02-09T23:17:57.788Z - info: node/services/browser-windows:: ipc cjdgjyoia00v9adu5dwn1wzq3: getTabs completed 10ms
2018-02-09T23:17:57.821Z - info: node/services/browser-windows:: ipc cjdgjyoj800vbadu5hua2es8n: jupyter completed 9ms
2018-02-09T23:17:57.824Z - info: node/services/browser-windows:: ipc cjdgjyoj900vcadu5egy6i1j9: jupyter completed 11ms
2018-02-09T23:17:57.834Z - info: node/services/browser-windows:: ipc cjdgjyojd00vdadu55btr9zss: jupyter completed 17ms
2018-02-09T23:17:57.838Z - info: node/services/browser-windows:: ipc cjdgjyoje00veadu5t000qljq: jupyter completed 20ms
2018-02-09T23:17:57.971Z - info: node/services/browser-windows:: ipc cjdgjyong00vgadu580ds4ceb: getTabs completed 6ms
2018-02-09T23:17:58.003Z - info: node/services/browser-windows:: ipc cjdgjyoo400viadu5z0ngvgkq: jupyter completed 12ms
2018-02-09T23:17:58.008Z - info: node/services/browser-windows:: ipc cjdgjyoo700vjadu56bz9omog: jupyter completed 17ms
2018-02-09T23:17:58.016Z - info: node/services/browser-windows:: ipc cjdgjyood00vkadu59p0gjg2x: jupyter completed 18ms
2018-02-09T23:17:58.024Z - info: node/services/browser-windows:: ipc cjdgjyooe00vladu5956kl5rz: jupyter completed 26ms
2018-02-09T23:17:59.225Z - info: node/services/browser-windows:: ipc cjdgjypm700voadu55sl1dhve: getTabs completed 10ms
2018-02-09T23:17:59.255Z - info: node/services/browser-windows:: ipc cjdgjypn200vqadu57rvwbdqn: jupyter completed 9ms
2018-02-09T23:17:59.259Z - info: node/services/browser-windows:: ipc cjdgjypn400vradu5kvimo6qg: jupyter completed 11ms
2018-02-09T23:17:59.266Z - info: node/services/browser-windows:: ipc cjdgjypn700vsadu5h5wzmnin: jupyter completed 15ms
2018-02-09T23:17:59.275Z - info: node/services/browser-windows:: ipc cjdgjypn800vtadu53wdibjr2: jupyter completed 22ms
2018-02-09T23:18:01.661Z - info: node/services/browser-windows:: ipc cjdgjyrhx00vwadu5q50y66ga: getTabs completed 7ms
2018-02-09T23:18:01.694Z - info: node/services/browser-windows:: ipc cjdgjyrip00vyadu56l14xfby: jupyter completed 12ms
2018-02-09T23:18:01.699Z - info: node/services/browser-windows:: ipc cjdgjyriu00vzadu5v0b0v0qn: jupyter completed 13ms
2018-02-09T23:18:01.876Z - info: node/services/browser-windows:: ipc cjdgjyrnv00w0adu55v2fkkc3: jupyter completed 9ms
2018-02-09T23:18:01.880Z - info: node/services/browser-windows:: ipc cjdgjyrnw00w1adu5xmuc9kbo: jupyter completed 12ms
2018-02-09T23:18:03.764Z - info: node/services/browser-windows:: ipc cjdgjyt4900w4adu5p986j9dx: getTabs completed 11ms
2018-02-09T23:18:03.794Z - info: node/services/browser-windows:: ipc cjdgjyt5500w6adu5molq8oox: jupyter completed 9ms
2018-02-09T23:18:03.798Z - info: node/services/browser-windows:: ipc cjdgjyt5600w7adu5hqb0rzns: jupyter completed 12ms
2018-02-09T23:18:03.803Z - info: node/services/browser-windows:: ipc cjdgjyt5a00w8adu52p0tcize: jupyter completed 13ms
2018-02-09T23:18:03.810Z - info: node/services/browser-windows:: ipc cjdgjyt5b00w9adu534xug5h4: jupyter completed 19ms
2018-02-09T23:18:03.969Z - info: node/services/browser-windows:: ipc cjdgjyt9w00wbadu5a4q620gr: getTabs completed 13ms
2018-02-09T23:18:03.999Z - info: node/services/browser-windows:: ipc cjdgjytaw00wdadu5qxuc10cc: jupyter completed 7ms
2018-02-09T23:18:04.005Z - info: node/services/browser-windows:: ipc cjdgjytaw00weadu56p4vr4i9: jupyter completed 13ms
2018-02-09T23:18:04.009Z - info: node/services/browser-windows:: ipc cjdgjytb100wfadu5te0zjd9d: jupyter completed 12ms
2018-02-09T23:18:04.020Z - info: node/services/browser-windows:: ipc cjdgjytb200wgadu590o1wzir: jupyter completed 22ms
2018-02-09T23:18:04.143Z - info: node/services/browser-windows:: ipc cjdgjytev00wiadu5tig56b53: getTabs completed 8ms
2018-02-09T23:18:04.175Z - info: node/services/browser-windows:: ipc cjdgjytfq00wkadu557ertf2o: jupyter completed 9ms
2018-02-09T23:18:04.182Z - info: node/services/browser-windows:: ipc cjdgjytft00wladu5pz2ap6ek: jupyter completed 12ms
2018-02-09T23:18:04.188Z - info: node/services/browser-windows:: ipc cjdgjytfv00wmadu5dfc66jti: jupyter completed 16ms
2018-02-09T23:18:04.191Z - info: node/services/browser-windows:: ipc cjdgjytfw00wnadu5krna51jc: jupyter completed 19ms
2018-02-09T23:18:04.300Z - info: node/services/browser-windows:: ipc cjdgjytj800wpadu5i421z5mt: getTabs completed 8ms
2018-02-09T23:18:04.340Z - info: node/services/browser-windows:: ipc cjdgjytk700wradu5xbix8oke: jupyter completed 12ms
2018-02-09T23:18:04.344Z - info: node/services/browser-windows:: ipc cjdgjytk800wsadu5wdcdoiow: jupyter completed 16ms
2018-02-09T23:18:04.350Z - info: node/services/browser-windows:: ipc cjdgjytk900wtadu5cjtwt804: jupyter completed 21ms
2018-02-09T23:18:04.353Z - info: node/services/browser-windows:: ipc cjdgjytka00wuadu574q5btqh: jupyter completed 23ms
2018-02-09T23:18:07.421Z - info: node/services/browser-windows:: ipc cjdgjyvxu00wxadu51t49gx4q: getTabs completed 11ms
2018-02-09T23:18:07.454Z - info: node/services/browser-windows:: ipc cjdgjyvyt00wzadu5by2gotkx: jupyter completed 9ms
2018-02-09T23:18:07.458Z - info: node/services/browser-windows:: ipc cjdgjyvyv00x0adu5dwgk0xt6: jupyter completed 11ms
2018-02-09T23:18:07.466Z - info: node/services/browser-windows:: ipc cjdgjyvz000x1adu5ek2nimjh: jupyter completed 14ms
2018-02-09T23:18:07.474Z - info: node/services/browser-windows:: ipc cjdgjyvz000x2adu5jdla1skl: jupyter completed 22ms
2018-02-09T23:18:09.901Z - info: node/services/browser-windows:: ipc cjdgjyxuq00x5adu5cquton0p: getTabs completed 11ms
2018-02-09T23:18:09.935Z - info: node/services/browser-windows:: ipc cjdgjyxvp00x7adu5akhx5q6h: jupyter completed 10ms
2018-02-09T23:18:09.940Z - info: node/services/browser-windows:: ipc cjdgjyxvq00x8adu58g5oqx2q: jupyter completed 14ms
2018-02-09T23:18:10.101Z - info: node/services/browser-windows:: ipc cjdgjyy0800x9adu5bms0esfb: jupyter completed 13ms
2018-02-09T23:18:10.115Z - info: node/services/browser-windows:: ipc cjdgjyy0800xaadu5sszb6ox4: jupyter completed 27ms
2018-02-09T23:18:10.124Z - info: node/services/browser-windows:: ipc cjdgjyy0900xbadu5w1qiwxar: jupyter completed 35ms
2018-02-09T23:19:26.338Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:19:43.167Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk0xtq00xfadu5wjcgapql',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:19:44.401Z - info: node/services/browser-windows:: ipc cjdgk0yrs00xgadu5otxgvjse: getTabs completed 9ms
2018-02-09T23:19:44.488Z - info: node/services/browser-windows:: ipc cjdgk0yu500xiadu52cfd2tkp: jupyter completed 11ms
2018-02-09T23:19:44.494Z - info: node/services/browser-windows:: ipc cjdgk0yu600xjadu5kelmab8p: jupyter completed 16ms
2018-02-09T23:19:44.504Z - info: node/services/browser-windows:: ipc cjdgk0yu900xkadu5q1qe95sd: jupyter completed 22ms
2018-02-09T23:19:44.510Z - info: node/services/browser-windows:: ipc cjdgk0yua00xladu56khoyax7: jupyter completed 28ms
2018-02-09T23:19:46.498Z - info: node/services/browser-windows:: ipc cjdgk10e000xpadu5l0wod1x9: jupyter completed 10ms
2018-02-09T23:19:46.507Z - info: node/services/browser-windows:: ipc cjdgk10e100xqadu54v7um497: jupyter completed 18ms
2018-02-09T23:19:46.517Z - info: node/services/browser-windows:: ipc cjdgk10e700xradu5j3uka553: jupyter completed 22ms
2018-02-09T23:19:46.527Z - info: node/services/browser-windows:: ipc cjdgk10e800xsadu5qzafh0ja: jupyter completed 31ms
2018-02-09T23:19:46.699Z - info: node/services/browser-windows:: ipc cjdgk10jj00xvadu5ivud733d: jupyter completed 12ms
2018-02-09T23:19:46.706Z - info: node/services/browser-windows:: ipc cjdgk10jk00xwadu5xtrp4pnl: jupyter completed 18ms
2018-02-09T23:19:46.711Z - info: node/services/browser-windows:: ipc cjdgk10jr00xxadu5w8gezj3r: jupyter completed 15ms
2018-02-09T23:19:46.723Z - info: node/services/browser-windows:: ipc cjdgk10jr00xyadu54gf95141: jupyter completed 28ms
2018-02-09T23:19:47.070Z - info: node/services/browser-windows:: ipc cjdgk10tz00y1adu5fm5h7s08: jupyter completed 7ms
2018-02-09T23:19:47.078Z - info: node/services/browser-windows:: ipc cjdgk10u000y2adu57b3acyni: jupyter completed 14ms
2018-02-09T23:19:47.091Z - info: node/services/browser-windows:: ipc cjdgk10u800y3adu59zp26reu: jupyter completed 18ms
2018-02-09T23:19:47.094Z - info: node/services/browser-windows:: ipc cjdgk10u900y4adu5quywfrru: jupyter completed 21ms
2018-02-09T23:20:00.580Z - info: node/services/browser-windows:: ipc cjdgk1b9700y7adu5m1t7hqmp: getTabs completed 8ms
2018-02-09T23:20:00.622Z - info: node/services/browser-windows:: ipc cjdgk1ba900y9adu58ypm0z4p: jupyter completed 13ms
2018-02-09T23:20:00.630Z - info: node/services/browser-windows:: ipc cjdgk1bac00yaadu537dcr271: jupyter completed 18ms
2018-02-09T23:20:00.784Z - info: node/services/browser-windows:: ipc cjdgk1bed00ybadu5e9vt5yyg: jupyter completed 27ms
2018-02-09T23:20:00.792Z - info: node/services/browser-windows:: ipc cjdgk1bei00ycadu571wws3sa: jupyter completed 30ms
2018-02-09T23:20:00.794Z - info: node/services/browser-windows:: ipc cjdgk1bek00ydadu5uv6ee5jg: jupyter completed 30ms
2018-02-09T23:21:14.598Z - info: node/services/browser-windows:: ipc cjdgk2wd200yhadu5yvlmmb8x: jupyter completed 14ms
2018-02-09T23:21:14.602Z - info: node/services/browser-windows:: ipc cjdgk2wd400yiadu5w7y0shzk: jupyter completed 17ms
2018-02-09T23:21:14.612Z - info: node/services/browser-windows:: ipc cjdgk2wd500yjadu5ow7070nn: jupyter completed 27ms
2018-02-09T23:21:14.622Z - info: node/services/browser-windows:: ipc cjdgk2wd900ykadu5wc958rvd: jupyter completed 32ms
2018-02-09T23:21:14.634Z - info: node/services/browser-windows:: ipc cjdgk2wdb00yladu5ndqruwxh: jupyter completed 43ms
2018-02-09T23:21:21.709Z - info: node/services/browser-windows:: ipc cjdgk31ur00ypadu56h1ladg4: jupyter completed 8ms
2018-02-09T23:21:21.714Z - info: node/services/browser-windows:: ipc cjdgk31ut00yqadu5xns0fri1: jupyter completed 13ms
2018-02-09T23:21:21.727Z - info: node/services/browser-windows:: ipc cjdgk31uu00yradu500froe9m: jupyter completed 25ms
2018-02-09T23:21:21.742Z - info: node/services/browser-windows:: ipc cjdgk31ux00ysadu5ryhnmph8: jupyter completed 37ms
2018-02-09T23:21:21.748Z - info: node/services/browser-windows:: ipc cjdgk31uy00ytadu5810q51jj: jupyter completed 42ms
2018-02-09T23:21:51.310Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk3op600z5adu55quwmhch',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:21:51.810Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk3p3500z6adu5f48lbt2x',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:21:53.444Z - info: node/services/browser-windows:: ipc cjdgk3qcb00z7adu5zuo22qdy: getTabs completed 9ms
2018-02-09T23:21:53.535Z - info: node/services/browser-windows:: ipc cjdgk3qeq00z9adu5z8nu3yo8: jupyter completed 13ms
2018-02-09T23:21:53.547Z - info: node/services/browser-windows:: ipc cjdgk3qez00zaadu5wefxnmk7: jupyter completed 16ms
2018-02-09T23:21:53.554Z - info: node/services/browser-windows:: ipc cjdgk3qf500zbadu53hgzhquc: jupyter completed 17ms
2018-02-09T23:21:53.566Z - info: node/services/browser-windows:: ipc cjdgk3qf600zcadu5abffjcv9: jupyter completed 28ms
2018-02-09T23:22:00.502Z - info: node/services/browser-windows:: ipc cjdgk3vsd00zfadu5s6exz5w0: getTabs completed 9ms
2018-02-09T23:22:00.548Z - info: node/services/browser-windows:: ipc cjdgk3vtk00zhadu5vjc6aioo: jupyter completed 12ms
2018-02-09T23:22:00.557Z - info: node/services/browser-windows:: ipc cjdgk3vtl00ziadu5crwl6lig: jupyter completed 20ms
2018-02-09T23:22:00.693Z - info: node/services/browser-windows:: ipc cjdgk3vxo00zjadu5v7qjqqo2: jupyter completed 9ms
2018-02-09T23:22:00.719Z - info: node/services/browser-windows:: ipc cjdgk3vxp00zkadu51mnln3oo: jupyter completed 34ms
2018-02-09T23:22:00.721Z - info: node/services/browser-windows:: ipc cjdgk3vxr00zladu5n1yyqrqr: jupyter completed 34ms
2018-02-09T23:22:00.729Z - info: node/services/browser-windows:: ipc cjdgk3vxs00zmadu5n8o3l01k: jupyter completed 41ms
2018-02-09T23:22:23.714Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk4dpd00zoadu5aca04s96',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:22:26.147Z - info: node/services/browser-windows:: ipc cjdgk4fkp00zpadu5lforx48j: getTabs completed 10ms
2018-02-09T23:22:26.215Z - info: node/services/browser-windows:: ipc cjdgk4fmi00zradu5e4cx4jaf: jupyter completed 12ms
2018-02-09T23:22:26.244Z - info: node/services/browser-windows:: ipc cjdgk4fnf00zsadu5duu3pn7b: jupyter completed 9ms
2018-02-09T23:22:26.256Z - info: node/services/browser-windows:: ipc cjdgk4fno00ztadu5aw5gjyu6: jupyter completed 11ms
2018-02-09T23:22:26.262Z - info: node/services/browser-windows:: ipc cjdgk4fnp00zuadu59chj9lzn: jupyter completed 17ms
2018-02-09T23:22:30.022Z - info: node/services/browser-windows:: ipc cjdgk4ik900zyadu5ybp02gqd: jupyter completed 13ms
2018-02-09T23:22:30.033Z - info: node/services/browser-windows:: ipc cjdgk4ikb00zzadu5g1kbku2n: jupyter completed 22ms
2018-02-09T23:22:30.042Z - info: node/services/browser-windows:: ipc cjdgk4ikj0100adu5ng6l4xqa: jupyter completed 23ms
2018-02-09T23:22:30.054Z - info: node/services/browser-windows:: ipc cjdgk4ikk0101adu5qe0dnvcn: jupyter completed 34ms
2018-02-09T23:22:30.290Z - info: node/services/browser-windows:: ipc cjdgk4irs0104adu5k7x4v9cg: jupyter completed 9ms
2018-02-09T23:22:30.299Z - info: node/services/browser-windows:: ipc cjdgk4irt0105adu539uwbox2: jupyter completed 18ms
2018-02-09T23:22:30.309Z - info: node/services/browser-windows:: ipc cjdgk4irz0106adu5sc3c8a07: jupyter completed 22ms
2018-02-09T23:22:30.315Z - info: node/services/browser-windows:: ipc cjdgk4is00107adu5ko471bev: jupyter completed 27ms
2018-02-09T23:22:30.611Z - info: node/services/browser-windows:: ipc cjdgk4j0r010aadu5okeugaij: jupyter completed 8ms
2018-02-09T23:22:30.619Z - info: node/services/browser-windows:: ipc cjdgk4j0s010badu559y7hdr4: jupyter completed 15ms
2018-02-09T23:22:30.629Z - info: node/services/browser-windows:: ipc cjdgk4j0y010cadu5gvrcnqi9: jupyter completed 19ms
2018-02-09T23:22:30.638Z - info: node/services/browser-windows:: ipc cjdgk4j0z010dadu5yl8bz7sa: jupyter completed 27ms
2018-02-09T23:22:32.237Z - info: node/services/browser-windows:: ipc cjdgk4k9v010fadu5eugxln9v: getTabs completed 9ms
2018-02-09T23:22:32.303Z - info: node/services/browser-windows:: ipc cjdgk4kbm010hadu5o2lbhsrw: jupyter completed 12ms
2018-02-09T23:22:32.332Z - info: node/services/browser-windows:: ipc cjdgk4kcn010iadu59pxcxuvn: jupyter completed 5ms
2018-02-09T23:22:32.336Z - info: node/services/browser-windows:: ipc cjdgk4kcs010jadu5a39nwshj: jupyter completed 4ms
2018-02-09T23:22:32.345Z - info: node/services/browser-windows:: ipc cjdgk4kct010kadu55lsmdyha: jupyter completed 12ms
2018-02-09T23:22:33.756Z - info: node/services/browser-windows:: ipc cjdgk4lg0010oadu5qg23bsc3: jupyter completed 11ms
2018-02-09T23:22:33.770Z - info: node/services/browser-windows:: ipc cjdgk4lg1010padu5tdhfymnp: jupyter completed 25ms
2018-02-09T23:22:33.775Z - info: node/services/browser-windows:: ipc cjdgk4lg8010qadu53xb0vup5: jupyter completed 23ms
2018-02-09T23:22:33.785Z - info: node/services/browser-windows:: ipc cjdgk4lg9010radu5go6vj5wp: jupyter completed 32ms
2018-02-09T23:22:34.047Z - info: node/services/browser-windows:: ipc cjdgk4lo4010uadu5iw2iacvq: jupyter completed 11ms
2018-02-09T23:22:34.055Z - info: node/services/browser-windows:: ipc cjdgk4lo5010vadu5py1omy2q: jupyter completed 17ms
2018-02-09T23:22:34.060Z - info: node/services/browser-windows:: ipc cjdgk4lob010wadu5d8yl3glb: jupyter completed 17ms
2018-02-09T23:22:34.068Z - info: node/services/browser-windows:: ipc cjdgk4loc010xadu5qeg6d6vh: jupyter completed 23ms
2018-02-09T23:22:36.921Z - info: node/services/browser-windows:: ipc cjdgk4nvu0110adu55v8ldgvj: getTabs completed 15ms
2018-02-09T23:22:36.963Z - info: node/services/browser-windows:: ipc cjdgk4nx40112adu5iq43rki4: jupyter completed 11ms
2018-02-09T23:22:36.969Z - info: node/services/browser-windows:: ipc cjdgk4nx50113adu5oqd4rqlx: jupyter completed 16ms
2018-02-09T23:22:37.121Z - info: node/services/browser-windows:: ipc cjdgk4o150114adu5a7shd59a: jupyter completed 24ms
2018-02-09T23:22:37.125Z - info: node/services/browser-windows:: ipc cjdgk4o1e0115adu50eul0if0: jupyter completed 19ms
2018-02-09T23:22:37.134Z - info: node/services/browser-windows:: ipc cjdgk4o1e0116adu5f6a6qhxv: jupyter completed 28ms
2018-02-09T23:23:23.952Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:23:38.823Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk5znq011badu5f6485t08',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:23:39.678Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgk60bh011cadu5t51onp65',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:23:40.759Z - info: node/services/browser-windows:: ipc cjdgk6156011dadu5ccn06w7l: getTabs completed 13ms
2018-02-09T23:23:40.828Z - info: node/services/browser-windows:: ipc cjdgk6173011fadu5g19y882j: jupyter completed 13ms
2018-02-09T23:23:40.839Z - info: node/services/browser-windows:: ipc cjdgk6178011gadu5ekx5ks3v: jupyter completed 19ms
2018-02-09T23:23:40.864Z - info: node/services/browser-windows:: ipc cjdgk618a011hadu518i1xdzt: jupyter completed 6ms
2018-02-09T23:23:40.874Z - info: node/services/browser-windows:: ipc cjdgk618b011iadu53ctfcxks: jupyter completed 15ms
2018-02-09T23:23:54.182Z - info: node/services/browser-windows:: ipc cjdgk6bi1011ladu543q188x0: getTabs completed 11ms
2018-02-09T23:23:54.241Z - info: node/services/browser-windows:: ipc cjdgk6bjk011nadu5c612xb7e: jupyter completed 17ms
2018-02-09T23:23:54.249Z - info: node/services/browser-windows:: ipc cjdgk6bjl011oadu556avhdbq: jupyter completed 23ms
2018-02-09T23:23:54.391Z - info: node/services/browser-windows:: ipc cjdgk6bns011padu5qnsfueju: jupyter completed 15ms
2018-02-09T23:23:54.411Z - info: node/services/browser-windows:: ipc cjdgk6bnu011qadu52vjh5f2w: jupyter completed 33ms
2018-02-09T23:23:54.420Z - info: node/services/browser-windows:: ipc cjdgk6bnv011radu5nv0olhcp: jupyter completed 41ms
2018-02-09T23:24:38.703Z - info: node/services/browser-windows:: ipc cjdgk79up011wadu5m7nqa812: getTabs completed 14ms
2018-02-09T23:24:38.795Z - info: node/services/browser-windows:: ipc cjdgk79xb011yadu5smm9x6ap: jupyter completed 11ms
2018-02-09T23:24:38.801Z - info: node/services/browser-windows:: ipc cjdgk79xd011zadu5gihqbrrz: jupyter completed 15ms
2018-02-09T23:24:38.812Z - info: node/services/browser-windows:: ipc cjdgk79xj0120adu5kj2lhddc: jupyter completed 20ms
2018-02-09T23:24:38.821Z - info: node/services/browser-windows:: ipc cjdgk79xk0121adu5kd3rkwaz: jupyter completed 28ms
2018-02-09T23:24:48.493Z - info: node/services/browser-windows:: ipc cjdgk7hep0123adu50vv4v8x3: getTabs completed 11ms
2018-02-09T23:24:48.587Z - info: node/services/browser-windows:: ipc cjdgk7hhd0125adu529egnpxc: jupyter completed 10ms
2018-02-09T23:24:48.596Z - info: node/services/browser-windows:: ipc cjdgk7hhf0126adu55itnpg6u: jupyter completed 16ms
2018-02-09T23:24:48.600Z - info: node/services/browser-windows:: ipc cjdgk7hhh0127adu5s64naiy3: jupyter completed 19ms
2018-02-09T23:24:48.610Z - info: node/services/browser-windows:: ipc cjdgk7hhi0128adu5fj45s6h3: jupyter completed 28ms
2018-02-09T23:24:53.247Z - info: node/services/browser-windows:: ipc cjdgk7l2r012badu5jh7y3r02: getTabs completed 12ms
2018-02-09T23:24:53.296Z - info: node/services/browser-windows:: ipc cjdgk7l41012dadu5vnr1f264: jupyter completed 15ms
2018-02-09T23:24:53.302Z - info: node/services/browser-windows:: ipc cjdgk7l42012eadu5gfz9z3wg: jupyter completed 20ms
2018-02-09T23:24:53.458Z - info: node/services/browser-windows:: ipc cjdgk7l87012fadu5rlf1t9tq: jupyter completed 27ms
2018-02-09T23:24:53.460Z - info: node/services/browser-windows:: ipc cjdgk7l8d012gadu5f1uwhnc8: jupyter completed 22ms
2018-02-09T23:24:53.468Z - info: node/services/browser-windows:: ipc cjdgk7l8e012hadu5z7stka7y: jupyter completed 30ms
2018-02-09T23:27:20.536Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:30:43.968Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:31:35.510Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgkg7h0012jadu59y9144qu',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:31:37.476Z - info: node/services/browser-windows:: ipc cjdgkg8z6012kadu58h8x9cwe: getTabs completed 18ms
2018-02-09T23:31:37.563Z - info: node/services/browser-windows:: ipc cjdgkg91r012madu5fa4xnk7v: jupyter completed 12ms
2018-02-09T23:31:37.575Z - info: node/services/browser-windows:: ipc cjdgkg91u012nadu5xp4bcm9f: jupyter completed 20ms
2018-02-09T23:31:37.581Z - info: node/services/browser-windows:: ipc cjdgkg921012oadu5mijvmplr: jupyter completed 20ms
2018-02-09T23:31:37.592Z - info: node/services/browser-windows:: ipc cjdgkg922012padu58j2dul5q: jupyter completed 30ms
2018-02-09T23:31:39.479Z - info: node/services/browser-windows:: ipc cjdgkgaiy012tadu50je31abe: jupyter completed 12ms
2018-02-09T23:31:39.488Z - info: node/services/browser-windows:: ipc cjdgkgaiz012uadu5fluyscfw: jupyter completed 21ms
2018-02-09T23:31:39.494Z - info: node/services/browser-windows:: ipc cjdgkgaj6012vadu5lcg6qp23: jupyter completed 20ms
2018-02-09T23:31:39.503Z - info: node/services/browser-windows:: ipc cjdgkgaj7012wadu5gwiroj9t: jupyter completed 28ms
2018-02-09T23:31:39.725Z - info: node/services/browser-windows:: ipc cjdgkgapt012zadu5q5fyzne4: jupyter completed 11ms
2018-02-09T23:31:39.733Z - info: node/services/browser-windows:: ipc cjdgkgapu0130adu5w8qulchg: jupyter completed 18ms
2018-02-09T23:31:39.742Z - info: node/services/browser-windows:: ipc cjdgkgaq10131adu5vq62ir1e: jupyter completed 21ms
2018-02-09T23:31:39.753Z - info: node/services/browser-windows:: ipc cjdgkgaq20132adu5bgpf2pt7: jupyter completed 31ms
2018-02-09T23:31:40.160Z - info: node/services/browser-windows:: ipc cjdgkgb1y0135adu57ao1nt8n: jupyter completed 8ms
2018-02-09T23:31:40.167Z - info: node/services/browser-windows:: ipc cjdgkgb200136adu5malrfumv: jupyter completed 15ms
2018-02-09T23:31:40.179Z - info: node/services/browser-windows:: ipc cjdgkgb260137adu53m8hikej: jupyter completed 21ms
2018-02-09T23:31:40.189Z - info: node/services/browser-windows:: ipc cjdgkgb270138adu5zipvft6f: jupyter completed 29ms
2018-02-09T23:31:40.491Z - info: node/services/browser-windows:: ipc cjdgkgbb4013badu58lwphjf9: jupyter completed 11ms
2018-02-09T23:31:40.499Z - info: node/services/browser-windows:: ipc cjdgkgbb6013cadu5z3yrjcli: jupyter completed 17ms
2018-02-09T23:31:40.509Z - info: node/services/browser-windows:: ipc cjdgkgbbc013dadu5l4cqwxvv: jupyter completed 21ms
2018-02-09T23:31:40.519Z - info: node/services/browser-windows:: ipc cjdgkgbbc013eadu5fplurqmx: jupyter completed 30ms
2018-02-09T23:31:46.373Z - info: node/services/browser-windows:: ipc cjdgkgfuh013hadu5gv71ig74: getTabs completed 12ms
2018-02-09T23:31:46.425Z - info: node/services/browser-windows:: ipc cjdgkgfvq013jadu5s95node3: jupyter completed 19ms
2018-02-09T23:31:46.433Z - info: node/services/browser-windows:: ipc cjdgkgfvr013kadu5zu1nfd7q: jupyter completed 26ms
2018-02-09T23:31:46.665Z - info: node/services/browser-windows:: ipc cjdgkgg1g013ladu5ziv46mtc: jupyter completed 53ms
2018-02-09T23:31:46.674Z - info: node/services/browser-windows:: ipc cjdgkgg1h013madu5ldb9a7cx: jupyter completed 61ms
2018-02-09T23:31:46.679Z - info: node/services/browser-windows:: ipc cjdgkgg1k013nadu549gqk9eo: jupyter completed 63ms
2018-02-09T23:32:13.846Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdgkh11x013padu5drzs3354',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-09T23:32:23.691Z - info: node/services/browser-windows:: ipc cjdgkh8n1013qadu5ji4pdnz3: getTabs completed 14ms
2018-02-09T23:32:23.775Z - info: node/services/browser-windows:: ipc cjdgkh8pf013sadu5qlf4f3sf: jupyter completed 12ms
2018-02-09T23:32:23.782Z - info: node/services/browser-windows:: ipc cjdgkh8pg013tadu58ounb6u5: jupyter completed 18ms
2018-02-09T23:32:23.794Z - info: node/services/browser-windows:: ipc cjdgkh8pn013uadu5kmvriw17: jupyter completed 23ms
2018-02-09T23:32:23.806Z - info: node/services/browser-windows:: ipc cjdgkh8po013vadu55c70xp75: jupyter completed 34ms
2018-02-09T23:32:29.764Z - info: node/services/browser-windows:: ipc cjdgkhdbp0148adu5m4epqtrk: getTabs completed 14ms
2018-02-09T23:32:29.817Z - info: node/services/browser-windows:: ipc cjdgkhdd5014aadu5ylwune59: jupyter completed 16ms
2018-02-09T23:32:29.831Z - info: node/services/browser-windows:: ipc cjdgkhdd9014badu5i1hqg6wq: jupyter completed 25ms
2018-02-09T23:32:31.050Z - info: node/services/browser-windows:: ipc cjdgkhebo014cadu55cun6nk8: jupyter completed 6ms
2018-02-09T23:32:31.059Z - info: node/services/browser-windows:: ipc cjdgkhebq014dadu505lkbgil: jupyter completed 13ms
2018-02-09T23:32:33.722Z - info: node/services/browser-windows:: ipc cjdgkhgds014hadu5weoy8fpd: jupyter completed 10ms
2018-02-09T23:32:33.732Z - info: node/services/browser-windows:: ipc cjdgkhgdt014iadu5ybw9xobh: jupyter completed 19ms
2018-02-09T23:32:33.743Z - info: node/services/browser-windows:: ipc cjdgkhge0014jadu52wm7d9tj: jupyter completed 23ms
2018-02-09T23:32:33.756Z - info: node/services/browser-windows:: ipc cjdgkhge1014kadu5402hyd9h: jupyter completed 35ms
2018-02-09T23:32:33.969Z - info: node/services/browser-windows:: ipc cjdgkhgko014nadu5ydyg29ly: jupyter completed 9ms
2018-02-09T23:32:33.979Z - info: node/services/browser-windows:: ipc cjdgkhgkp014oadu56bkyo1t2: jupyter completed 18ms
2018-02-09T23:32:33.990Z - info: node/services/browser-windows:: ipc cjdgkhgkv014padu5r0pygn5h: jupyter completed 23ms
2018-02-09T23:32:33.999Z - info: node/services/browser-windows:: ipc cjdgkhgkw014qadu5w744kwc6: jupyter completed 31ms
2018-02-09T23:32:34.276Z - info: node/services/browser-windows:: ipc cjdgkhgt6014tadu5o8jbck3t: jupyter completed 10ms
2018-02-09T23:32:34.284Z - info: node/services/browser-windows:: ipc cjdgkhgt7014uadu5e9fpfhgd: jupyter completed 17ms
2018-02-09T23:32:34.294Z - info: node/services/browser-windows:: ipc cjdgkhgtd014vadu5ovbmlkwg: jupyter completed 21ms
2018-02-09T23:32:34.304Z - info: node/services/browser-windows:: ipc cjdgkhgte014wadu54fs65yae: jupyter completed 29ms
2018-02-09T23:32:39.079Z - info: node/services/browser-windows:: ipc cjdgkhkii014zadu51w5sr3sy: getTabs completed 13ms
2018-02-09T23:32:39.130Z - info: node/services/browser-windows:: ipc cjdgkhkjs0151adu5miim3ih0: jupyter completed 18ms
2018-02-09T23:32:39.137Z - info: node/services/browser-windows:: ipc cjdgkhkju0152adu57o17drvv: jupyter completed 23ms
2018-02-09T23:32:39.283Z - info: node/services/browser-windows:: ipc cjdgkhkof0153adu54oll8yvc: jupyter completed 4ms
2018-02-09T23:32:39.290Z - info: node/services/browser-windows:: ipc cjdgkhkog0154adu57uwfpo96: jupyter completed 10ms
2018-02-09T23:32:40.705Z - info: node/services/browser-windows:: ipc cjdgkhlrn0157adu5j5vngg7k: getTabs completed 13ms
2018-02-09T23:32:40.748Z - info: node/services/browser-windows:: ipc cjdgkhlsw0159adu50yrxd4jp: jupyter completed 12ms
2018-02-09T23:32:40.753Z - info: node/services/browser-windows:: ipc cjdgkhlsy015aadu5tip64s42: jupyter completed 15ms
2018-02-09T23:32:40.770Z - info: node/services/browser-windows:: ipc cjdgkhlt6015badu5jee30ayp: jupyter completed 23ms
2018-02-09T23:32:40.773Z - info: node/services/browser-windows:: ipc cjdgkhlt7015cadu5jz8dfke8: jupyter completed 26ms
2018-02-09T23:32:42.703Z - info: node/services/browser-windows:: ipc cjdgkhnb8015fadu5vlda72z4: getTabs completed 11ms
2018-02-09T23:32:42.747Z - info: node/services/browser-windows:: ipc cjdgkhncf015hadu5szyn83qk: jupyter completed 12ms
2018-02-09T23:32:42.752Z - info: node/services/browser-windows:: ipc cjdgkhnch015iadu5of2mup52: jupyter completed 14ms
2018-02-09T23:32:42.764Z - info: node/services/browser-windows:: ipc cjdgkhnci015jadu50g3tpjzr: jupyter completed 26ms
2018-02-09T23:32:42.776Z - info: node/services/browser-windows:: ipc cjdgkhncl015kadu5t6pqbjo6: jupyter completed 35ms
2018-02-09T23:32:42.786Z - info: node/services/browser-windows:: ipc cjdgkhncm015ladu5lcwjfc68: jupyter completed 44ms
2018-02-09T23:51:31.648Z - info: node/services/browser-windows:: ipc cjdgl5ueo015padu5nbwmb98a: jupyter completed 14ms
2018-02-09T23:51:31.655Z - info: node/services/browser-windows:: ipc cjdgl5ueq015qadu50jse6or0: jupyter completed 21ms
2018-02-09T23:51:31.660Z - info: node/services/browser-windows:: ipc cjdgl5ueu015radu5gyd5datk: jupyter completed 22ms
2018-02-09T23:51:31.672Z - info: node/services/browser-windows:: ipc cjdgl5uev015sadu5c4mlpj7v: jupyter completed 33ms
2018-02-09T23:51:31.762Z - info: node/services/browser-windows:: ipc cjdgl5uhv015vadu553solgl3: jupyter completed 14ms
2018-02-09T23:51:31.771Z - info: node/services/browser-windows:: ipc cjdgl5uhx015wadu5p5cqj1ou: jupyter completed 22ms
2018-02-09T23:51:31.777Z - info: node/services/browser-windows:: ipc cjdgl5ui4015xadu5ofioqf3p: jupyter completed 21ms
2018-02-09T23:51:31.786Z - info: node/services/browser-windows:: ipc cjdgl5ui4015yadu503twhjgo: jupyter completed 30ms
2018-02-09T23:51:31.914Z - info: node/services/browser-windows:: ipc cjdgl5um50161adu5k81mt4zf: jupyter completed 13ms
2018-02-09T23:51:31.923Z - info: node/services/browser-windows:: ipc cjdgl5um50162adu55gnn4m49: jupyter completed 22ms
2018-02-09T23:51:31.938Z - info: node/services/browser-windows:: ipc cjdgl5umf0163adu5xztk6oz0: jupyter completed 27ms
2018-02-09T23:51:31.942Z - info: node/services/browser-windows:: ipc cjdgl5umg0164adu5upxwym5s: jupyter completed 30ms
2018-02-09T23:51:32.045Z - info: node/services/browser-windows:: ipc cjdgl5upv0167adu5581b9vsg: jupyter completed 10ms
2018-02-09T23:51:32.055Z - info: node/services/browser-windows:: ipc cjdgl5upw0168adu5gcgfk2uw: jupyter completed 18ms
2018-02-09T23:51:32.066Z - info: node/services/browser-windows:: ipc cjdgl5uq20169adu52h72m1mh: jupyter completed 24ms
2018-02-09T23:51:32.073Z - info: node/services/browser-windows:: ipc cjdgl5uq3016aadu5gzauythc: jupyter completed 30ms
2018-02-09T23:51:32.190Z - info: node/services/browser-windows:: ipc cjdgl5utx016dadu5u1drxb7b: jupyter completed 8ms
2018-02-09T23:51:32.199Z - info: node/services/browser-windows:: ipc cjdgl5uty016eadu5naddfzta: jupyter completed 17ms
2018-02-09T23:51:32.210Z - info: node/services/browser-windows:: ipc cjdgl5uu4016fadu55o60fw95: jupyter completed 22ms
2018-02-09T23:51:32.220Z - info: node/services/browser-windows:: ipc cjdgl5uu5016gadu5157oekl7: jupyter completed 31ms
2018-02-09T23:51:44.528Z - info: node/index:: deleted python kernel process reference cjdgjrzgc00nxadu5mzkd2r8f
2018-02-09T23:51:44.678Z - info: node/index:: python kernel process event cjdgjrzgc00nxadu5mzkd2r8f process 22824 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-09T23:51:44.692Z - info: node/services/processes:: removed child process { pid: 22824,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-09T23:51:44.692Z - info: node/index:: python kernel process closed cjdgjrzgc00nxadu5mzkd2r8f process 22824 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-09T23:51:44.693Z - info: node/index:: successfully killed python kernel process reference cjdgjrzgc00nxadu5mzkd2r8f
2018-02-09T23:51:44.696Z - info: node/services/browser-windows:: ipc cjdgl64hh016iadu5gpvr4vbf: close completed 3ms
2018-02-09T23:51:44.699Z - info: node/index:: creating new python kernel process creating python client
2018-02-09T23:51:44.700Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:51:44.701Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:51:44.701Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:51:44.702Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-09T23:51:44.703Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-09T23:51:44.711Z - info: node/services/processes:: added child process { pid: 22990,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-09T23:51:44.714Z - info: node/index:: created new python kernel process cjdgl64hn016jadu55hr88okx process 22990 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:51:47.656Z - info: node/index:: new python kernel process is ready cjdgl64hn016jadu55hr88okx process 22990 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-09T23:51:51.068Z - info: node/services/browser-windows:: ipc cjdgl69e9016oadu5100mgba6: jupyter completed 10ms
2018-02-09T23:51:51.076Z - info: node/services/browser-windows:: ipc cjdgl69ea016padu5hv1wer8s: jupyter completed 18ms
2018-02-09T23:51:51.092Z - info: node/services/browser-windows:: ipc cjdgl69eh016qadu5kziap8fh: jupyter completed 27ms
2018-02-09T23:51:51.098Z - info: node/services/browser-windows:: ipc cjdgl69ei016radu5csy6hc5q: jupyter completed 32ms
2018-02-09T23:51:51.185Z - info: node/services/browser-windows:: ipc cjdgl69hj016uadu5t46oyw1p: jupyter completed 9ms
2018-02-09T23:51:51.191Z - info: node/services/browser-windows:: ipc cjdgl69hk016vadu5yu84gm92: jupyter completed 15ms
2018-02-09T23:51:51.200Z - info: node/services/browser-windows:: ipc cjdgl69hq016wadu5t1mqwjfx: jupyter completed 17ms
2018-02-09T23:51:51.206Z - info: node/services/browser-windows:: ipc cjdgl69hr016xadu55hqavtf1: jupyter completed 23ms
2018-02-09T23:51:51.364Z - info: node/services/browser-windows:: ipc cjdgl69mk0170adu57z4882a7: jupyter completed 7ms
2018-02-09T23:51:51.371Z - info: node/services/browser-windows:: ipc cjdgl69ml0171adu5onxix4yw: jupyter completed 14ms
2018-02-09T23:51:51.377Z - info: node/services/browser-windows:: ipc cjdgl69mt0172adu58djq62l0: jupyter completed 12ms
2018-02-09T23:51:51.384Z - info: node/services/browser-windows:: ipc cjdgl69mu0173adu5ezww7x5f: jupyter completed 18ms
2018-02-09T23:51:51.509Z - info: node/services/browser-windows:: ipc cjdgl69qn0176adu50wemklcz: jupyter completed 6ms
2018-02-09T23:51:51.515Z - info: node/services/browser-windows:: ipc cjdgl69qo0177adu5v5ajhjtd: jupyter completed 11ms
2018-02-09T23:51:51.522Z - info: node/services/browser-windows:: ipc cjdgl69qv0178adu52y106boh: jupyter completed 11ms
2018-02-09T23:51:51.529Z - info: node/services/browser-windows:: ipc cjdgl69qw0179adu55crdn63p: jupyter completed 17ms
2018-02-09T23:51:51.656Z - info: node/services/browser-windows:: ipc cjdgl69uq017cadu5equqhyw1: jupyter completed 6ms
2018-02-09T23:51:51.662Z - info: node/services/browser-windows:: ipc cjdgl69ur017dadu5l1lsq0wg: jupyter completed 11ms
2018-02-09T23:51:51.670Z - info: node/services/browser-windows:: ipc cjdgl69uy017eadu5ejtctzt1: jupyter completed 12ms
2018-02-09T23:51:51.676Z - info: node/services/browser-windows:: ipc cjdgl69uz017fadu58pblbl91: jupyter completed 17ms
2018-02-09T23:52:20.637Z - info: node/services/browser-windows:: ipc cjdgl6w7l017iadu5yb7zsre5: getTabs completed 11ms
2018-02-09T23:52:20.670Z - info: node/services/browser-windows:: ipc cjdgl6w8h017kadu57ahwuqt3: jupyter completed 13ms
2018-02-09T23:52:20.675Z - info: node/services/browser-windows:: ipc cjdgl6w8k017ladu5fposwy0e: jupyter completed 15ms
2018-02-09T23:52:20.682Z - info: node/services/browser-windows:: ipc cjdgl6w8p017madu5kxz41dyx: jupyter completed 17ms
2018-02-09T23:52:20.690Z - info: node/services/browser-windows:: ipc cjdgl6w8q017nadu5kf34fh5x: jupyter completed 24ms
2018-02-09T23:53:40.876Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-09T23:57:04.320Z - info: node/services/browser-windows:: ipc cjdglcz3p018oadu5c5m2ps90: getTabs completed 8ms
2018-02-09T23:57:04.384Z - info: node/services/browser-windows:: ipc cjdglcz5i018qadu5msp0je17: jupyter completed 9ms
2018-02-09T23:57:04.388Z - info: node/services/browser-windows:: ipc cjdglcz5j018radu5xaxtnmjj: jupyter completed 13ms
2018-02-09T23:57:04.395Z - info: node/services/browser-windows:: ipc cjdglcz5n018sadu55zqjm17f: jupyter completed 16ms
2018-02-09T23:57:04.403Z - info: node/services/browser-windows:: ipc cjdglcz5o018tadu53a1fhktf: jupyter completed 23ms
2018-02-09T23:57:32.272Z - info: node/services/browser-windows:: ipc cjdgldko4018xadu5e0eydg54: jupyter completed 12ms
2018-02-09T23:57:32.278Z - info: node/services/browser-windows:: ipc cjdgldko5018yadu58pvit4xf: jupyter completed 17ms
2018-02-09T23:57:32.287Z - info: node/services/browser-windows:: ipc cjdgldkob018zadu5jdr6p6f9: jupyter completed 20ms
2018-02-09T23:57:32.295Z - info: node/services/browser-windows:: ipc cjdgldkog0190adu5qm5ul7kf: jupyter completed 22ms
2018-02-09T23:57:32.399Z - info: node/services/browser-windows:: ipc cjdgldkrq0193adu5b0spo0b3: jupyter completed 9ms
2018-02-09T23:57:32.406Z - info: node/services/browser-windows:: ipc cjdgldkrr0194adu54dweabkp: jupyter completed 15ms
2018-02-09T23:57:32.415Z - info: node/services/browser-windows:: ipc cjdgldkrx0195adu5gcjroh24: jupyter completed 17ms
2018-02-09T23:57:32.423Z - info: node/services/browser-windows:: ipc cjdgldkry0196adu5eh8a4op6: jupyter completed 25ms
2018-02-09T23:57:36.032Z - info: node/services/browser-windows:: ipc cjdgldnkn019badu5x0n4p18q: jupyter completed 9ms
2018-02-09T23:57:36.038Z - info: node/services/browser-windows:: ipc cjdgldnko019cadu56eewkxhy: jupyter completed 13ms
2018-02-09T23:57:36.182Z - info: node/services/browser-windows:: ipc cjdgldnop019dadu5lypxym41: jupyter completed 13ms
2018-02-09T23:57:36.185Z - info: node/services/browser-windows:: ipc cjdgldnou019eadu5w0vlgoto: jupyter completed 10ms
2018-02-09T23:57:36.192Z - info: node/services/browser-windows:: ipc cjdgldnov019fadu5tbbry9ki: jupyter completed 17ms
2018-02-09T23:57:46.365Z - info: node/services/browser-windows:: ipc cjdgldvjh019hadu5bq3r13sg: getTabs completed 16ms
2018-02-09T23:57:46.412Z - info: node/services/browser-windows:: ipc cjdgldvkw019jadu5f8szie64: jupyter completed 11ms
2018-02-09T23:57:46.419Z - info: node/services/browser-windows:: ipc cjdgldvl1019kadu5tdr3xsu8: jupyter completed 14ms
2018-02-09T23:57:46.437Z - info: node/services/browser-windows:: ipc cjdgldvlg019ladu5vd86ejde: jupyter completed 17ms
2018-02-09T23:57:46.445Z - info: node/services/browser-windows:: ipc cjdgldvlq019madu5sj4g7ljp: jupyter completed 15ms
2018-02-09T23:57:46.447Z - info: node/services/browser-windows:: ipc cjdgldvlq019nadu5p5l8gfwv: jupyter completed 17ms
2018-02-09T23:57:58.440Z - info: node/services/browser-windows:: ipc cjdgle4v4019padu56kfvmh4n: getTabs completed 8ms
2018-02-09T23:57:58.482Z - info: node/services/browser-windows:: ipc cjdgle4wb019radu5jfgly1ef: jupyter completed 7ms
2018-02-09T23:57:58.489Z - info: node/services/browser-windows:: ipc cjdgle4wc019sadu5eh0p4y93: jupyter completed 13ms
2018-02-09T23:57:58.980Z - info: node/services/browser-windows:: ipc cjdgle52k019tadu5bbashqmz: jupyter completed 280ms
2018-02-09T23:57:58.989Z - info: node/services/browser-windows:: ipc cjdgle52l019uadu5cfkebetw: jupyter completed 288ms
2018-02-09T23:57:58.995Z - info: node/services/browser-windows:: ipc cjdgle52l019vadu50u2822yy: jupyter completed 294ms
2018-02-09T23:59:09.453Z - info: node/services/browser-windows:: ipc cjdglfnn8019yadu5315jn4lo: getTabs completed 23ms
2018-02-09T23:59:09.508Z - info: node/services/browser-windows:: ipc cjdglfnp101a0adu54svxtpy6: jupyter completed 15ms
2018-02-09T23:59:09.516Z - info: node/services/browser-windows:: ipc cjdglfnp401a1adu59bf9n144: jupyter completed 20ms
2018-02-09T23:59:09.525Z - info: node/services/browser-windows:: ipc cjdglfnpf01a2adu5k6yllz5n: jupyter completed 18ms
2018-02-09T23:59:09.535Z - info: node/services/browser-windows:: ipc cjdglfnpf01a3adu5oppd7y1h: jupyter completed 27ms
2018-02-09T23:59:10.976Z - info: node/services/browser-windows:: ipc cjdglfotk01a6adu5c8o5iyc9: getTabs completed 24ms
2018-02-09T23:59:11.022Z - info: node/services/browser-windows:: ipc cjdglfova01a8adu5gdg5nxf7: jupyter completed 8ms
2018-02-09T23:59:11.036Z - info: node/services/browser-windows:: ipc cjdglfovl01a9adu567dzu1k5: jupyter completed 10ms
2018-02-09T23:59:11.135Z - info: node/services/browser-windows:: ipc cjdglfoyg01aaadu5z3bogzuf: jupyter completed 7ms
2018-02-09T23:59:11.139Z - info: node/services/browser-windows:: ipc cjdglfoyh01abadu5s33b1i6v: jupyter completed 10ms
2018-02-09T23:59:45.785Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdglgfox01adadu5m82x2tlc',
  '2': { type: 'SAVE_ACTIVE_FILE' },
  '3': 'mainWindow' }
2018-02-10T00:00:04.833Z - info: node/index:: deleted python kernel process reference cjdgl64hn016jadu55hr88okx
2018-02-10T00:00:04.982Z - info: node/index:: python kernel process event cjdgl64hn016jadu55hr88okx process 22990 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-10T00:00:04.996Z - info: node/services/processes:: removed child process { pid: 22990,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-10T00:00:04.997Z - info: node/index:: python kernel process closed cjdgl64hn016jadu55hr88okx process 22990 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-10T00:00:05.000Z - info: node/index:: successfully killed python kernel process reference cjdgl64hn016jadu55hr88okx
2018-02-10T00:00:05.004Z - info: node/services/browser-windows:: ipc cjdglguiv01aeadu5mh485mla: close completed 4ms
2018-02-10T00:00:05.006Z - info: node/index:: creating new python kernel process creating python client
2018-02-10T00:00:05.007Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T00:00:05.008Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T00:00:05.009Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T00:00:05.009Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T00:00:05.010Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-10T00:00:05.021Z - info: node/services/processes:: added child process { pid: 23043,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-10T00:00:05.025Z - info: node/index:: created new python kernel process cjdglguj201afadu5mhkvh9g3 process 23043 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T00:00:07.388Z - info: node/index:: new python kernel process is ready cjdglguj201afadu5mhkvh9g3 process 23043 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T00:00:22.750Z - info: node/services/browser-windows:: ipc cjdglh87l01ajadu5bnfidlcf: jupyter completed 13ms
2018-02-10T00:00:22.757Z - info: node/services/browser-windows:: ipc cjdglh87o01akadu5w0h4ds9s: jupyter completed 17ms
2018-02-10T00:00:22.767Z - info: node/services/browser-windows:: ipc cjdglh87t01aladu5dgabhwwl: jupyter completed 22ms
2018-02-10T00:00:22.778Z - info: node/services/browser-windows:: ipc cjdglh87u01amadu5l5d9uvh4: jupyter completed 31ms
2018-02-10T00:00:28.670Z - info: node/services/browser-windows:: ipc cjdglhcrv01apadu5rvuwigmw: getTabs completed 19ms
2018-02-10T00:00:28.717Z - info: node/services/browser-windows:: ipc cjdglhctf01aradu5v70rgfhj: jupyter completed 9ms
2018-02-10T00:00:28.722Z - info: node/services/browser-windows:: ipc cjdglhctg01asadu5ne7he6o3: jupyter completed 14ms
2018-02-10T00:00:28.734Z - info: node/services/browser-windows:: ipc cjdglhctj01atadu5re4b1t28: jupyter completed 23ms
2018-02-10T00:00:28.740Z - info: node/services/browser-windows:: ipc cjdglhctl01auadu5k9hehxqd: jupyter completed 27ms
2018-02-10T00:00:35.822Z - info: node/services/browser-windows:: ipc cjdglhiam01axadu5gjj1gh9y: getTabs completed 15ms
2018-02-10T00:00:35.866Z - info: node/services/browser-windows:: ipc cjdglhibz01azadu5wvhdm9ib: jupyter completed 11ms
2018-02-10T00:00:35.871Z - info: node/services/browser-windows:: ipc cjdglhic201b0adu5ammv6j1g: jupyter completed 13ms
2018-02-10T19:03:22.368Z - info: node/index:: deleted python kernel process reference cjdglguj201afadu5mhkvh9g3
2018-02-10T19:03:22.390Z - info: node/services/processes:: removed child process { pid: 23043,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-10T19:03:22.391Z - info: node/index:: python kernel process closed cjdglguj201afadu5mhkvh9g3 process 23043 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-10T19:03:22.414Z - info: node/index:: successfully killed python kernel process reference cjdglguj201afadu5mhkvh9g3
2018-02-10T19:03:22.417Z - info: node/services/browser-windows:: ipc cjdhqb4ml01b5adu5enzesbkl: close completed 3ms
2018-02-10T19:03:22.420Z - info: node/index:: creating new python kernel process creating python client
2018-02-10T19:03:22.421Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:22.422Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:22.422Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:22.422Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:22.423Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-10T19:03:22.468Z - info: node/services/processes:: added child process { pid: 24535,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-10T19:03:22.472Z - info: node/index:: created new python kernel process cjdhqb4ms01b6adu5aa4t2u31 process 24535 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:22.515Z - info: node/index:: deleted python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:22.703Z - info: node/index:: deleted python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:22.874Z - info: node/index:: deleted python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:31.656Z - info: node/index:: new python kernel process is ready cjdhqb4ms01b6adu5aa4t2u31 process 24535 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:32.436Z - info: node/index:: python kernel process event cjdhqb4ms01b6adu5aa4t2u31 process 24535 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-10T19:03:32.443Z - info: node/services/processes:: removed child process { pid: 24535,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-10T19:03:32.444Z - info: node/index:: python kernel process closed cjdhqb4ms01b6adu5aa4t2u31 process 24535 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-10T19:03:32.444Z - info: node/index:: successfully killed python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:32.445Z - info: node/index:: successfully killed python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:32.445Z - info: node/index:: successfully killed python kernel process reference cjdhqb4ms01b6adu5aa4t2u31
2018-02-10T19:03:32.447Z - info: node/services/browser-windows:: ipc cjdhqbcd801baadu5z83vmep3: close completed 3ms
2018-02-10T19:03:32.448Z - info: node/index:: creating new python kernel process creating python client
2018-02-10T19:03:32.449Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.450Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.450Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.450Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.451Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-10T19:03:32.457Z - info: node/services/processes:: added child process { pid: 24553,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-10T19:03:32.459Z - info: node/index:: created new python kernel process cjdhqbcdc01bbadu5ry0peonl process 24553 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:32.460Z - info: node/index:: creating new python kernel process creating python client
2018-02-10T19:03:32.462Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.462Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.463Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.464Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.466Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-10T19:03:32.486Z - info: node/services/processes:: added child process { pid: 24554,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-10T19:03:32.487Z - info: node/index:: created new python kernel process cjdhqbcdo01bcadu5z3jfbpaa process 24554 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:32.489Z - info: node/index:: creating new python kernel process creating python client
2018-02-10T19:03:32.489Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.490Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.491Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.492Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-10T19:03:32.493Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-10T19:03:32.508Z - info: node/services/processes:: added child process { pid: 24555,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-10T19:03:32.510Z - info: node/index:: created new python kernel process cjdhqbceh01bdadu5kckprrga process 24555 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:35.609Z - info: node/index:: new python kernel process is ready cjdhqbcdc01bbadu5ry0peonl process 24553 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:35.610Z - info: node/index:: new python kernel process is ready cjdhqbceh01bdadu5kckprrga process 24555 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:03:35.610Z - info: node/index:: new python kernel process is ready cjdhqbcdo01bcadu5z3jfbpaa process 24554 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-10T19:04:03.839Z - info: node/services/browser-windows:: ipc cjdhqc0ks01cgadu59gxx1bob: getTabs completed 19ms
2018-02-10T19:04:03.891Z - info: node/services/browser-windows:: ipc cjdhqc0me01ciadu5t9l7e1ar: jupyter completed 13ms
2018-02-10T19:04:03.897Z - info: node/services/browser-windows:: ipc cjdhqc0mh01cjadu5rrlbbepb: jupyter completed 15ms
2018-02-10T19:04:03.905Z - info: node/services/browser-windows:: ipc cjdhqc0mj01ckadu56t8f31fs: jupyter completed 22ms
2018-02-10T19:04:03.912Z - info: node/services/browser-windows:: ipc cjdhqc0mk01cladu5cn9ypr72: jupyter completed 28ms
2018-02-10T19:05:31.459Z - info: node/services/browser-windows:: ipc cjdhqdw6o01dgadu5g7fsn49a: getTabs completed 17ms
2018-02-10T19:05:31.535Z - info: node/services/browser-windows:: ipc cjdhqdw9301diadu56jejj39m: jupyter completed 8ms
2018-02-10T19:05:31.542Z - info: node/services/browser-windows:: ipc cjdhqdw9401djadu5dt4qap38: jupyter completed 14ms
2018-02-11T03:08:41.288Z - info: node/index:: deleted python kernel process reference cjdhqbceh01bdadu5kckprrga
2018-02-11T03:08:41.333Z - info: node/services/processes:: removed child process { pid: 24555,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T03:08:41.333Z - info: node/index:: python kernel process closed cjdhqbceh01bdadu5kckprrga process 24555 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T03:08:41.356Z - info: node/index:: successfully killed python kernel process reference cjdhqbceh01bdadu5kckprrga
2018-02-11T03:08:41.359Z - info: node/services/browser-windows:: ipc cjdi7n8y301dladu5rhe6stwj: close completed 4ms
2018-02-11T03:08:41.363Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T03:08:41.363Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:08:41.364Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:08:41.365Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:08:41.366Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:08:41.366Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T03:08:41.387Z - info: node/services/processes:: added child process { pid: 25113,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T03:08:41.391Z - info: node/index:: created new python kernel process cjdi7n8ya01dmadu5vkd900fx process 25113 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T03:08:51.271Z - info: node/index:: new python kernel process is ready cjdi7n8ya01dmadu5vkd900fx process 25113 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T03:08:51.959Z - info: node/services/browser-windows:: ipc cjdi7nh4a01dsadu51dut5ky0: jupyter completed 13ms
2018-02-11T03:08:51.970Z - info: node/services/browser-windows:: ipc cjdi7nh4b01dtadu5bu24p86m: jupyter completed 23ms
2018-02-11T03:08:52.002Z - info: node/services/browser-windows:: ipc cjdi7nh4i01duadu5rodbdh02: jupyter completed 48ms
2018-02-11T03:08:52.032Z - info: node/services/browser-windows:: ipc cjdi7nh4k01dvadu5y8xtog0y: jupyter completed 75ms
2018-02-11T03:08:52.040Z - info: node/services/browser-windows:: ipc cjdi7nh4l01dwadu5k7jgidnq: jupyter completed 83ms
2018-02-11T03:08:52.046Z - info: node/services/browser-windows:: ipc cjdi7nh4r01dxadu5nq0urm1d: jupyter completed 83ms
2018-02-11T03:08:52.052Z - info: node/services/browser-windows:: ipc cjdi7nh4s01dyadu5oabv37kq: jupyter completed 88ms
2018-02-11T03:08:52.067Z - info: node/services/browser-windows:: ipc cjdi7nh4s01dzadu5m27qsjiq: jupyter completed 102ms
2018-02-11T03:09:39.587Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T03:09:47.129Z - info: node/services/browser-windows:: ipc cjdi7ono601egadu55oi4r6u1: getTabs completed 33ms
2018-02-11T03:09:47.183Z - info: node/services/browser-windows:: ipc cjdi7onqd01eiadu5znf7uhyk: jupyter completed 10ms
2018-02-11T03:09:47.189Z - info: node/services/browser-windows:: ipc cjdi7onqe01ejadu5j3nfka07: jupyter completed 14ms
2018-02-11T03:09:47.195Z - info: node/services/browser-windows:: ipc cjdi7onqi01ekadu5au3rfp4x: jupyter completed 17ms
2018-02-11T03:09:47.204Z - info: node/services/browser-windows:: ipc cjdi7onqk01eladu5ugobyuuh: jupyter completed 24ms
2018-02-11T03:09:49.058Z - info: node/services/browser-windows:: ipc cjdi7op6601eoadu5qwn0whvq: getTabs completed 20ms
2018-02-11T03:09:49.104Z - info: node/services/browser-windows:: ipc cjdi7op7s01eqadu58rv2jiu1: jupyter completed 7ms
2018-02-11T03:09:49.109Z - info: node/services/browser-windows:: ipc cjdi7op7s01eradu5u83lx310: jupyter completed 13ms
2018-02-11T03:09:49.331Z - info: node/services/browser-windows:: ipc cjdi7opdn01esadu5oduzs4fn: jupyter completed 23ms
2018-02-11T03:09:49.337Z - info: node/services/browser-windows:: ipc cjdi7opdn01etadu5iadfnlja: jupyter completed 30ms
2018-02-11T03:09:49.342Z - info: node/services/browser-windows:: ipc cjdi7opdo01euadu5gduhngcw: jupyter completed 33ms
2018-02-11T03:18:34.478Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T03:18:43.185Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T03:18:52.525Z - info: node/services/browser-windows:: ipc cjdi80ci701exadu58sqblemf: getTabs completed 30ms
2018-02-11T03:18:52.590Z - info: node/services/browser-windows:: ipc cjdi80ckh01ezadu57thszyz9: jupyter completed 13ms
2018-02-11T03:18:52.646Z - info: node/services/browser-windows:: ipc cjdi80cm801f0adu5v9p2j34v: jupyter completed 6ms
2018-02-11T03:18:52.941Z - info: node/services/browser-windows:: ipc cjdi80cqu01f1adu5tpaaozk8: jupyter completed 135ms
2018-02-11T03:18:52.945Z - info: node/services/browser-windows:: ipc cjdi80cr801f2adu5xvjinuhr: jupyter completed 125ms
2018-02-11T03:18:52.956Z - info: node/services/browser-windows:: ipc cjdi80cra01f3adu5flbyx52u: jupyter completed 133ms
2018-02-11T03:19:37.998Z - info: node/services/browser-windows:: ipc cjdi81blm01f6adu5zxrtc5a8: getTabs completed 19ms
2018-02-11T03:19:38.050Z - info: node/services/browser-windows:: ipc cjdi81bnf01f8adu5gs518eaf: jupyter completed 6ms
2018-02-11T03:19:38.055Z - info: node/services/browser-windows:: ipc cjdi81bnf01f9adu5lgfspmur: jupyter completed 12ms
2018-02-11T03:19:38.118Z - info: node/services/browser-windows:: ipc cjdi81bp801faadu53rx93zki: jupyter completed 8ms
2018-02-11T03:19:38.124Z - info: node/services/browser-windows:: ipc cjdi81bp901fbadu50sxves9s: jupyter completed 14ms
2018-02-11T03:19:50.925Z - info: node/services/browser-windows:: ipc cjdi81lks01feadu5qzc9xps3: getTabs completed 17ms
2018-02-11T03:19:50.972Z - info: node/services/browser-windows:: ipc cjdi81lm901fgadu595wtw1m7: jupyter completed 10ms
2018-02-11T03:19:50.979Z - info: node/services/browser-windows:: ipc cjdi81lma01fhadu5q96eby3x: jupyter completed 17ms
2018-02-11T03:19:51.000Z - info: node/services/browser-windows:: ipc cjdi81lmr01fiadu5neap81kw: jupyter completed 21ms
2018-02-11T03:19:51.010Z - info: node/services/browser-windows:: ipc cjdi81ln301fjadu5exbuqtwf: jupyter completed 19ms
2018-02-11T03:19:51.019Z - info: node/services/browser-windows:: ipc cjdi81ln401fkadu5merk17qs: jupyter completed 27ms
2018-02-11T03:19:54.457Z - info: node/services/browser-windows:: ipc cjdi81oau01fnadu5kyjiwsgx: getTabs completed 19ms
2018-02-11T03:19:54.507Z - info: node/services/browser-windows:: ipc cjdi81och01fpadu54ogbtwss: jupyter completed 9ms
2018-02-11T03:19:54.515Z - info: node/services/browser-windows:: ipc cjdi81oci01fqadu5g1znwvya: jupyter completed 17ms
2018-02-11T03:19:54.537Z - info: node/services/browser-windows:: ipc cjdi81ock01fradu59k46ps7x: jupyter completed 37ms
2018-02-11T03:19:54.541Z - info: node/services/browser-windows:: ipc cjdi81ocl01fsadu5czc92ews: jupyter completed 40ms
2018-02-11T03:19:55.407Z - info: node/services/browser-windows:: ipc cjdi81p1f01fuadu5oru8l4nf: getTabs completed 12ms
2018-02-11T03:19:55.457Z - info: node/services/browser-windows:: ipc cjdi81p2u01fwadu5hrhtbnla: jupyter completed 11ms
2018-02-11T03:19:55.463Z - info: node/services/browser-windows:: ipc cjdi81p2v01fxadu53ns5f2fm: jupyter completed 16ms
2018-02-11T03:19:55.548Z - info: node/services/browser-windows:: ipc cjdi81p5k01fyadu5uipgy9xs: jupyter completed 4ms
2018-02-11T03:19:55.555Z - info: node/services/browser-windows:: ipc cjdi81p5k01fzadu5t4ao4cm9: jupyter completed 11ms
2018-02-11T03:20:21.013Z - info: node/index:: deleted python kernel process reference cjdi7n8ya01dmadu5vkd900fx
2018-02-11T03:20:21.116Z - info: node/index:: python kernel process event cjdi7n8ya01dmadu5vkd900fx process 25113 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-11T03:20:21.131Z - info: node/services/processes:: removed child process { pid: 25113,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T03:20:21.131Z - info: node/index:: python kernel process closed cjdi7n8ya01dmadu5vkd900fx process 25113 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T03:20:21.132Z - info: node/index:: successfully killed python kernel process reference cjdi7n8ya01dmadu5vkd900fx
2018-02-11T03:20:21.135Z - info: node/services/browser-windows:: ipc cjdi828wc01gfadu5m1hdeegi: close completed 3ms
2018-02-11T03:20:21.138Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T03:20:21.139Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:20:21.141Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:20:21.141Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:20:21.142Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T03:20:21.143Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T03:20:21.152Z - info: node/services/processes:: added child process { pid: 25247,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T03:20:21.175Z - info: node/index:: created new python kernel process cjdi828wi01ggadu5lqxb2mrz process 25247 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T03:20:26.838Z - info: node/index:: new python kernel process is ready cjdi828wi01ggadu5lqxb2mrz process 25247 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T03:20:27.506Z - info: node/services/browser-windows:: ipc cjdi82dt501gkadu51i1s5gpl: jupyter completed 9ms
2018-02-11T03:20:27.513Z - info: node/services/browser-windows:: ipc cjdi82dt601gladu5per95q8y: jupyter completed 15ms
2018-02-11T03:20:27.522Z - info: node/services/browser-windows:: ipc cjdi82dtc01gmadu530coowvl: jupyter completed 18ms
2018-02-11T03:20:27.530Z - info: node/services/browser-windows:: ipc cjdi82dtd01gnadu5q1qf5mr2: jupyter completed 25ms
2018-02-11T03:20:40.360Z - info: node/services/browser-windows:: ipc cjdi82nq601gqadu56stix0ba: getTabs completed 10ms
2018-02-11T03:20:40.395Z - info: node/services/browser-windows:: ipc cjdi82nr601gsadu5293evjun: jupyter completed 8ms
2018-02-11T03:20:40.402Z - info: node/services/browser-windows:: ipc cjdi82nr801gtadu541hhrls3: jupyter completed 14ms
2018-02-11T03:20:40.545Z - info: node/services/browser-windows:: ipc cjdi82nv901guadu5p3f3g238: jupyter completed 12ms
2018-02-11T03:20:40.551Z - info: node/services/browser-windows:: ipc cjdi82nvd01gvadu5w6ol3iof: jupyter completed 14ms
2018-02-11T03:20:40.555Z - info: node/services/browser-windows:: ipc cjdi82nve01gwadu5du9om7fm: jupyter completed 17ms
2018-02-11T03:20:44.691Z - info: node/services/browser-windows:: ipc cjdi82r2f01gzadu5ztaqgpt3: getTabs completed 12ms
2018-02-11T03:20:44.721Z - info: node/services/browser-windows:: ipc cjdi82r3a01h1adu5mrn4ph8l: jupyter completed 10ms
2018-02-11T03:20:44.734Z - info: node/services/browser-windows:: ipc cjdi82r3t01h2adu5keby63ma: jupyter completed 5ms
2018-02-11T03:20:44.743Z - info: node/services/browser-windows:: ipc cjdi82r4001h3adu586q9xpnt: jupyter completed 7ms
2018-02-11T03:20:44.752Z - info: node/services/browser-windows:: ipc cjdi82r4101h4adu5ycq0u0pd: jupyter completed 14ms
2018-02-11T03:20:47.182Z - info: node/services/browser-windows:: ipc cjdi82szq01h7adu54q3q4zrj: getTabs completed 8ms
2018-02-11T03:20:47.211Z - info: node/services/browser-windows:: ipc cjdi82t0l01h9adu5gnw33pn8: jupyter completed 5ms
2018-02-11T03:20:47.219Z - info: node/services/browser-windows:: ipc cjdi82t0m01haadu5cb06ksau: jupyter completed 13ms
2018-02-11T03:20:47.255Z - info: node/services/browser-windows:: ipc cjdi82t1u01hbadu5qw0c5mrf: jupyter completed 4ms
2018-02-11T03:20:47.260Z - info: node/services/browser-windows:: ipc cjdi82t1v01hcadu5rnhp9ky6: jupyter completed 9ms
2018-02-11T15:46:31.876Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T15:46:34.839Z - info: node/index:: deleted python kernel process reference cjdi828wi01ggadu5lqxb2mrz
2018-02-11T15:46:36.050Z - info: node/index:: python kernel process event cjdi828wi01ggadu5lqxb2mrz process 25247 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-11T15:46:36.064Z - info: node/services/processes:: removed child process { pid: 25247,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T15:46:36.064Z - info: node/index:: python kernel process closed cjdi828wi01ggadu5lqxb2mrz process 25247 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T15:46:36.067Z - info: node/index:: successfully killed python kernel process reference cjdi828wi01ggadu5lqxb2mrz
2018-02-11T15:46:36.070Z - info: node/services/browser-windows:: ipc cjdiypxgi01headu5ckalbc7o: close completed 4ms
2018-02-11T15:46:36.087Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T15:46:36.088Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T15:46:36.089Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T15:46:36.089Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T15:46:36.090Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T15:46:36.091Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T15:46:36.166Z - info: node/services/processes:: added child process { pid: 26038,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T15:46:36.171Z - info: node/index:: created new python kernel process cjdiypxh201hfadu5icdpx38x process 26038 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T15:46:48.440Z - info: node/index:: new python kernel process is ready cjdiypxh201hfadu5icdpx38x process 26038 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T15:46:49.170Z - info: node/services/browser-windows:: ipc cjdiyq7k101hladu5fluav29s: jupyter completed 17ms
2018-02-11T15:46:49.180Z - info: node/services/browser-windows:: ipc cjdiyq7k101hmadu5tkv3frcy: jupyter completed 27ms
2018-02-11T15:46:49.191Z - info: node/services/browser-windows:: ipc cjdiyq7k901hnadu5jtxozi0i: jupyter completed 30ms
2018-02-11T15:46:49.216Z - info: node/services/browser-windows:: ipc cjdiyq7ka01hoadu5jsxsvme0: jupyter completed 54ms
2018-02-11T15:46:49.223Z - info: node/services/browser-windows:: ipc cjdiyq7kb01hpadu5k4oe6ud8: jupyter completed 60ms
2018-02-11T15:46:49.234Z - info: node/services/browser-windows:: ipc cjdiyq7kh01hqadu5vop156d4: jupyter completed 65ms
2018-02-11T15:46:49.246Z - info: node/services/browser-windows:: ipc cjdiyq7ki01hradu59d0mgix6: jupyter completed 76ms
2018-02-11T15:46:49.252Z - info: node/services/browser-windows:: ipc cjdiyq7kj01hsadu52o5jkopw: jupyter completed 81ms
2018-02-11T15:47:13.171Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T16:09:58.896Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-11T16:11:18.387Z - info: node/services/browser-windows:: ipc cjdizlp7201idadu5p0cvmyql: getTabs completed 35ms
2018-02-11T16:11:18.454Z - info: node/services/browser-windows:: ipc cjdizlp9p01ifadu5ms0hmpww: jupyter completed 9ms
2018-02-11T16:11:18.461Z - info: node/services/browser-windows:: ipc cjdizlp9s01igadu5omnhzxbd: jupyter completed 13ms
2018-02-11T16:11:18.466Z - info: node/services/browser-windows:: ipc cjdizlp9z01ihadu5kgsgxaga: jupyter completed 11ms
2018-02-11T16:11:18.474Z - info: node/services/browser-windows:: ipc cjdizlpa001iiadu55ffi8ixx: jupyter completed 18ms
2018-02-11T16:11:20.091Z - info: node/services/browser-windows:: ipc cjdizlqig01iladu5nfihrgxu: getTabs completed 35ms
2018-02-11T16:11:20.130Z - info: node/services/browser-windows:: ipc cjdizlqk301inadu5apoezllp: jupyter completed 15ms
2018-02-11T16:11:20.138Z - info: node/services/browser-windows:: ipc cjdizlqk401ioadu5m9ym4ozi: jupyter completed 21ms
2018-02-11T16:11:20.157Z - info: node/services/browser-windows:: ipc cjdizlql201ipadu5ymyticz5: jupyter completed 7ms
2018-02-11T16:11:20.163Z - info: node/services/browser-windows:: ipc cjdizlql201iqadu5mxrsmjm9: jupyter completed 13ms
2018-02-11T16:11:34.112Z - info: node/index:: deleted python kernel process reference cjdiypxh201hfadu5icdpx38x
2018-02-11T16:11:34.893Z - info: node/index:: python kernel process event cjdiypxh201hfadu5icdpx38x process 26038 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-11T16:11:34.901Z - info: node/services/processes:: removed child process { pid: 26038,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T16:11:34.901Z - info: node/index:: python kernel process closed cjdiypxh201hfadu5icdpx38x process 26038 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T16:11:34.903Z - info: node/index:: successfully killed python kernel process reference cjdiypxh201hfadu5icdpx38x
2018-02-11T16:11:34.905Z - info: node/services/browser-windows:: ipc cjdizm1yu01itadu548v895it: close completed 3ms
2018-02-11T16:11:34.906Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T16:11:34.907Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:11:34.908Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:11:34.909Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:11:34.943Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:11:34.943Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T16:11:34.953Z - info: node/services/processes:: added child process { pid: 26077,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T16:11:34.990Z - info: node/index:: created new python kernel process cjdizm1yy01iuadu5t1b7851l process 26077 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:11:37.755Z - info: node/index:: new python kernel process is ready cjdizm1yy01iuadu5t1b7851l process 26077 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:22:11.135Z - info: node/index:: deleted python kernel process reference cjdizm1yy01iuadu5t1b7851l
2018-02-11T16:22:11.420Z - info: node/index:: python kernel process event cjdizm1yy01iuadu5t1b7851l process 26077 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-11T16:22:11.428Z - info: node/services/processes:: removed child process { pid: 26077,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T16:22:11.428Z - info: node/index:: python kernel process closed cjdizm1yy01iuadu5t1b7851l process 26077 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T16:22:11.432Z - info: node/index:: successfully killed python kernel process reference cjdizm1yy01iuadu5t1b7851l
2018-02-11T16:22:11.435Z - info: node/services/browser-windows:: ipc cjdizzp4701iwadu5xd928sel: close completed 4ms
2018-02-11T16:22:11.436Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T16:22:11.437Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:11.438Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:11.438Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:11.439Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:11.439Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T16:22:11.449Z - info: node/services/processes:: added child process { pid: 26107,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T16:22:11.454Z - info: node/index:: created new python kernel process cjdizzp4c01ixadu5gh31roxi process 26107 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:22:13.804Z - info: node/index:: new python kernel process is ready cjdizzp4c01ixadu5gh31roxi process 26107 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:22:14.563Z - info: node/services/browser-windows:: ipc cjdizzriw01j2adu5lky0kq4y: jupyter completed 11ms
2018-02-11T16:22:14.569Z - info: node/services/browser-windows:: ipc cjdizzrix01j3adu535sf5cjp: jupyter completed 16ms
2018-02-11T16:22:14.585Z - info: node/services/browser-windows:: ipc cjdizzrj101j4adu52xwtfxvq: jupyter completed 26ms
2018-02-11T16:22:14.590Z - info: node/services/browser-windows:: ipc cjdizzrj201j5adu5in751y2s: jupyter completed 32ms
2018-02-11T16:22:15.036Z - info: node/services/browser-windows:: ipc cjdizzrw201j8adu58litao7w: jupyter completed 9ms
2018-02-11T16:22:15.042Z - info: node/services/browser-windows:: ipc cjdizzrw301j9adu59juabkjl: jupyter completed 15ms
2018-02-11T16:22:15.048Z - info: node/services/browser-windows:: ipc cjdizzrw901jaadu59y2qjpn4: jupyter completed 15ms
2018-02-11T16:22:15.058Z - info: node/services/browser-windows:: ipc cjdizzrwa01jbadu5asssnzun: jupyter completed 24ms
2018-02-11T16:22:18.489Z - info: node/index:: deleted python kernel process reference cjdizzp4c01ixadu5gh31roxi
2018-02-11T16:22:18.605Z - info: node/index:: python kernel process event cjdizzp4c01ixadu5gh31roxi process 26107 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-11T16:22:18.615Z - info: node/services/processes:: removed child process { pid: 26107,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-11T16:22:18.616Z - info: node/index:: python kernel process closed cjdizzp4c01ixadu5gh31roxi process 26107 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-11T16:22:18.616Z - info: node/index:: successfully killed python kernel process reference cjdizzp4c01ixadu5gh31roxi
2018-02-11T16:22:18.619Z - info: node/services/browser-windows:: ipc cjdizzuns01jdadu51tojm0dn: close completed 3ms
2018-02-11T16:22:18.620Z - info: node/index:: creating new python kernel process creating python client
2018-02-11T16:22:18.620Z - info: node/kernels/python/client:: createPythonScriptProcess { cmd: 'python',
  cwd: '~',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:18.621Z - info: node/kernels/python/client:: createPythonScriptProcess1 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:18.642Z - info: node/kernels/python/client:: createPythonScriptProcess2 { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:18.642Z - info: node/kernels/python/client:: getPythonCommandOptions { cmd: 'python',
  cwd: '/Users/diamac',
  env: 
   { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
     CLICOLOR: 1,
     COMMAND_MODE: 'unix2003',
     GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
     HOME: '/Users/diamac',
     LOGNAME: 'diamac',
     PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
     PWD: '/',
     PYTHONIOENCODING: 'utf-8',
     PYTHONUNBUFFERED: '1',
     SHELL: '/bin/bash',
     SHLVL: '1',
     SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
     TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
     USER: 'diamac',
     XPC_FLAGS: '0x0',
     XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
     _: '/usr/bin/env',
     __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
  kernelName: 'python3' }
2018-02-11T16:22:18.642Z - info: node/kernels/python/language:: setDefaultEnvVars { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
  CLICOLOR: 1,
  COMMAND_MODE: 'unix2003',
  GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
  HOME: '/Users/diamac',
  LOGNAME: 'diamac',
  PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
  PWD: '/',
  PYTHONIOENCODING: 'utf-8',
  PYTHONUNBUFFERED: '1',
  SHELL: '/bin/bash',
  SHLVL: '1',
  SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
  TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
  USER: 'diamac',
  XPC_FLAGS: '0x0',
  XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
  _: '/usr/bin/env',
  __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' }
2018-02-11T16:22:18.695Z - info: node/services/processes:: added child process { pid: 26125,
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 3 children running
2018-02-11T16:22:18.696Z - info: node/index:: created new python kernel process cjdizzunv01jeadu55vz3ysw4 process 26125 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:22:20.941Z - info: node/index:: new python kernel process is ready cjdizzunv01jeadu55vz3ysw4 process 26125 { cmd: 'python', cwd: '~', kernelName: 'python3' }
2018-02-11T16:22:22.091Z - info: node/services/browser-windows:: ipc cjdizzxbz01jiadu5nt4nzf5c: jupyter completed 12ms
2018-02-11T16:22:22.097Z - info: node/services/browser-windows:: ipc cjdizzxc001jjadu5axua28ya: jupyter completed 17ms
2018-02-11T16:22:22.107Z - info: node/services/browser-windows:: ipc cjdizzxc601jkadu5013zinjl: jupyter completed 21ms
2018-02-11T16:22:22.118Z - info: node/services/browser-windows:: ipc cjdizzxc701jladu5gkwl7e03: jupyter completed 31ms
2018-02-11T16:22:22.272Z - info: node/services/browser-windows:: ipc cjdizzxh001joadu5ur2sqmgl: jupyter completed 12ms
2018-02-11T16:22:22.279Z - info: node/services/browser-windows:: ipc cjdizzxh101jpadu5g7gyi1hx: jupyter completed 18ms
2018-02-11T16:22:22.287Z - info: node/services/browser-windows:: ipc cjdizzxh701jqadu5ysxh4dgy: jupyter completed 20ms
2018-02-11T16:22:22.294Z - info: node/services/browser-windows:: ipc cjdizzxh801jradu5eu3xs88x: jupyter completed 26ms
2018-02-11T16:22:24.470Z - info: node/services/browser-windows:: ipc cjdizzz6501juadu5a9oryhn1: getTabs completed 9ms
2018-02-11T16:22:24.526Z - info: node/services/browser-windows:: ipc cjdizzz7901jwadu5xgmoig2v: jupyter completed 25ms
2018-02-11T16:22:24.531Z - info: node/services/browser-windows:: ipc cjdizzz7a01jxadu5dwt6yclb: jupyter completed 29ms
2018-02-11T16:22:24.538Z - info: node/services/browser-windows:: ipc cjdizzz7g01jyadu5ow1217xz: jupyter completed 29ms
2018-02-11T16:22:24.548Z - info: node/services/browser-windows:: ipc cjdizzz7i01jzadu5pxau5pem: jupyter completed 38ms
2018-02-11T16:22:25.957Z - info: node/services/browser-windows:: ipc cjdj000be01k2adu5pk5f0xq8: getTabs completed 11ms
2018-02-11T16:22:26.012Z - info: node/services/browser-windows:: ipc cjdj000d201k4adu53ap35dbo: jupyter completed 6ms
2018-02-11T16:22:26.017Z - info: node/services/browser-windows:: ipc cjdj000d301k5adu5q0s6o962: jupyter completed 10ms
2018-02-11T16:23:21.597Z - info: node/services/browser-windows:: ipc cjdj0178v01k6adu5eo8iune1: jupyter completed 12ms
2018-02-11T16:23:21.648Z - info: node/services/browser-windows:: ipc cjdj0178x01k7adu51lld8qf6: jupyter completed 63ms
2018-02-11T19:20:33.662Z - info: node/services/browser-windows:: ipc cjdj6d2zm01k9adu5okofbwe8: getTabs completed 25ms
2018-02-11T19:20:33.834Z - info: node/services/browser-windows:: ipc cjdj6d34y01kbadu5tg5jyben: jupyter completed 7ms
2018-02-11T19:20:33.853Z - info: node/services/browser-windows:: ipc cjdj6d35i01kcadu5560ujkhr: jupyter completed 7ms
2018-02-11T19:20:33.860Z - info: node/services/browser-windows:: ipc cjdj6d35n01kdadu5qj877eak: jupyter completed 9ms
2018-02-11T19:20:33.868Z - info: node/services/browser-windows:: ipc cjdj6d35o01keadu5bumm1r8i: jupyter completed 15ms
2018-02-11T19:20:53.441Z - info: node/services/browser-windows:: ipc cjdj6di8s01kgadu50ddo5m82: getTabs completed 37ms
2018-02-11T19:20:53.485Z - info: node/services/browser-windows:: ipc cjdj6diaq01kiadu58gko1o68: jupyter completed 11ms
2018-02-11T19:20:54.691Z - info: node/services/browser-windows:: ipc cjdj6dj8d01kjadu5tqrye1jl: jupyter completed 5ms
2018-02-11T19:20:54.801Z - info: node/services/browser-windows:: ipc cjdj6djbh01kkadu5zvfbvgbx: jupyter completed 4ms
2018-02-11T19:20:54.809Z - info: node/services/browser-windows:: ipc cjdj6djbh01kladu5ebq28dt4: jupyter completed 12ms
2018-02-11T19:21:06.621Z - info: node/services/browser-windows:: ipc cjdj6dsf701knadu5jr1ulr5p: getTabs completed 26ms
2018-02-11T19:21:06.767Z - info: node/services/browser-windows:: ipc cjdj6dsi601kpadu5dla9m16u: jupyter completed 65ms
2018-02-11T19:21:06.770Z - info: node/services/browser-windows:: ipc cjdj6dsi701kqadu5e9668l4k: jupyter completed 66ms
2018-02-11T19:21:06.775Z - info: node/services/browser-windows:: ipc cjdj6dsjy01kradu55rd16i99: jupyter completed 9ms
2018-02-11T19:21:06.783Z - info: node/services/browser-windows:: ipc cjdj6dsk301ksadu55p15k8kj: jupyter completed 12ms
2018-02-11T19:21:08.975Z - info: node/services/browser-windows:: ipc cjdj6du9101kwadu59nllwjfn: jupyter completed 10ms
2018-02-11T19:21:08.981Z - info: node/services/browser-windows:: ipc cjdj6du9201kxadu5xqfod8xc: jupyter completed 15ms
2018-02-11T19:21:08.993Z - info: node/services/browser-windows:: ipc cjdj6du9901kyadu5vbmfd0ql: jupyter completed 20ms
2018-02-11T19:21:09.001Z - info: node/services/browser-windows:: ipc cjdj6du9901kzadu5jv2t87dp: jupyter completed 28ms
2018-02-11T19:21:09.647Z - info: node/services/browser-windows:: ipc cjdj6durq01l2adu58098jn0r: jupyter completed 9ms
2018-02-11T19:21:09.656Z - info: node/services/browser-windows:: ipc cjdj6durr01l3adu58zozgj08: jupyter completed 17ms
2018-02-11T19:21:09.663Z - info: node/services/browser-windows:: ipc cjdj6durx01l4adu5pqf84hho: jupyter completed 18ms
2018-02-11T19:21:09.672Z - info: node/services/browser-windows:: ipc cjdj6dury01l5adu5ucspq9cg: jupyter completed 26ms
2018-02-11T19:21:22.725Z - info: node/services/browser-windows:: ipc cjdj6e4ul01l8adu5qg0inna2: getTabs completed 24ms
2018-02-11T19:21:22.834Z - info: node/services/browser-windows:: ipc cjdj6e4y201laadu51iamgzi6: jupyter completed 8ms
2018-02-11T19:21:22.891Z - info: node/services/browser-windows:: ipc cjdj6e4zq01lbadu5bk86q7bm: jupyter completed 5ms
2018-02-11T19:21:23.529Z - info: node/services/browser-windows:: ipc cjdj6e5hg01lcadu5qejchxhd: jupyter completed 5ms
2018-02-11T19:21:23.538Z - info: node/services/browser-windows:: ipc cjdj6e5hh01ldadu5c9k9prpg: jupyter completed 13ms
2018-02-11T19:21:25.757Z - info: node/services/browser-windows:: ipc cjdj6e77901lhadu58b6sgiwp: jupyter completed 8ms
2018-02-11T19:21:25.765Z - info: node/services/browser-windows:: ipc cjdj6e77a01liadu5x1qkcmaq: jupyter completed 15ms
2018-02-11T19:21:25.774Z - info: node/services/browser-windows:: ipc cjdj6e77g01ljadu5m2us1016: jupyter completed 16ms
2018-02-11T19:21:25.785Z - info: node/services/browser-windows:: ipc cjdj6e77i01lkadu5hcam4nze: jupyter completed 26ms
2018-02-11T19:21:26.365Z - info: node/services/browser-windows:: ipc cjdj6e7o401lnadu571pna7ht: jupyter completed 8ms
2018-02-11T19:21:26.370Z - info: node/services/browser-windows:: ipc cjdj6e7o401loadu5yvhq8te4: jupyter completed 13ms
2018-02-11T19:21:26.380Z - info: node/services/browser-windows:: ipc cjdj6e7oc01lpadu5n6hdag3x: jupyter completed 16ms
2018-02-11T19:21:26.404Z - info: node/services/browser-windows:: ipc cjdj6e7od01lqadu5n6rmzqgb: jupyter completed 38ms
2018-02-11T19:21:30.216Z - info: node/services/browser-windows:: ipc cjdj6ean101ltadu57eli786g: getTabs completed 11ms
2018-02-11T19:21:30.321Z - info: node/services/browser-windows:: ipc cjdj6eapo01lvadu5ide55rpv: jupyter completed 21ms
2018-02-11T19:21:30.351Z - info: node/services/browser-windows:: ipc cjdj6eaqa01lwadu51mv9a2wz: jupyter completed 29ms
2018-02-11T19:21:30.356Z - info: node/services/browser-windows:: ipc cjdj6eaqa01lxadu5q33ebt4b: jupyter completed 34ms
2018-02-11T19:21:30.364Z - info: node/services/browser-windows:: ipc cjdj6eaqa01lyadu5j6s9s8wn: jupyter completed 42ms
2018-02-11T19:21:31.442Z - info: node/services/browser-windows:: ipc cjdj6ebl601m2adu5tzzxa70s: jupyter completed 8ms
2018-02-11T19:21:31.450Z - info: node/services/browser-windows:: ipc cjdj6ebl701m3adu5vz2loj6a: jupyter completed 15ms
2018-02-11T19:21:31.458Z - info: node/services/browser-windows:: ipc cjdj6eble01m4adu5hry333mb: jupyter completed 16ms
2018-02-11T19:21:31.467Z - info: node/services/browser-windows:: ipc cjdj6eblg01m5adu53d119s3q: jupyter completed 23ms
2018-02-11T19:21:31.885Z - info: node/services/browser-windows:: ipc cjdj6ebxh01m8adu5f5tqbauz: jupyter completed 7ms
2018-02-11T19:21:31.892Z - info: node/services/browser-windows:: ipc cjdj6ebxi01m9adu5ylyq7251: jupyter completed 14ms
2018-02-11T19:21:31.903Z - info: node/services/browser-windows:: ipc cjdj6ebxq01maadu5n4jkgpin: jupyter completed 17ms
2018-02-11T19:21:31.907Z - info: node/services/browser-windows:: ipc cjdj6ebxr01mbadu55zwp1f3c: jupyter completed 20ms
2018-02-11T19:21:38.107Z - info: node/services/browser-windows:: ipc cjdj6egqa01mdadu552vp5w5f: getTabs completed 9ms
2018-02-11T19:21:38.181Z - info: node/services/browser-windows:: ipc cjdj6egsc01mfadu5p0pr3zpm: jupyter completed 9ms
2018-02-11T19:21:38.272Z - info: node/services/browser-windows:: ipc cjdj6egv001mgadu5l22h0rtl: jupyter completed 4ms
2018-02-11T19:21:38.278Z - info: node/services/browser-windows:: ipc cjdj6egv101mhadu5nh8fs26w: jupyter completed 9ms
2018-02-11T19:21:38.287Z - info: node/services/browser-windows:: ipc cjdj6egv201miadu5xgmjjpah: jupyter completed 16ms
2018-02-11T19:21:40.053Z - info: node/services/browser-windows:: ipc cjdj6ei8401mmadu5lqmwufch: jupyter completed 16ms
2018-02-11T19:21:40.060Z - info: node/services/browser-windows:: ipc cjdj6ei8501mnadu53r09migc: jupyter completed 23ms
2018-02-11T19:21:40.067Z - info: node/services/browser-windows:: ipc cjdj6ei8c01moadu56dpwqu36: jupyter completed 22ms
2018-02-11T19:21:40.071Z - info: node/services/browser-windows:: ipc cjdj6ei8d01mpadu5d3a5b39k: jupyter completed 25ms
2018-02-11T19:21:40.448Z - info: node/services/browser-windows:: ipc cjdj6eijb01msadu5vl9thdi0: jupyter completed 9ms
2018-02-11T19:21:40.456Z - info: node/services/browser-windows:: ipc cjdj6eijd01mtadu5v7atbrfo: jupyter completed 15ms
2018-02-11T19:21:40.466Z - info: node/services/browser-windows:: ipc cjdj6eiji01muadu54v4jpkod: jupyter completed 19ms
2018-02-11T19:21:40.471Z - info: node/services/browser-windows:: ipc cjdj6eijj01mvadu5fysa2emk: jupyter completed 24ms
2018-02-11T19:22:53.662Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdj6g31401mxadu5hrd1nmsu',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-11T22:00:52.606Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/Dropbox undefined
2018-02-11T22:00:53.582Z - error: uncaughtException: ei.stat.isDirectory is not a function date=Sun Feb 11 2018 17:00:53 GMT-0500 (EST), pid=22405, uid=501, gid=20, cwd=/, execPath=/Applications/Rodeo.app/Contents/MacOS/Rodeo, version=v6.5.0, argv=[/Applications/Rodeo.app/Contents/MacOS/Rodeo, -psn_0_8501275], rss=111460352, heapTotal=29417472, heapUsed=22574688, loadavg=[2.251953125, 2.47265625, 2.52685546875], uptime=621340, trace=[column=24, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=238, method=null, native=false, column=null, file=null, function=Array.filter, line=null, method=filter, native=true, column=12, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=236, method=null, native=false, column=38, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=199, method=null, native=false, column=18, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js, function=null, line=287, method=null, native=false, column=15, file=fs.js, function=FSReqWrap.oncomplete, line=123, method=oncomplete, native=false], stack=[TypeError: ei.stat.isDirectory is not a function,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:238:24,     at Array.filter (native),     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:236:12,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:199:38,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js:287:18,     at FSReqWrap.oncomplete (fs.js:123:15)]
2018-02-12T19:42:10.090Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-12T19:42:44.784Z - info: node/services/browser-windows:: ipc cjdkmlgrm01n0adu5bn0svur3: jupyter completed 14ms
2018-02-12T19:42:44.874Z - info: node/services/browser-windows:: ipc cjdkmlgro01n1adu5cnqtsbbx: jupyter completed 19ms
2018-02-12T19:42:45.765Z - info: node/services/browser-windows:: ipc cjdkmlhiv01n2adu572u2p6hg: jupyter completed 14ms
2018-02-12T19:42:45.770Z - info: node/services/browser-windows:: ipc cjdkmlhix01n3adu5pxtbudjs: jupyter completed 17ms
2018-02-12T19:42:45.779Z - info: node/services/browser-windows:: ipc cjdkmlhiy01n4adu5gyn4wvzz: jupyter completed 25ms
2018-02-12T19:43:15.191Z - info: node/services/browser-windows:: ipc cjdkmm48c01n8adu56sz1hf9j: jupyter completed 11ms
2018-02-12T19:43:15.202Z - info: node/services/browser-windows:: ipc cjdkmm48d01n9adu59nxi5sl2: jupyter completed 21ms
2018-02-12T19:43:15.221Z - info: node/services/browser-windows:: ipc cjdkmm48t01naadu5z3bhxq5r: jupyter completed 24ms
2018-02-12T19:43:15.224Z - info: node/services/browser-windows:: ipc cjdkmm49001nbadu5kuct89tn: jupyter completed 19ms
2018-02-12T19:43:15.232Z - info: node/services/browser-windows:: ipc cjdkmm49101ncadu5dg4wewha: jupyter completed 27ms
2018-02-12T19:43:21.959Z - info: node/services/browser-windows:: ipc cjdkmm9g801ngadu57bvy0jci: jupyter completed 14ms
2018-02-12T19:43:21.996Z - info: node/services/browser-windows:: ipc cjdkmm9gg01nhadu50jropyis: jupyter completed 13ms
2018-02-12T19:43:21.998Z - info: node/services/browser-windows:: ipc cjdkmm9gn01niadu5ccztsuvm: jupyter completed 39ms
2018-02-12T19:43:21.999Z - info: node/services/browser-windows:: ipc cjdkmm9gt01njadu5h831i0o9: jupyter completed 34ms
2018-02-12T19:43:22.008Z - info: node/services/browser-windows:: ipc cjdkmm9hp01nkadu51msn0nuf: jupyter completed 10ms
2018-02-13T00:02:10.503Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/Google Drive undefined
2018-02-13T00:02:10.638Z - error: uncaughtException: ei.stat.isDirectory is not a function date=Mon Feb 12 2018 19:02:10 GMT-0500 (EST), pid=22405, uid=501, gid=20, cwd=/, execPath=/Applications/Rodeo.app/Contents/MacOS/Rodeo, version=v6.5.0, argv=[/Applications/Rodeo.app/Contents/MacOS/Rodeo, -psn_0_8501275], rss=83365888, heapTotal=29417472, heapUsed=22706688, loadavg=[2.3125, 2.7529296875, 2.64892578125], uptime=715017, trace=[column=24, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=238, method=null, native=false, column=null, file=null, function=Array.filter, line=null, method=filter, native=true, column=12, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=236, method=null, native=false, column=38, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=199, method=null, native=false, column=18, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js, function=null, line=287, method=null, native=false, column=15, file=fs.js, function=FSReqWrap.oncomplete, line=123, method=oncomplete, native=false], stack=[TypeError: ei.stat.isDirectory is not a function,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:238:24,     at Array.filter (native),     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:236:12,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:199:38,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js:287:18,     at FSReqWrap.oncomplete (fs.js:123:15)]
2018-02-13T02:31:56.995Z - info: node/services/browser-windows:: ipc cjdl17pd901noadu53megrfrk: jupyter completed 19ms
2018-02-13T02:31:57.074Z - info: node/services/browser-windows:: ipc cjdl17pdb01npadu51gb20c3v: jupyter completed 27ms
2018-02-13T02:31:57.075Z - info: node/services/browser-windows:: ipc cjdl17pdc01nqadu5gywfvomt: jupyter completed 99ms
2018-02-13T02:31:57.076Z - info: node/services/browser-windows:: ipc cjdl17pdd01nradu57nus2lt2: jupyter completed 99ms
2018-02-13T02:31:57.177Z - info: node/services/browser-windows:: ipc cjdl17pim01nuadu54vm36nhv: jupyter completed 10ms
2018-02-13T02:31:57.184Z - info: node/services/browser-windows:: ipc cjdl17pin01nvadu5qj1cb0lw: jupyter completed 17ms
2018-02-13T02:31:57.343Z - info: node/services/browser-windows:: ipc cjdl17piu01nwadu5odhofsu2: jupyter completed 20ms
2018-02-13T02:31:57.345Z - info: node/services/browser-windows:: ipc cjdl17piv01nxadu5bpo4fz4a: jupyter completed 170ms
2018-02-13T18:03:17.924Z - info: node/services/browser-windows:: ipc cjdlyhfd701nzadu5fqv1o6b0: getTabs completed 22ms
2018-02-13T18:03:18.184Z - info: node/services/browser-windows:: ipc cjdlyhfkt01o1adu5su0zj40e: jupyter completed 11ms
2018-02-13T18:03:18.192Z - info: node/services/browser-windows:: ipc cjdlyhfku01o2adu5gs8pkoyg: jupyter completed 18ms
2018-02-13T18:03:25.277Z - info: node/services/browser-windows:: ipc cjdlyhkzl01o3adu54q0pzhg1: jupyter completed 92ms
2018-02-13T18:03:25.289Z - info: node/services/browser-windows:: ipc cjdlyhkzp01o4adu54dnzr5sf: jupyter completed 93ms
2018-02-13T18:03:25.295Z - info: node/services/browser-windows:: ipc cjdlyhkzq01o5adu5u49hm0jo: jupyter completed 104ms
2018-02-13T18:03:41.096Z - info: node/services/browser-windows:: ipc cjdlyhx9001o8adu58mqb22x5: getTabs completed 20ms
2018-02-13T18:03:41.144Z - info: node/services/browser-windows:: ipc cjdlyhxaj01oaadu5jqe7u3zk: jupyter completed 13ms
2018-02-13T18:03:41.149Z - info: node/services/browser-windows:: ipc cjdlyhxal01obadu5ghp051si: jupyter completed 16ms
2018-02-13T18:03:41.161Z - info: node/services/browser-windows:: ipc cjdlyhxaq01ocadu5whgmmr62: jupyter completed 22ms
2018-02-13T18:03:41.168Z - info: node/services/browser-windows:: ipc cjdlyhxat01odadu51efi6xo1: jupyter completed 27ms
2018-02-13T18:03:46.127Z - info: node/services/browser-windows:: ipc cjdlyi14y01ohadu5y56fzffi: getTabs completed 13ms
2018-02-13T18:03:46.172Z - info: node/services/browser-windows:: ipc cjdlyi16701ojadu5g6r7sgku: jupyter completed 13ms
2018-02-13T18:03:46.180Z - info: node/services/browser-windows:: ipc cjdlyi16901okadu5t3gvzgy1: jupyter completed 18ms
2018-02-13T18:03:46.195Z - info: node/services/browser-windows:: ipc cjdlyi16h01oladu5vunz4f6y: jupyter completed 26ms
2018-02-13T18:03:46.221Z - info: node/services/browser-windows:: ipc cjdlyi16i01omadu5e71f63gw: jupyter completed 31ms
2018-02-13T18:03:49.880Z - info: node/services/browser-windows:: ipc cjdlyi41a01opadu50aglle0t: getTabs completed 10ms
2018-02-13T18:03:49.925Z - info: node/services/browser-windows:: ipc cjdlyi42h01oradu5km2wf7at: jupyter completed 12ms
2018-02-13T18:03:49.930Z - info: node/services/browser-windows:: ipc cjdlyi42j01osadu5lqqoah6b: jupyter completed 15ms
2018-02-13T18:03:58.256Z - info: node/services/browser-windows:: ipc cjdlyia6001otadu5s702llb0: jupyter completed 439ms
2018-02-13T18:03:58.289Z - info: node/services/browser-windows:: ipc cjdlyia6i01ouadu5tekvyn9x: jupyter completed 450ms
2018-02-13T18:03:58.292Z - info: node/services/browser-windows:: ipc cjdlyia6m01ovadu5bwczt4ji: jupyter completed 454ms
2018-02-13T22:22:09.719Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-13T22:23:47.558Z - info: node/services/browser-windows:: ipc cjdm7sf9o01pcadu5bpcnafuy: getTabs completed 24ms
2018-02-13T22:23:47.656Z - info: node/services/browser-windows:: ipc cjdm7sfcj01peadu5zdl8eyd2: jupyter completed 21ms
2018-02-13T22:23:47.688Z - info: node/services/browser-windows:: ipc cjdm7sfdr01pfadu5v2aouf12: jupyter completed 9ms
2018-02-13T22:23:47.767Z - info: node/services/browser-windows:: ipc cjdm7sffs01pgadu5ise92uxd: jupyter completed 15ms
2018-02-13T22:23:47.772Z - info: node/services/browser-windows:: ipc cjdm7sffw01phadu5w6tht3y7: jupyter completed 15ms
2018-02-13T22:23:47.781Z - info: node/services/browser-windows:: ipc cjdm7sffx01piadu5svbfpjdj: jupyter completed 23ms
2018-02-13T22:24:01.160Z - info: node/services/browser-windows:: ipc cjdm7spru01ptadu58rctxx7z: getTabs completed 14ms
2018-02-13T22:24:01.222Z - info: node/services/browser-windows:: ipc cjdm7sptm01pvadu5m87nyfo9: jupyter completed 12ms
2018-02-13T22:24:01.227Z - info: node/services/browser-windows:: ipc cjdm7sptn01pwadu5q5chsh0i: jupyter completed 15ms
2018-02-13T22:24:01.238Z - info: node/services/browser-windows:: ipc cjdm7sptp01pxadu51ek1h3k8: jupyter completed 25ms
2018-02-13T22:24:01.255Z - info: node/services/browser-windows:: ipc cjdm7sptw01pyadu5qngb2u85: jupyter completed 35ms
2018-02-13T22:24:01.264Z - info: node/services/browser-windows:: ipc cjdm7sptx01pzadu5efs57d2h: jupyter completed 42ms
2018-02-13T22:24:37.981Z - info: node/services/browser-windows:: ipc cjdm7ti6j01q1adu5yw1ygold: getTabs completed 18ms
2018-02-13T22:24:38.048Z - info: node/services/browser-windows:: ipc cjdm7ti8a01q3adu5ed795f06: jupyter completed 22ms
2018-02-13T22:24:38.054Z - info: node/services/browser-windows:: ipc cjdm7ti8b01q4adu507by9d4f: jupyter completed 26ms
2018-02-13T22:24:38.070Z - info: node/services/browser-windows:: ipc cjdm7ti8t01q5adu56wghrv1o: jupyter completed 24ms
2018-02-13T22:24:38.077Z - info: node/services/browser-windows:: ipc cjdm7ti8z01q6adu5vmc9mk6k: jupyter completed 26ms
2018-02-13T22:24:38.087Z - info: node/services/browser-windows:: ipc cjdm7ti9001q7adu5xkl8mqzl: jupyter completed 35ms
2018-02-13T22:24:41.682Z - info: node/services/browser-windows:: ipc cjdm7tl1i01qdadu5gsnn5sm8: jupyter completed 12ms
2018-02-13T22:24:41.692Z - info: node/services/browser-windows:: ipc cjdm7tl1k01qeadu5hjui1k7n: jupyter completed 20ms
2018-02-13T22:24:41.711Z - info: node/services/browser-windows:: ipc cjdm7tl1q01qfadu5diig91lx: jupyter completed 33ms
2018-02-13T22:24:41.720Z - info: node/services/browser-windows:: ipc cjdm7tl1r01qgadu5899icbdu: jupyter completed 41ms
2018-02-13T22:24:41.732Z - info: node/services/browser-windows:: ipc cjdm7tl1s01qhadu55eqz1x17: jupyter completed 52ms
2018-02-13T22:24:41.736Z - info: node/services/browser-windows:: ipc cjdm7tl1x01qiadu5j6c5hj1s: jupyter completed 51ms
2018-02-13T22:24:41.746Z - info: node/services/browser-windows:: ipc cjdm7tl1y01qjadu5lvm51u22: jupyter completed 60ms
2018-02-13T22:24:41.751Z - info: node/services/browser-windows:: ipc cjdm7tl1z01qkadu5nt3rycxp: jupyter completed 64ms
2018-02-13T22:24:41.845Z - info: node/services/browser-windows:: ipc cjdm7tl5z01qnadu5m1x5kgov: jupyter completed 14ms
2018-02-13T22:24:41.856Z - info: node/services/browser-windows:: ipc cjdm7tl6001qoadu5avbdhg1g: jupyter completed 24ms
2018-02-13T22:24:41.860Z - info: node/services/browser-windows:: ipc cjdm7tl6601qpadu509i0tcro: jupyter completed 22ms
2018-02-13T22:24:41.869Z - info: node/services/browser-windows:: ipc cjdm7tl6701qqadu52b0mfn52: jupyter completed 30ms
2018-02-13T22:24:48.541Z - info: node/services/browser-windows:: ipc cjdm7tqc101qtadu59jxtd1eg: getTabs completed 11ms
2018-02-13T22:24:48.586Z - info: node/services/browser-windows:: ipc cjdm7tqd901qvadu57uqszvbc: jupyter completed 12ms
2018-02-13T22:24:48.593Z - info: node/services/browser-windows:: ipc cjdm7tqda01qwadu567usw9u1: jupyter completed 18ms
2018-02-13T22:24:48.602Z - info: node/services/browser-windows:: ipc cjdm7tqde01qxadu5wmz5lvc3: jupyter completed 24ms
2018-02-13T22:24:48.609Z - info: node/services/browser-windows:: ipc cjdm7tqdh01qyadu5l1w26v9s: jupyter completed 28ms
2018-02-13T22:24:54.863Z - info: node/services/browser-windows:: ipc cjdm7tv7k01r1adu5hf5dm096: getTabs completed 15ms
2018-02-13T22:24:54.904Z - info: node/services/browser-windows:: ipc cjdm7tv8r01r3adu54nu93x8x: jupyter completed 13ms
2018-02-13T22:24:54.910Z - info: node/services/browser-windows:: ipc cjdm7tv8s01r4adu5xshfpoqk: jupyter completed 18ms
2018-02-13T22:24:54.921Z - info: node/services/browser-windows:: ipc cjdm7tv8w01r5adu5q90dvkwg: jupyter completed 24ms
2018-02-13T22:24:54.927Z - info: node/services/browser-windows:: ipc cjdm7tv8y01r6adu5kss8no3q: jupyter completed 29ms
2018-02-13T22:24:58.203Z - info: node/services/browser-windows:: ipc cjdm7txsc01r9adu5qux0c0om: getTabs completed 15ms
2018-02-13T22:24:58.243Z - info: node/services/browser-windows:: ipc cjdm7txtg01rbadu5afdua4ry: jupyter completed 15ms
2018-02-13T22:24:58.255Z - info: node/services/browser-windows:: ipc cjdm7txtu01rcadu5txit6m5q: jupyter completed 13ms
2018-02-13T22:24:58.262Z - info: node/services/browser-windows:: ipc cjdm7txu001rdadu50qsb117u: jupyter completed 13ms
2018-02-13T22:24:58.271Z - info: node/services/browser-windows:: ipc cjdm7txu101readu58h8ybnxf: jupyter completed 22ms
2018-02-13T22:25:00.869Z - info: node/services/browser-windows:: ipc cjdm7tzui01rhadu5mjbyfbtr: getTabs completed 11ms
2018-02-13T22:25:00.908Z - info: node/services/browser-windows:: ipc cjdm7tzvm01rjadu50o9hjjuf: jupyter completed 10ms
2018-02-13T22:25:00.914Z - info: node/services/browser-windows:: ipc cjdm7tzvm01rkadu5rmz4q0g7: jupyter completed 15ms
2018-02-13T22:25:00.958Z - info: node/services/browser-windows:: ipc cjdm7tzvz01rladu5avhgpzlh: jupyter completed 47ms
2018-02-13T22:25:00.968Z - info: node/services/browser-windows:: ipc cjdm7tzw601rmadu5bdyv0f1n: jupyter completed 50ms
2018-02-13T22:25:00.970Z - info: node/services/browser-windows:: ipc cjdm7tzw701rnadu5sv33fc6q: jupyter completed 51ms
2018-02-13T22:25:05.551Z - info: node/services/browser-windows:: ipc cjdm7u3gk01rqadu5grx67zv0: getTabs completed 11ms
2018-02-13T22:25:05.602Z - info: node/services/browser-windows:: ipc cjdm7u3hx01rsadu5cc8u6j13: jupyter completed 13ms
2018-02-13T22:25:05.632Z - info: node/services/browser-windows:: ipc cjdm7u3hy01rtadu5gkb9ooxh: jupyter completed 20ms
2018-02-13T22:25:05.632Z - info: node/services/browser-windows:: ipc cjdm7u3i501ruadu56nkbn3lt: jupyter completed 35ms
2018-02-13T22:25:05.633Z - info: node/services/browser-windows:: ipc cjdm7u3i601rvadu50dkrrlp9: jupyter completed 35ms
2018-02-13T22:25:07.759Z - info: node/services/browser-windows:: ipc cjdm7u55s01ryadu5ipnvzusg: getTabs completed 14ms
2018-02-13T22:25:07.794Z - info: node/services/browser-windows:: ipc cjdm7u56w01s0adu5hw712o6w: jupyter completed 10ms
2018-02-13T22:25:07.814Z - info: node/services/browser-windows:: ipc cjdm7u57l01s1adu5sn7bz70r: jupyter completed 5ms
2018-02-13T22:25:07.824Z - info: node/services/browser-windows:: ipc cjdm7u57s01s2adu55f5vi9ln: jupyter completed 8ms
2018-02-13T22:25:07.834Z - info: node/services/browser-windows:: ipc cjdm7u57t01s3adu5els3t9m9: jupyter completed 16ms
2018-02-13T22:25:09.528Z - info: node/services/browser-windows:: ipc cjdm7u6ix01s6adu5zad6v19f: getTabs completed 15ms
2018-02-13T22:25:09.658Z - info: node/services/browser-windows:: ipc cjdm7u6mq01s8adu5px4ynjys: jupyter completed 7ms
2018-02-13T22:25:09.662Z - info: node/services/browser-windows:: ipc cjdm7u6mr01s9adu5m64kqb9f: jupyter completed 11ms
2018-02-13T22:25:09.665Z - info: node/services/browser-windows:: ipc cjdm7u6ms01saadu58t2ie9ht: jupyter completed 13ms
2018-02-13T22:25:09.710Z - info: node/services/browser-windows:: ipc cjdm7u6mt01sbadu51m982sme: jupyter completed 57ms
2018-02-13T22:25:32.604Z - info: node/services/browser-windows:: ipc cjdm7uoc001sfadu5f2w9ffd3: jupyter completed 11ms
2018-02-13T22:25:32.612Z - info: node/services/browser-windows:: ipc cjdm7uoc101sgadu59rgef0xr: jupyter completed 19ms
2018-02-13T22:25:32.622Z - info: node/services/browser-windows:: ipc cjdm7uoc201shadu597k759ca: jupyter completed 28ms
2018-02-13T22:25:32.633Z - info: node/services/browser-windows:: ipc cjdm7uoc901siadu501u17mvm: jupyter completed 32ms
2018-02-13T22:25:32.637Z - info: node/services/browser-windows:: ipc cjdm7uoca01sjadu5k7fdwaaz: jupyter completed 35ms
2018-02-13T22:25:41.591Z - info: node/services/browser-windows:: ipc cjdm7uv9n01snadu55leh2rvj: jupyter completed 11ms
2018-02-13T22:25:41.597Z - info: node/services/browser-windows:: ipc cjdm7uv9o01soadu5hlty9slj: jupyter completed 16ms
2018-02-13T22:25:41.606Z - info: node/services/browser-windows:: ipc cjdm7uv9p01spadu5blx67e6t: jupyter completed 25ms
2018-02-13T22:25:41.620Z - info: node/services/browser-windows:: ipc cjdm7uv9u01sqadu59i24kpav: jupyter completed 34ms
2018-02-13T22:25:41.627Z - info: node/services/browser-windows:: ipc cjdm7uv9v01sradu5p7ie5xbt: jupyter completed 40ms
2018-02-13T22:27:16.816Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cjdm7wwqv01stadu5jgwxcr25',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-13T22:54:14.979Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-13T22:55:44.840Z - info: node/services/browser-windows:: ipc cjdm8xing01t4adu5jhh1880m: getTabs completed 26ms
2018-02-13T22:55:44.894Z - info: node/services/browser-windows:: ipc cjdm8xip701t6adu54lvn29g1: jupyter completed 18ms
2018-02-13T22:55:44.901Z - info: node/services/browser-windows:: ipc cjdm8xipb01t7adu5ychlzzrv: jupyter completed 22ms
2018-02-13T22:55:44.913Z - info: node/services/browser-windows:: ipc cjdm8xipe01t8adu583ifc785: jupyter completed 31ms
2018-02-13T22:55:44.928Z - info: node/services/browser-windows:: ipc cjdm8xipn01t9adu5tcnk5x4n: jupyter completed 37ms
2018-02-13T22:55:44.933Z - info: node/services/browser-windows:: ipc cjdm8xipp01taadu5m6b1o0ur: jupyter completed 40ms
2018-02-13T23:07:21.463Z - info: node/services/browser-windows:: ipc cjdm9cg6c01u2adu53uolzs3o: getTabs completed 16ms
2018-02-13T23:07:21.517Z - info: node/services/browser-windows:: ipc cjdm9cg7y01u4adu50hvznnfu: jupyter completed 15ms
2018-02-13T23:07:21.522Z - info: node/services/browser-windows:: ipc cjdm9cg7z01u5adu5i2oldr9m: jupyter completed 19ms
2018-02-13T23:07:21.536Z - info: node/services/browser-windows:: ipc cjdm9cg8801u6adu5tlwomzy4: jupyter completed 23ms
2018-02-13T23:07:21.544Z - info: node/services/browser-windows:: ipc cjdm9cg8801u7adu5djs3qlef: jupyter completed 31ms
2018-02-13T23:07:37.464Z - info: node/services/browser-windows:: ipc cjdm9csiz01uiadu5nhdeq454: getTabs completed 13ms
2018-02-13T23:07:37.510Z - info: node/services/browser-windows:: ipc cjdm9cska01ukadu5yhziyt90: jupyter completed 12ms
2018-02-13T23:07:37.519Z - info: node/services/browser-windows:: ipc cjdm9cskb01uladu58bswhxqc: jupyter completed 20ms
2018-02-13T23:07:37.532Z - info: node/services/browser-windows:: ipc cjdm9cskc01umadu57jubx5uf: jupyter completed 31ms
2018-02-13T23:07:37.537Z - info: node/services/browser-windows:: ipc cjdm9cskk01unadu5ig4m9sld: jupyter completed 29ms
2018-02-13T23:07:37.547Z - info: node/services/browser-windows:: ipc cjdm9cskk01uoadu5wxttmizy: jupyter completed 39ms
2018-02-13T23:11:41.760Z - info: node/services/browser-windows:: ipc cjdm9i10u01veadu5q4im9wcc: getTabs completed 16ms
2018-02-13T23:11:41.804Z - info: node/services/browser-windows:: ipc cjdm9i12801vgadu55ab6iyol: jupyter completed 11ms
2018-02-13T23:11:41.816Z - info: node/services/browser-windows:: ipc cjdm9i12c01vhadu5ulaj5iq6: jupyter completed 20ms
2018-02-13T23:11:41.887Z - info: node/services/browser-windows:: ipc cjdm9i14601viadu5hfgxqhqu: jupyter completed 25ms
2018-02-13T23:11:41.897Z - info: node/services/browser-windows:: ipc cjdm9i14901vjadu5cypmcvf0: jupyter completed 32ms
2018-02-13T23:11:41.900Z - info: node/services/browser-windows:: ipc cjdm9i14b01vkadu5ezetnar2: jupyter completed 33ms
2018-02-13T23:12:13.376Z - info: node/services/browser-windows:: ipc cjdm9ipfa01w0adu5k08tvvnc: getTabs completed 10ms
2018-02-13T23:12:13.425Z - info: node/services/browser-windows:: ipc cjdm9ipgp01w2adu53kjgst02: jupyter completed 8ms
2018-02-13T23:12:13.434Z - info: node/services/browser-windows:: ipc cjdm9ipgq01w3adu5kkflza0r: jupyter completed 15ms
2018-02-13T23:12:13.442Z - info: node/services/browser-windows:: ipc cjdm9ipgr01w4adu507njxod7: jupyter completed 23ms
2018-02-13T23:12:13.451Z - info: node/services/browser-windows:: ipc cjdm9ipgs01w5adu5j2yj4v50: jupyter completed 31ms
2018-02-13T23:12:18.445Z - info: node/services/browser-windows:: ipc cjdm9itc301waadu5w55f9uly: getTabs completed 10ms
2018-02-13T23:12:18.494Z - info: node/services/browser-windows:: ipc cjdm9itd601wcadu54jdtncsv: jupyter completed 19ms
2018-02-13T23:12:18.503Z - info: node/services/browser-windows:: ipc cjdm9itd701wdadu5126gkfeh: jupyter completed 28ms
2018-02-13T23:12:18.514Z - info: node/services/browser-windows:: ipc cjdm9itdf01weadu5xiaqngpa: jupyter completed 31ms
2018-02-13T23:12:18.523Z - info: node/services/browser-windows:: ipc cjdm9itdg01wfadu53z0aedtc: jupyter completed 38ms
2018-02-13T23:12:23.006Z - info: node/services/browser-windows:: ipc cjdm9iwum01wiadu5uk2ssdz4: getTabs completed 16ms
2018-02-13T23:12:23.052Z - info: node/services/browser-windows:: ipc cjdm9iwvz01wkadu5ib7txwet: jupyter completed 13ms
2018-02-13T23:12:23.057Z - info: node/services/browser-windows:: ipc cjdm9iww001wladu5t11rsrwo: jupyter completed 17ms
2018-02-13T23:12:23.071Z - info: node/services/browser-windows:: ipc cjdm9iww801wmadu55fhd9bpb: jupyter completed 23ms
2018-02-13T23:12:23.085Z - info: node/services/browser-windows:: ipc cjdm9iwwa01wnadu5uwc262mp: jupyter completed 35ms
2018-02-13T23:13:20.960Z - info: node/services/browser-windows:: ipc cjdm9k5ki01wradu5k46r8pmm: getTabs completed 14ms
2018-02-13T23:13:21.014Z - info: node/services/browser-windows:: ipc cjdm9k5m001wtadu5ccqv4ubt: jupyter completed 14ms
2018-02-13T23:13:21.020Z - info: node/services/browser-windows:: ipc cjdm9k5m101wuadu5ekpocta4: jupyter completed 19ms
2018-02-13T23:47:44.908Z - warn: node/services/browser-windows:: ipc cjdmas9jl01wvadu5rvqrvwzg: still waiting for jupyter
2018-02-13T23:47:44.949Z - warn: node/services/browser-windows:: ipc cjdmas9xa01wwadu550kw6xo5: still waiting for jupyter
2018-02-13T23:47:45.179Z - info: node/services/browser-windows:: ipc cjdmas9jl01wvadu5rvqrvwzg: jupyter completed 6218ms
2018-02-13T23:47:46.714Z - info: node/services/browser-windows:: ipc cjdmas9xa01wwadu550kw6xo5: jupyter completed 7260ms
2018-02-15T02:19:41.546Z - info: node/services/browser-windows:: close mainWindow
2018-02-15T02:19:41.646Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-15T02:19:42.030Z - info: node/services/browser-windows:: ipc cjdnvnnbv01wyadu5tasjk74b: dispatch completed 359ms
2018-02-15T02:19:51.589Z - info: node/services/browser-windows:: ipc cjdnvnuza01x1adu5p5kstk7u: jupyter completed 15ms
2018-02-15T02:19:51.600Z - info: node/services/browser-windows:: ipc cjdnvnuzc01x2adu50hmdlc9q: jupyter completed 24ms
2018-02-15T02:19:51.632Z - info: node/services/browser-windows:: ipc cjdnvnuzj01x3adu5tnuz3zty: jupyter completed 49ms
2018-02-15T02:19:51.639Z - info: node/services/browser-windows:: ipc cjdnvnuzk01x4adu5mqf6p9ll: jupyter completed 54ms
2018-02-16T00:53:00.536Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/disSubtyper undefined
2018-02-16T01:53:20.039Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/disSubtyper undefined
2018-02-16T01:53:50.319Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/disSubtyper undefined
2018-02-16T02:02:51.252Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/disSubtyper undefined
2018-02-16T02:31:09.824Z - info: node/services/files:: HEEEEEY unlink /Users/diamac/index.html undefined
2018-02-16T02:38:58.338Z - info: node/services/files:: HEEEEEY unlink /Users/diamac/index.txt undefined
2018-02-17T03:27:16.878Z - info: node/services/browser-windows:: close mainWindow
2018-02-17T03:27:16.943Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-17T03:27:17.007Z - info: node/services/browser-windows:: ipc cjdqsy9qo01x6adu5ifk7fbw5: dispatch completed 62ms
2018-02-18T15:24:05.270Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T15:24:20.978Z - info: node/services/browser-windows:: ipc cjdsy09xc01x9adu574g203ao: jupyter completed 50ms
2018-02-18T15:24:20.980Z - info: node/services/browser-windows:: ipc cjdsy09xe01xaadu5twar3nm6: jupyter completed 50ms
2018-02-18T15:24:20.994Z - info: node/services/browser-windows:: ipc cjdsy09xw01xbadu58f02pw5h: jupyter completed 46ms
2018-02-18T15:24:21.001Z - info: node/services/browser-windows:: ipc cjdsy09xw01xcadu5hqkiso57: jupyter completed 52ms
2018-02-18T15:24:21.012Z - info: node/services/browser-windows:: ipc cjdsy09yr01xdadu5rye6lyph: jupyter completed 33ms
2018-02-18T15:38:09.345Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T15:38:14.255Z - info: node/services/browser-windows:: ipc cjdsyi4wy01xhadu52v3f9ein: jupyter completed 13ms
2018-02-18T15:38:14.259Z - info: node/services/browser-windows:: ipc cjdsyi4x001xiadu5yt658f64: jupyter completed 13ms
2018-02-18T15:38:14.288Z - info: node/services/browser-windows:: ipc cjdsyi4x101xjadu5y9asmdic: jupyter completed 43ms
2018-02-18T15:38:14.294Z - info: node/services/browser-windows:: ipc cjdsyi4x301xkadu53jp744lq: jupyter completed 47ms
2018-02-18T15:38:14.304Z - info: node/services/browser-windows:: ipc cjdsyi4x301xladu5scgj9816: jupyter completed 56ms
2018-02-18T15:38:20.564Z - info: node/services/browser-windows:: ipc cjdsyi9s501xpadu5pbisnvl6: jupyter completed 14ms
2018-02-18T15:38:20.571Z - info: node/services/browser-windows:: ipc cjdsyi9s601xqadu5874r5hwy: jupyter completed 21ms
2018-02-18T15:38:20.612Z - info: node/services/browser-windows:: ipc cjdsyi9s701xradu5q9uu4hrn: jupyter completed 61ms
2018-02-18T15:38:20.622Z - info: node/services/browser-windows:: ipc cjdsyi9se01xsadu5dvozyz1g: jupyter completed 64ms
2018-02-18T15:38:20.634Z - info: node/services/browser-windows:: ipc cjdsyi9sg01xtadu5ziby96zc: jupyter completed 74ms
2018-02-18T15:40:29.458Z - info: node/services/browser-windows:: ipc cjdsyl18l01xxadu5atc18o7j: jupyter completed 10ms
2018-02-18T15:40:29.496Z - info: node/services/browser-windows:: ipc cjdsyl19u01xyadu5uyaisn83: jupyter completed 5ms
2018-02-18T15:40:29.892Z - info: node/services/browser-windows:: ipc cjdsyl1jr01xzadu5kbl5k1po: jupyter completed 45ms
2018-02-18T15:40:29.901Z - info: node/services/browser-windows:: ipc cjdsyl1kj01y0adu5tmu3qd1q: jupyter completed 25ms
2018-02-18T15:40:29.903Z - info: node/services/browser-windows:: ipc cjdsyl1kk01y1adu53a5q2tyo: jupyter completed 27ms
2018-02-18T15:40:41.701Z - info: node/services/browser-windows:: ipc cjdsylaon01y5adu5xfrgefnw: jupyter completed 13ms
2018-02-18T15:40:41.706Z - info: node/services/browser-windows:: ipc cjdsylaoo01y6adu58u0cwmw3: jupyter completed 18ms
2018-02-18T15:40:41.727Z - info: node/services/browser-windows:: ipc cjdsylapa01y7adu5dddogenf: jupyter completed 17ms
2018-02-18T15:40:41.730Z - info: node/services/browser-windows:: ipc cjdsylapg01y8adu5lh6at2rc: jupyter completed 13ms
2018-02-18T15:40:41.740Z - info: node/services/browser-windows:: ipc cjdsylapi01y9adu5r467a88u: jupyter completed 22ms
2018-02-18T15:41:54.546Z - info: node/services/browser-windows:: ipc cjdsymuw201ydadu5juq70e15: jupyter completed 12ms
2018-02-18T15:41:54.549Z - info: node/services/browser-windows:: ipc cjdsymuw401yeadu5yiyj1eee: jupyter completed 17ms
2018-02-18T15:41:54.592Z - info: node/services/browser-windows:: ipc cjdsymuwn01yfadu5gp4ufoh7: jupyter completed 41ms
2018-02-18T15:41:54.602Z - info: node/services/browser-windows:: ipc cjdsymuwy01ygadu5nsr2o639: jupyter completed 40ms
2018-02-18T15:41:54.604Z - info: node/services/browser-windows:: ipc cjdsymuwy01yhadu5e0pgto45: jupyter completed 42ms
2018-02-18T15:41:57.342Z - info: node/services/browser-windows:: ipc cjdsymx1g01yladu59hnc3fyn: jupyter completed 26ms
2018-02-18T15:41:57.347Z - info: node/services/browser-windows:: ipc cjdsymx1k01ymadu5jx1thkia: jupyter completed 27ms
2018-02-18T15:41:57.385Z - info: node/services/browser-windows:: ipc cjdsymx1n01ynadu5nwr43f8n: jupyter completed 62ms
2018-02-18T15:41:57.390Z - info: node/services/browser-windows:: ipc cjdsymx1s01yoadu543avu4yq: jupyter completed 62ms
2018-02-18T15:41:57.399Z - info: node/services/browser-windows:: ipc cjdsymx1t01ypadu5o5zgnfq4: jupyter completed 70ms
2018-02-18T15:41:57.631Z - info: node/services/browser-windows:: ipc cjdsymx9x01ysadu5saveqng0: jupyter completed 9ms
2018-02-18T15:41:57.645Z - info: node/services/browser-windows:: ipc cjdsymx9y01ytadu5drei9t1i: jupyter completed 23ms
2018-02-18T15:41:57.651Z - info: node/services/browser-windows:: ipc cjdsymxa501yuadu5hvqjq8gh: jupyter completed 22ms
2018-02-18T15:41:57.665Z - info: node/services/browser-windows:: ipc cjdsymxa601yvadu563n4ewmw: jupyter completed 35ms
2018-02-18T15:42:22.507Z - info: node/services/browser-windows:: ipc cjdsynggu01yzadu567qw3osz: jupyter completed 13ms
2018-02-18T15:42:22.514Z - info: node/services/browser-windows:: ipc cjdsynggv01z0adu52tb13oqg: jupyter completed 19ms
2018-02-18T15:42:22.522Z - info: node/services/browser-windows:: ipc cjdsyngh101z1adu5g1hl8qz8: jupyter completed 21ms
2018-02-18T15:42:22.533Z - info: node/services/browser-windows:: ipc cjdsyngh201z2adu5kpo9s609: jupyter completed 31ms
2018-02-18T15:43:14.233Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T15:45:13.665Z - info: node/services/browser-windows:: ipc cjdsyr4j601z6adu58fe995vj: jupyter completed 11ms
2018-02-18T15:45:13.667Z - info: node/services/browser-windows:: ipc cjdsyr4j701z7adu5rt6l7jlp: jupyter completed 16ms
2018-02-18T15:45:13.702Z - info: node/services/browser-windows:: ipc cjdsyr4k901z8adu5zhlmr20j: jupyter completed 13ms
2018-02-18T15:45:13.712Z - info: node/services/browser-windows:: ipc cjdsyr4kc01z9adu5f9h1hhtp: jupyter completed 20ms
2018-02-18T15:45:13.715Z - info: node/services/browser-windows:: ipc cjdsyr4kd01zaadu5ffh5q3y8: jupyter completed 22ms
2018-02-18T15:45:29.977Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T15:45:47.890Z - info: node/services/browser-windows:: ipc cjdsyruxz01zeadu5c0pt8htl: jupyter completed 10ms
2018-02-18T15:45:47.904Z - info: node/services/browser-windows:: ipc cjdsyruy001zfadu5f5j91n8u: jupyter completed 16ms
2018-02-18T15:45:48.175Z - info: node/services/browser-windows:: ipc cjdsyrv3001zgadu5elp0h998: jupyter completed 115ms
2018-02-18T15:45:48.185Z - info: node/services/browser-windows:: ipc cjdsyrv3101zhadu5hqlyitl9: jupyter completed 124ms
2018-02-18T15:45:48.200Z - info: node/services/browser-windows:: ipc cjdsyrv3101ziadu56a9ii312: jupyter completed 139ms
2018-02-18T15:45:53.408Z - info: node/services/browser-windows:: ipc cjdsyrz7501zmadu5tnd0mgla: jupyter completed 15ms
2018-02-18T15:45:53.412Z - info: node/services/browser-windows:: ipc cjdsyrz7501znadu5o27rxkac: jupyter completed 19ms
2018-02-18T15:45:53.425Z - info: node/services/browser-windows:: ipc cjdsyrz7b01zoadu5ku72g62g: jupyter completed 26ms
2018-02-18T15:45:53.432Z - info: node/services/browser-windows:: ipc cjdsyrz7h01zpadu5vxcbes8q: jupyter completed 27ms
2018-02-18T15:45:53.444Z - info: node/services/browser-windows:: ipc cjdsyrz7i01zqadu5kgiot3tl: jupyter completed 38ms
2018-02-18T15:46:06.422Z - info: node/services/browser-windows:: ipc cjdsys98m01zuadu5imhbvbxy: jupyter completed 15ms
2018-02-18T15:46:06.426Z - info: node/services/browser-windows:: ipc cjdsys98m01zvadu5jlv0kio4: jupyter completed 20ms
2018-02-18T15:46:06.436Z - info: node/services/browser-windows:: ipc cjdsys98n01zwadu5hq8xtudt: jupyter completed 29ms
2018-02-18T15:46:06.449Z - info: node/services/browser-windows:: ipc cjdsys98w01zxadu5tk0k42ny: jupyter completed 33ms
2018-02-18T15:46:06.461Z - info: node/services/browser-windows:: ipc cjdsys98x01zyadu5g84f30f3: jupyter completed 44ms
2018-02-18T15:46:37.188Z - info: node/services/browser-windows:: ipc cjdsyswzd020dadu50ocfnnsq: jupyter completed 11ms
2018-02-18T15:46:37.195Z - info: node/services/browser-windows:: ipc cjdsyswzf020eadu5egihjo6f: jupyter completed 16ms
2018-02-18T15:46:37.248Z - info: node/services/browser-windows:: ipc cjdsysx0j020fadu5kng7599p: jupyter completed 29ms
2018-02-18T15:46:37.254Z - info: node/services/browser-windows:: ipc cjdsysx0o020gadu5oxrsicio: jupyter completed 30ms
2018-02-18T15:46:37.266Z - info: node/services/browser-windows:: ipc cjdsysx0p020hadu508db94wv: jupyter completed 41ms
2018-02-18T15:47:19.951Z - info: node/services/browser-windows:: ipc cjdsyttz0020nadu5gi975mgj: getTabs completed 16ms
2018-02-18T15:47:20.039Z - info: node/services/browser-windows:: ipc cjdsytu1o020padu5ro2rjed6: jupyter completed 11ms
2018-02-18T15:47:20.045Z - info: node/services/browser-windows:: ipc cjdsytu1p020qadu5kdox4tuv: jupyter completed 16ms
2018-02-18T15:47:20.055Z - info: node/services/browser-windows:: ipc cjdsytu1q020radu56203536p: jupyter completed 25ms
2018-02-18T15:47:20.063Z - info: node/services/browser-windows:: ipc cjdsytu1x020sadu5x77jotuz: jupyter completed 25ms
2018-02-18T15:47:20.074Z - info: node/services/browser-windows:: ipc cjdsytu1x020tadu5sxnkqxtv: jupyter completed 36ms
2018-02-18T15:47:23.505Z - info: node/services/browser-windows:: ipc cjdsytwpx020wadu58j560q05: getTabs completed 12ms
2018-02-18T15:47:23.563Z - info: node/services/browser-windows:: ipc cjdsytwrc020yadu5hk7yht3x: jupyter completed 19ms
2018-02-18T15:47:23.567Z - info: node/services/browser-windows:: ipc cjdsytwrd020zadu51rlhcuhy: jupyter completed 22ms
2018-02-18T15:47:23.583Z - info: node/services/browser-windows:: ipc cjdsytwre0210adu5ugmambjb: jupyter completed 37ms
2018-02-18T15:47:23.596Z - info: node/services/browser-windows:: ipc cjdsytwrl0211adu5arfg6vm0: jupyter completed 42ms
2018-02-18T15:47:23.602Z - info: node/services/browser-windows:: ipc cjdsytwrn0212adu50t45wmd3: jupyter completed 47ms
2018-02-18T15:47:30.348Z - info: node/services/browser-windows:: ipc cjdsyu2000216adu5bjitz3oz: getTabs completed 12ms
2018-02-18T15:47:30.404Z - info: node/services/browser-windows:: ipc cjdsyu21i0218adu5z93vvxco: jupyter completed 14ms
2018-02-18T15:47:30.409Z - info: node/services/browser-windows:: ipc cjdsyu21i0219adu5bsjcggly: jupyter completed 19ms
2018-02-18T15:47:30.424Z - info: node/services/browser-windows:: ipc cjdsyu21j021aadu5kypkdtj5: jupyter completed 33ms
2018-02-18T15:47:30.442Z - info: node/services/browser-windows:: ipc cjdsyu21t021badu54j0l0jt3: jupyter completed 41ms
2018-02-18T15:47:30.450Z - info: node/services/browser-windows:: ipc cjdsyu21t021cadu53vnss703: jupyter completed 48ms
2018-02-18T15:47:35.774Z - info: node/services/browser-windows:: ipc cjdsyu66o021gadu5zkglomxl: getTabs completed 14ms
2018-02-18T15:47:35.833Z - info: node/services/browser-windows:: ipc cjdsyu68f021iadu5qj5inw2p: jupyter completed 10ms
2018-02-18T15:47:35.838Z - info: node/services/browser-windows:: ipc cjdsyu68g021jadu51inu1tvw: jupyter completed 14ms
2018-02-18T15:47:35.863Z - info: node/services/browser-windows:: ipc cjdsyu698021kadu5yin5cudt: jupyter completed 11ms
2018-02-18T15:47:35.872Z - info: node/services/browser-windows:: ipc cjdsyu698021ladu5slu9jx46: jupyter completed 20ms
2018-02-18T15:47:35.877Z - info: node/services/browser-windows:: ipc cjdsyu699021madu50d0w37ez: jupyter completed 23ms
2018-02-18T15:47:55.695Z - info: node/services/browser-windows:: ipc cjdsyulk1021radu5hftk94bf: getTabs completed 14ms
2018-02-18T15:47:55.750Z - info: node/services/browser-windows:: ipc cjdsyullj021tadu5d364eo1m: jupyter completed 14ms
2018-02-18T15:47:55.759Z - info: node/services/browser-windows:: ipc cjdsyullk021uadu5qo6k99vr: jupyter completed 22ms
2018-02-18T15:47:55.770Z - info: node/services/browser-windows:: ipc cjdsyulll021vadu5rjytpxhp: jupyter completed 33ms
2018-02-18T15:47:55.783Z - info: node/services/browser-windows:: ipc cjdsyulls021wadu5vkc093u3: jupyter completed 38ms
2018-02-18T15:47:55.794Z - info: node/services/browser-windows:: ipc cjdsyullu021xadu5c7b1sajh: jupyter completed 48ms
2018-02-18T15:48:07.978Z - info: node/services/browser-windows:: ipc cjdsyuv1a0225adu5c7v4ou0w: jupyter completed 12ms
2018-02-18T15:48:07.984Z - info: node/services/browser-windows:: ipc cjdsyuv1b0226adu5k5staj1j: jupyter completed 16ms
2018-02-18T15:48:07.994Z - info: node/services/browser-windows:: ipc cjdsyuv1e0227adu5x7ikunon: jupyter completed 24ms
2018-02-18T15:48:08.006Z - info: node/services/browser-windows:: ipc cjdsyuv1k0228adu5r2p7bx89: jupyter completed 29ms
2018-02-18T15:48:08.019Z - info: node/services/browser-windows:: ipc cjdsyuv1l0229adu5blq8kn5b: jupyter completed 42ms
2018-02-18T15:48:13.961Z - info: node/services/browser-windows:: ipc cjdsyuznc022dadu5w3868mhb: getTabs completed 16ms
2018-02-18T15:48:14.012Z - info: node/services/browser-windows:: ipc cjdsyuzot022fadu5sjtugrrj: jupyter completed 15ms
2018-02-18T15:48:14.025Z - info: node/services/browser-windows:: ipc cjdsyuzov022gadu5qmpy6xt8: jupyter completed 26ms
2018-02-18T15:48:14.038Z - info: node/services/browser-windows:: ipc cjdsyuzoy022hadu5l1f6bh0w: jupyter completed 36ms
2018-02-18T15:48:14.043Z - info: node/services/browser-windows:: ipc cjdsyuzp4022iadu5rh123u40: jupyter completed 35ms
2018-02-18T15:48:14.054Z - info: node/services/browser-windows:: ipc cjdsyuzp5022jadu54z4z9eh7: jupyter completed 45ms
2018-02-18T15:48:37.261Z - info: node/services/browser-windows:: ipc cjdsyvhmk022uadu5ku056wg3: jupyter completed 16ms
2018-02-18T15:48:37.277Z - info: node/services/browser-windows:: ipc cjdsyvhmm022vadu5ude1nwo9: jupyter completed 31ms
2018-02-18T15:48:37.283Z - info: node/services/browser-windows:: ipc cjdsyvhmv022wadu5lr3gycvv: jupyter completed 28ms
2018-02-18T15:48:37.294Z - info: node/services/browser-windows:: ipc cjdsyvhmx022xadu51gxlh1qd: jupyter completed 36ms
2018-02-18T15:48:37.413Z - info: node/services/browser-windows:: ipc cjdsyvhqt0230adu5keljfh6l: jupyter completed 15ms
2018-02-18T15:48:37.435Z - info: node/services/browser-windows:: ipc cjdsyvhqu0231adu559wuu60l: jupyter completed 37ms
2018-02-18T15:48:37.458Z - info: node/services/browser-windows:: ipc cjdsyvhr30232adu5ojpjmzox: jupyter completed 51ms
2018-02-18T15:48:37.465Z - info: node/services/browser-windows:: ipc cjdsyvhr30233adu5c44vstax: jupyter completed 58ms
2018-02-18T15:48:37.529Z - info: node/services/browser-windows:: ipc cjdsyvhu40236adu53qwojctb: jupyter completed 13ms
2018-02-18T15:48:37.539Z - info: node/services/browser-windows:: ipc cjdsyvhu50237adu5u5acewi5: jupyter completed 22ms
2018-02-18T15:48:37.559Z - info: node/services/browser-windows:: ipc cjdsyvhud0238adu5y0wisgd7: jupyter completed 34ms
2018-02-18T15:48:37.564Z - info: node/services/browser-windows:: ipc cjdsyvhuf0239adu5sja8zeta: jupyter completed 37ms
2018-02-18T16:34:33.306Z - info: node/services/browser-windows:: ipc cjdt0ik7a023dadu50y1r8kfe: jupyter completed 18ms
2018-02-18T16:34:33.318Z - info: node/services/browser-windows:: ipc cjdt0ik7d023eadu5tnmc07cs: jupyter completed 27ms
2018-02-18T16:34:33.322Z - info: node/services/browser-windows:: ipc cjdt0ik7g023fadu588ztupjy: jupyter completed 30ms
2018-02-18T16:34:33.333Z - info: node/services/browser-windows:: ipc cjdt0ik7h023gadu5mhx1tovp: jupyter completed 40ms
2018-02-18T16:35:00.303Z - info: node/services/browser-windows:: close mainWindow
2018-02-18T16:35:00.306Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-18T16:35:00.314Z - info: node/services/browser-windows:: ipc cjdt0j51u023iadu5q3jbfo3w: dispatch completed 8ms
2018-02-18T21:19:14.882Z - info: node/services/browser-windows:: ipc cjdtaooes023jadu5yjieru8e: getTabs completed 44ms
2018-02-18T21:19:15.070Z - info: node/services/browser-windows:: ipc cjdtaooky023ladu5kgoe1p43: jupyter completed 12ms
2018-02-18T21:19:15.081Z - info: node/services/browser-windows:: ipc cjdtaookz023madu52q8q8lzo: jupyter completed 21ms
2018-02-18T21:19:31.321Z - info: node/services/browser-windows:: ipc cjdtap0ul023nadu5y82hvzc9: jupyter completed 363ms
2018-02-18T21:19:31.373Z - info: node/services/browser-windows:: ipc cjdtap0un023oadu5ynnl3ilf: jupyter completed 413ms
2018-02-18T21:19:31.376Z - info: node/services/browser-windows:: ipc cjdtap0y5023padu5rzc93g6d: jupyter completed 291ms
2018-02-18T21:19:37.100Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/untitled folder undefined
2018-02-18T21:20:05.176Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/untitled folder undefined
2018-02-18T21:20:05.195Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/PyhtonRunWorkspace undefined
2018-02-18T21:20:07.639Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T23:53:22.548Z - info: node/services/browser-windows:: ipc cjdtg6vyk0244adu5q8f11g1j: getTabs completed 37ms
2018-02-18T23:53:22.612Z - info: node/services/browser-windows:: ipc cjdtg6w0v0246adu52famq1qx: jupyter completed 21ms
2018-02-18T23:53:22.622Z - info: node/services/browser-windows:: ipc cjdtg6w0x0247adu5og2wm7xe: jupyter completed 29ms
2018-02-18T23:53:22.652Z - info: node/services/browser-windows:: ipc cjdtg6w1b0248adu5gksksfyr: jupyter completed 45ms
2018-02-18T23:53:22.659Z - info: node/services/browser-windows:: ipc cjdtg6w1c0249adu59qck491x: jupyter completed 50ms
2018-02-18T23:55:17.776Z - info: node/services/browser-windows:: ipc cjdtg9cvz024jadu5o7klem3n: getTabs completed 15ms
2018-02-18T23:55:17.934Z - info: node/services/browser-windows:: ipc cjdtg9d0i024ladu5ohpfiglm: jupyter completed 10ms
2018-02-18T23:55:17.956Z - info: node/services/browser-windows:: ipc cjdtg9d0j024madu5tjxtcgcs: jupyter completed 32ms
2018-02-18T23:55:32.048Z - info: node/services/browser-windows:: ipc cjdtg9ntk024uadu5u1xngwi5: jupyter completed 120ms
2018-02-18T23:55:32.078Z - info: node/services/browser-windows:: ipc cjdtg9nvi024vadu5uuqqle49: jupyter completed 80ms
2018-02-18T23:55:32.116Z - info: node/services/browser-windows:: ipc cjdtg9nvj024wadu5afme7bqw: jupyter completed 117ms
2018-02-18T23:55:54.466Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-18T23:56:18.878Z - info: node/services/browser-windows:: ipc cjdtgao0v0254adu5x57pmi5b: getTabs completed 31ms
2018-02-18T23:56:18.981Z - info: node/services/browser-windows:: ipc cjdtgao470256adu5cfe0jaac: jupyter completed 14ms
2018-02-18T23:56:18.986Z - info: node/services/browser-windows:: ipc cjdtgao480257adu51a3ub2k7: jupyter completed 18ms
2018-02-18T23:56:19.051Z - info: node/services/browser-windows:: ipc cjdtgao590258adu5audvcjt2: jupyter completed 45ms
2018-02-18T23:56:19.103Z - info: node/services/browser-windows:: ipc cjdtgao5a0259adu5knhb4hv8: jupyter completed 97ms
2018-02-18T23:57:02.059Z - info: node/services/browser-windows:: ipc cjdtgblb5025badu5d34djnlk: getTabs completed 72ms
2018-02-18T23:57:02.125Z - info: node/services/browser-windows:: ipc cjdtgblej025dadu5umh1ge6g: jupyter completed 18ms
2018-02-18T23:57:02.135Z - info: node/services/browser-windows:: ipc cjdtgblek025eadu5be0b9ogp: jupyter completed 27ms
2018-02-18T23:57:08.451Z - info: node/services/browser-windows:: ipc cjdtgbq9g025fadu5ni7vrx4l: jupyter completed 45ms
2018-02-18T23:57:08.576Z - info: node/services/browser-windows:: ipc cjdtgbq9i025gadu5eqxc5mpq: jupyter completed 168ms
2018-02-18T23:57:08.591Z - info: node/services/browser-windows:: ipc cjdtgbq9j025hadu5iqjwaczh: jupyter completed 184ms
2018-02-21T02:47:11.984Z - info: node/index:: activate { hasVisibleWindows: true }
2018-02-21T02:49:03.403Z - info: node/services/browser-windows:: ipc cjdwhcii8025xadu5xkrvc2q6: jupyter completed 182ms
2018-02-21T02:49:03.404Z - info: node/services/browser-windows:: ipc cjdwhcij4025yadu57qq2j468: jupyter completed 220ms
2018-02-21T02:49:03.404Z - info: node/services/browser-windows:: ipc cjdwhcij5025zadu58fbmgdso: jupyter completed 219ms
2018-02-21T02:49:03.452Z - info: node/services/browser-windows:: ipc cjdwhcij50260adu5940bhblb: jupyter completed 267ms
2018-02-21T02:49:03.505Z - info: node/services/browser-windows:: ipc cjdwhcij50261adu5kooi2coy: jupyter completed 320ms
2018-02-21T02:49:03.506Z - info: node/services/browser-windows:: ipc cjdwhcij50262adu5anmvgozi: jupyter completed 321ms
2018-02-21T02:49:03.538Z - info: node/services/browser-windows:: ipc cjdwhcij50263adu5hpk6bgbs: jupyter completed 353ms
2018-02-21T02:49:03.547Z - info: node/services/browser-windows:: ipc cjdwhcij60264adu5bq4gt2fw: jupyter completed 361ms
2018-02-21T02:49:03.552Z - info: node/services/browser-windows:: ipc cjdwhcij60265adu5or5li5b3: jupyter completed 366ms
2018-02-21T02:49:03.559Z - info: node/services/browser-windows:: ipc cjdwhcij60266adu5kf8jmrsi: jupyter completed 373ms
2018-02-21T02:49:03.579Z - info: node/services/browser-windows:: ipc cjdwhcij60267adu5obaafdow: jupyter completed 393ms
2018-02-21T02:49:03.587Z - info: node/services/browser-windows:: ipc cjdwhcij60268adu5ekpxdgit: jupyter completed 401ms
2018-02-24T21:36:55.656Z - info: node/services/files:: HEEEEEY addDir /Users/diamac/shapely undefined
2018-02-24T21:36:56.159Z - error: uncaughtException: ei.stat.isDirectory is not a function date=Sat Feb 24 2018 16:36:56 GMT-0500 (EST), pid=22405, uid=501, gid=20, cwd=/, execPath=/Applications/Rodeo.app/Contents/MacOS/Rodeo, version=v6.5.0, argv=[/Applications/Rodeo.app/Contents/MacOS/Rodeo, -psn_0_8501275], rss=63123456, heapTotal=29417472, heapUsed=23028464, loadavg=[2.48095703125, 2.50537109375, 2.51953125], uptime=1743103, trace=[column=24, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=238, method=null, native=false, column=null, file=null, function=Array.filter, line=null, method=filter, native=true, column=12, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=236, method=null, native=false, column=38, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js, function=null, line=199, method=null, native=false, column=18, file=/Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js, function=null, line=287, method=null, native=false, column=15, file=fs.js, function=FSReqWrap.oncomplete, line=123, method=oncomplete, native=false], stack=[TypeError: ei.stat.isDirectory is not a function,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:238:24,     at Array.filter (native),     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:236:12,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/readdirp/readdirp.js:199:38,     at /Applications/Rodeo.app/Contents/Resources/app.asar/node_modules/graceful-fs/polyfills.js:287:18,     at FSReqWrap.oncomplete (fs.js:123:15)]
2018-02-24T21:43:07.518Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/assets undefined
2018-02-24T21:43:07.600Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/inc undefined
2018-02-24T21:43:07.601Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/js undefined
2018-02-24T21:43:07.601Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/languages undefined
2018-02-24T21:43:07.601Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/layouts undefined
2018-02-24T21:43:07.602Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/page-templates undefined
2018-02-24T21:43:07.602Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely/template-parts undefined
2018-02-24T21:43:07.603Z - info: node/services/files:: HEEEEEY unlinkDir /Users/diamac/shapely undefined
2018-02-27T11:32:05.412Z - info: node/services/browser-windows:: ipc cje5ko92j026aadu5cukz8lvf: getTabs completed 156ms
2018-02-27T11:32:07.722Z - info: node/services/browser-windows:: ipc cje5koam3026cadu5a3h4zijv: jupyter completed 495ms
2018-02-27T11:32:07.742Z - info: node/services/browser-windows:: ipc cje5koao8026dadu5zztfjhir: jupyter completed 438ms
2018-02-27T11:32:07.750Z - info: node/services/browser-windows:: ipc cje5koayo026eadu5o05fu30o: jupyter completed 68ms
2018-02-27T11:32:07.761Z - info: node/services/browser-windows:: ipc cje5koayo026fadu57u98ma9o: jupyter completed 80ms
2018-02-27T11:32:18.600Z - info: node/services/menu-definitions:: menu clicked { '0': 'dispatch',
  '1': 'cje5kojd1026hadu5oooal7ux',
  '2': { type: 'SHOW_OPEN_FILE_DIALOG' },
  '3': 'mainWindow' }
2018-02-27T11:32:56.479Z - info: node/services/browser-windows:: close mainWindow
2018-02-27T11:32:56.509Z - info: node/services/browser-windows:: dispatch mainWindow { type: 'ASK_QUIT' }
2018-02-27T11:32:56.592Z - info: node/services/browser-windows:: ipc cje5kpcn2026iadu5mwvibyal: dispatch completed 82ms
2018-02-27T11:32:58.685Z - info: node/index:: onQuitApplication
2018-02-27T11:32:58.686Z - info: node/index:: stopping all file watchers
2018-02-27T11:32:58.945Z - info: node/index:: killing all children processes
2018-02-27T11:33:00.865Z - info: node/index:: python kernel process event cjdizzunv01jeadu55vz3ysw4 process 26125 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-27T11:33:00.968Z - info: node/services/processes:: removed child process { pid: 26125,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 2 children running
2018-02-27T11:33:01.178Z - info: node/index:: python kernel process closed cjdizzunv01jeadu55vz3ysw4 process 26125 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:01.230Z - info: node/index:: process 26125 successfully killed { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:01.230Z - info: node/services/browser-windows:: ipc cje5kpg8q026jadu5i5cfrjym: close completed 52ms
2018-02-27T11:33:02.190Z - info: node/index:: python kernel process event cjdhqbcdc01bbadu5ry0peonl process 24553 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-27T11:33:02.203Z - info: node/services/processes:: removed child process { pid: 24553,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 1 children running
2018-02-27T11:33:02.278Z - info: node/index:: python kernel process closed cjdhqbcdc01bbadu5ry0peonl process 24553 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:02.279Z - info: node/index:: python kernel process event cjdhqbcdo01bcadu5z3jfbpaa process 24554 { cmd: 'python', cwd: '~', kernelName: 'python3' } { source: 'stderr.data',
  data: '[IPKernelApp] WARNING | Parent appears to have exited, shutting down.\n' }
2018-02-27T11:33:02.280Z - info: node/index:: process 24553 successfully killed { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:02.359Z - info: node/services/processes:: removed child process { pid: 24554,
  code: null,
  signal: 'SIGTERM',
  errors: {},
  cmd: 'python',
  args: 
   { '0': '-c',
     '1': 'import os\nimport sys\nimport json\nimport pprint as pp\nimport threading\nfrom datetime import datetime\nfrom collections import OrderedDict\n\n# start compatibility with IPython Jupyter 4.0\ntry:\n    from jupyter_client import manager\nexcept ImportError:\n    try:\n        from IPython.kernel import manager\n    except ImportError:\n        raise Exception(\'Jupyter is not installed\')\n\ntry:\n    import pip\nexcept:\n    raise Exception(\'Pip is not installed\')\n\ntry:\n    import numpy\nexcept:\n    raise Exception(\'Numpy is not installed\')\n\ntry:\n    import pandas\nexcept:\n    raise Exception(\'Pandas is not installed\')\n\ntry:\n    import matplotlib\nexcept:\n    raise Exception(\'Matplotlib is not installed\')\n\n# python3/python2 nonsense\ntry:\n    from Queue import Empty\n    import Queue\nexcept:\n    from queue import Empty\n    import queue as Queue\n\ndef json_serial(obj):\n    """JSON serializer for objects not serializable by default json code"""\n\n    if isinstance(obj, datetime):\n        serial = obj.isoformat()\n        return serial\n    raise TypeError ("Type not serializable")\n\ndef add_input(input_queue):\n    while True:\n        input_queue.put(sys.stdin.readline())\n\ndef kernel(wd=None, verbose=0):\n    # setup ipython kernel and configure it\n    kernel_manager, kernel_client = manager.start_new_kernel(extra_arguments=["--matplotlib=\'inline\'"])\n    current_timeout_min = 0.0005\n    current_timeout_max = 0.01\n    current_timeout = current_timeout_max\n\n    acceptable_types = [\n      "execute_input",\n      "stream",\n      "display_data",\n      "error",\n      "execute_result",\n      "execute_reply",\n      "complete_reply"\n    ]\n\n    input_queue = Queue.Queue()\n\n    input_thread = threading.Thread(target=add_input, args=(input_queue,))\n    input_thread.daemon = True\n    input_thread.start()\n\n    # we\'re up and running!\n    sys.stdout.write(json.dumps({ "id": "startup-complete", "status": "complete" }) + "\\n")\n\n    should_continue = True\n    while should_continue:\n        if not input_queue.empty():\n            current_timeout = current_timeout_min\n            line = input_queue.get().strip()\n            payload = json.loads(line)\n            uid = payload["id"]\n            args = payload.get("args", [])\n            kwargs = payload.get("kwargs", {})\n            method = payload.get("method", False)\n            target_str = payload.get("target", "client")\n            exec_eval = payload.get("exec_eval", False)\n\n            if target_str == "manager":\n              target = kernel_manager\n            else:\n              target = kernel_client\n\n            if method:\n                if getattr(target, method, False):\n                    result = getattr(target, method)(*args, **kwargs)\n                    if result:\n                        sys.stdout.write(json.dumps({"source": "link", "result": result, "id": uid }) + \'\\n\')\n                else:\n                    sys.stdout.write(json.dumps({ "error": "Missing method " + method, "id": uid }) + \'\\n\')\n\n            if exec_eval:\n                result = eval(exec_eval)\n                sys.stdout.write(json.dumps({ "source": "eval", "result": result, "id": uid }) + \'\\n\')\n\n        try:\n            data = kernel_client.get_shell_msg(timeout=current_timeout)\n\n            content = data.get(\'content\', False)\n\n            if content:\n                payload = content.get(\'payload\', False)\n                if payload:\n                    try:\n                        first = payload[0]\n                        if first:\n                            source = first.get(\'source\', False)\n                            keepkernel = first.get(\'keepkernel\', False)\n                            if source == \'ask_exit\' and keepkernel == False:\n                                should_continue = False\n                    except IndexError:\n                        pass\n                msg_type = data.get(\'msg_type\', False)\n                if msg_type == \'shutdown_reply\':\n                    shutdown_restart = content.get(\'restart\', False)\n                    if not shutdown_restart:\n                        should_continue = False\n            sys.stdout.write(json.dumps({"source": "shell", "result": data, "should_continue": should_continue}, default=json_serial) + \'\\n\')\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            while True:\n                data = kernel_client.get_iopub_msg(timeout=current_timeout)\n                sys.stdout.write(json.dumps({"source": "iopub", "result": data}, default=json_serial) + \'\\n\')\n                sys.stdout.flush()\n                current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        try:\n            data = kernel_client.get_stdin_msg(timeout=current_timeout)\n            sys.stdout.write(json.dumps({"source": "stdin", "result": data}, default=json_serial) + \'\\n\')\n            sys.stdout.flush()\n            current_timeout = current_timeout_min\n        except Empty:\n            pass\n\n        current_timeout = min(current_timeout * 1.1, current_timeout_max)\n\nif __name__=="__main__":\n    wd = None\n    if len(sys.argv) > 1:\n        wd = sys.argv[1]\n    kernel(wd, verbose=2)\n',
     '2': 'python3' },
  options: 
   { cwd: '/Users/diamac',
     env: 
      { Apple_PubSub_Socket_Render: '/private/tmp/com.apple.launchd.wfv4UK6MQc/Render',
        CLICOLOR: 1,
        COMMAND_MODE: 'unix2003',
        GOOGLE_API_KEY: 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q',
        HOME: '/Users/diamac',
        LOGNAME: 'diamac',
        PATH: '/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin',
        PWD: '/',
        PYTHONIOENCODING: 'utf-8',
        PYTHONUNBUFFERED: '1',
        SHELL: '/bin/bash',
        SHLVL: '1',
        SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.jHaS1czyAO/Listeners',
        TMPDIR: '/var/folders/0w/sh9z5zl1021fkmchp22dv9t80000gn/T/',
        USER: 'diamac',
        XPC_FLAGS: '0x0',
        XPC_SERVICE_NAME: 'com.apple.xpc.launchd.oneshot.0x10000027.Rodeo',
        _: '/usr/bin/env',
        __CF_USER_TEXT_ENCODING: '0x1F5:0x0:0x0' },
     stdio: { '0': 'pipe', '1': 'pipe', '2': 'pipe' },
     encoding: 'UTF8' } } ; 0 children running
2018-02-27T11:33:02.360Z - info: node/index:: python kernel process closed cjdhqbcdo01bcadu5z3jfbpaa process 24554 { cmd: 'python', cwd: '~', kernelName: 'python3' } { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:02.396Z - info: node/services/browser-windows:: ipc cje5kph3c026kadu559nr5el5: close completed 115ms
2018-02-27T11:33:02.441Z - info: node/index:: process 24554 successfully killed { code: null, signal: 'SIGTERM' }
2018-02-27T11:33:02.441Z - info: node/index:: quiting
2018-02-27T11:33:02.458Z - info: node/index:: before-quit
2018-02-27T11:33:02.458Z - info: node/services/browser-windows:: close mainWindow
2018-02-27T11:33:02.514Z - info: node/services/browser-windows:: ipc cje5kph6k026ladu5xmpwhc4m: close completed 118ms
2018-02-27T11:33:03.119Z - info: node/index:: will-quit
2018-02-27T11:33:04.095Z - info: node/index:: quit { errorCode: 0 }
2018-02-27T11:33:04.615Z - info: node/services/browser-windows:: destroyed
2018-02-27T11:33:05.954Z - info: node/services/browser-windows:: closed mainWindow
